PREFIX sindice: <http://vocab.sindice.net/>

PREFIX w3: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ogporg: <http://opengraphprotocol.org/schema/>
PREFIX ogpme: <http://ogp.me/ns#>
PREFIX ogorg: <http://opengraph.org/schema/>
PREFIX purl: <http://purl.org/dc/elements/1.1/>
PREFIX dbpp: <http://dbpedia.org/property/>
PREFIX dbpo: <http://dbpedia.org/ontology/>


SELECT  ?id_type ?p  (COUNT (?p) AS ?pCardinality) ?id_typeSon
WHERE {
	{
		# create new node for the node with multiple type
		SELECT ?s (GROUP_CONCAT(IF(isURI(?type),
	            concat('<', str(?type), '>'),
	            concat('"', ?type, '"'))) AS ?id_type)
		WHERE {
	 	{
	 	    # order the "type" to concatenate in alphabetical order
	    	SELECT ?s ?type WHERE {
	    	    # get all the node with predicate "type"
		    	{ ?s w3:type ?type . }
	            UNION{ ?s ogporg:type ?type . }
	            UNION{ ?s ogpme:type ?type . }
	            UNION{ ?s ogorg:type ?type . }
	            UNION{ ?s purl:type ?type . }
	            UNION{ ?s dbpp:type ?type . }
	            UNION{ ?s dbpo:type ?type . }
	        }
	        ORDER BY ?type
	    }
	    }
	    GROUP BY ?s
	}
	# Remove the error generated by the GROUP_CONCAT
	FILTER(?id_type != '')

	# get the predicate
    ?s ?p ?sSon .
    
	# Get the name of the son node (if possible)
    OPTIONAL {
    {
		# create new node for the node with multiple type
    	SELECT ?sSon (GROUP_CONCAT(IF(isURI(?typeSon),
        	    concat('<', str(?typeSon), '>'),
            	concat('"', ?typeSon, '"'))) AS ?id_typeSon)
        WHERE {
        {
        	# order the "type" to concatenate in alphabetical order
    		SELECT ?sSon ?typeSon WHERE {
    		    # get all the node with predicate "type"
				{ ?sSon w3:type ?typeSon . }
				UNION{ ?sSon ogporg:type ?typeSon . }
				UNION{ ?sSon ogpme:type ?typeSon . }
				UNION{ ?sSon ogorg:type ?typeSon . }
				UNION{ ?sSon purl:type ?typeSon . }
				UNION{ ?sSon dbpp:type ?typeSon . }
				UNION{ ?sSon dbpo:type ?typeSon . }
		    }
            ORDER BY ?typeSon
       }
       }
       GROUP BY ?sSon
    }
    }
    # finally count the number of different predicate
}
GROUP BY ?p ?id_type ?id_typeSon LIMIT 10