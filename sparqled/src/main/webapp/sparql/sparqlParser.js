sparqlParser = (function(){
  /* Generated by PEG.js (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.grammarParser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var pos = 0;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quoteString(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')        // backslash
          .replace(/"/g, '\\"')          // closing quote character
          .replace(/\r/g, '\\r')         // carriage return
          .replace(/\u2028/g, '\\u2028') // line separator
          .replace(/\u2029/g, '\\u2029') // paragraph separator
          .replace(/\n/g, '\\n')         // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function arrayContains(array, value) {
        /*
         * Stupid IE does not have Array.prototype.indexOf, otherwise this
         * function would be a one-liner.
         */
        var length = array.length;
        for (var i = 0; i < length; i++) {
          if (array[i] === value) {
            return true;
          }
        }
        return false;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        if (!arrayContains(rightmostMatchFailuresExpected, failure)) {
          rightmostMatchFailuresExpected.push(failure);
        }
      }
      
      function parse_query(context) {
        var cacheKey = "query" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse__(context);
        if (result2 !== null) {
          var result3 = parse_prologue(context);
          if (result3 !== null) {
            var result12 = parse_selectQuery(context);
            var result11 = result12 !== null
              ? (function() {return "select";})()
              : null;
            if (result11 !== null) {
              var result4 = result11;
            } else {
              var result10 = parse_constructQuery(context);
              var result9 = result10 !== null
                ? (function() {return "construct";})()
                : null;
              if (result9 !== null) {
                var result4 = result9;
              } else {
                var result8 = parse_describeQuery(context);
                var result7 = result8 !== null
                  ? (function() {return "describe";})()
                  : null;
                if (result7 !== null) {
                  var result4 = result7;
                } else {
                  var result6 = parse_askQuery(context);
                  var result5 = result6 !== null
                    ? (function() {return "ask";})()
                    : null;
                  if (result5 !== null) {
                    var result4 = result5;
                  } else {
                    var result4 = null;;
                  };
                };
              };
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(q) {return q;})(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prologue(context) {
        var cacheKey = "prologue" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos2 = pos;
        var result7 = parse_baseDecl(context);
        if (result7 !== null) {
          var result8 = parse__(context);
          if (result8 !== null) {
            var result6 = [result7, result8];
          } else {
            var result6 = null;
            pos = savedPos2;
          }
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        var result1 = result6 !== null ? result6 : '';
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var result4 = parse_prefixDecl(context);
          if (result4 !== null) {
            var result5 = parse__(context);
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            var result4 = parse_prefixDecl(context);
            if (result4 !== null) {
              var result5 = parse__(context);
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_baseDecl(context) {
        var cacheKey = "baseDecl" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_BASE(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = parse_IRI_REF(context);
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prefixDecl(context) {
        var cacheKey = "prefixDecl" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_PREFIX(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = parse_PNAME_NS(context);
            if (result3 !== null) {
              var result4 = parse__(context);
              if (result4 !== null) {
                var result5 = parse_IRI_REF(context);
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_selectQuery(context) {
        var cacheKey = "selectQuery" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_SELECT(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var savedPos5 = pos;
            var result25 = parse_DISTINCT(context);
            if (result25 !== null) {
              var result26 = parse__(context);
              if (result26 !== null) {
                var result24 = [result25, result26];
              } else {
                var result24 = null;
                pos = savedPos5;
              }
            } else {
              var result24 = null;
              pos = savedPos5;
            }
            if (result24 !== null) {
              var result20 = result24;
            } else {
              var savedPos4 = pos;
              var result22 = parse_REDUCED(context);
              if (result22 !== null) {
                var result23 = parse__(context);
                if (result23 !== null) {
                  var result21 = [result22, result23];
                } else {
                  var result21 = null;
                  pos = savedPos4;
                }
              } else {
                var result21 = null;
                pos = savedPos4;
              }
              if (result21 !== null) {
                var result20 = result21;
              } else {
                var result20 = null;;
              };
            }
            var result3 = result20 !== null ? result20 : '';
            if (result3 !== null) {
              var savedPos3 = pos;
              var result18 = parse_var(context);
              if (result18 !== null) {
                var result19 = parse__(context);
                if (result19 !== null) {
                  var result17 = [result18, result19];
                } else {
                  var result17 = null;
                  pos = savedPos3;
                }
              } else {
                var result17 = null;
                pos = savedPos3;
              }
              if (result17 !== null) {
                var result16 = [];
                while (result17 !== null) {
                  result16.push(result17);
                  var savedPos3 = pos;
                  var result18 = parse_var(context);
                  if (result18 !== null) {
                    var result19 = parse__(context);
                    if (result19 !== null) {
                      var result17 = [result18, result19];
                    } else {
                      var result17 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result17 = null;
                    pos = savedPos3;
                  }
                }
              } else {
                var result16 = null;
              }
              if (result16 !== null) {
                var result4 = result16;
              } else {
                var savedPos2 = pos;
                var result14 = parse_ASTERISK(context);
                if (result14 !== null) {
                  var result15 = parse__(context);
                  if (result15 !== null) {
                    var result13 = [result14, result15];
                  } else {
                    var result13 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result13 = null;
                  pos = savedPos2;
                }
                if (result13 !== null) {
                  var result4 = result13;
                } else {
                  var result4 = null;;
                };
              }
              if (result4 !== null) {
                var result5 = [];
                var savedPos1 = pos;
                var result11 = parse_datasetClause(context);
                if (result11 !== null) {
                  var result12 = parse__(context);
                  if (result12 !== null) {
                    var result10 = [result11, result12];
                  } else {
                    var result10 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos1;
                }
                while (result10 !== null) {
                  result5.push(result10);
                  var savedPos1 = pos;
                  var result11 = parse_datasetClause(context);
                  if (result11 !== null) {
                    var result12 = parse__(context);
                    if (result12 !== null) {
                      var result10 = [result11, result12];
                    } else {
                      var result10 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos1;
                  }
                }
                if (result5 !== null) {
                  var result6 = parse_whereClause(context);
                  if (result6 !== null) {
                    var result7 = parse__(context);
                    if (result7 !== null) {
                      var result8 = parse_solutionModifier(context);
                      if (result8 !== null) {
                        var result9 = parse__(context);
                        if (result9 !== null) {
                          var result0 = [result1, result2, result3, result4, result5, result6, result7, result8, result9];
                        } else {
                          var result0 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result0 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_constructQuery(context) {
        var cacheKey = "constructQuery" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_CONSTRUCT(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = parse_constructTemplate(context);
            if (result3 !== null) {
              var result4 = parse__(context);
              if (result4 !== null) {
                var result5 = [];
                var savedPos1 = pos;
                var result11 = parse_datasetClause(context);
                if (result11 !== null) {
                  var result12 = parse__(context);
                  if (result12 !== null) {
                    var result10 = [result11, result12];
                  } else {
                    var result10 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos1;
                }
                while (result10 !== null) {
                  result5.push(result10);
                  var savedPos1 = pos;
                  var result11 = parse_datasetClause(context);
                  if (result11 !== null) {
                    var result12 = parse__(context);
                    if (result12 !== null) {
                      var result10 = [result11, result12];
                    } else {
                      var result10 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos1;
                  }
                }
                if (result5 !== null) {
                  var result6 = parse_whereClause(context);
                  if (result6 !== null) {
                    var result7 = parse__(context);
                    if (result7 !== null) {
                      var result8 = parse_solutionModifier(context);
                      if (result8 !== null) {
                        var result9 = parse__(context);
                        if (result9 !== null) {
                          var result0 = [result1, result2, result3, result4, result5, result6, result7, result8, result9];
                        } else {
                          var result0 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result0 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_describeQuery(context) {
        var cacheKey = "describeQuery" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_DESCRIBE(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var savedPos4 = pos;
            var result19 = parse_varOrIRIref(context);
            if (result19 !== null) {
              var result20 = parse__(context);
              if (result20 !== null) {
                var result18 = [result19, result20];
              } else {
                var result18 = null;
                pos = savedPos4;
              }
            } else {
              var result18 = null;
              pos = savedPos4;
            }
            if (result18 !== null) {
              var result17 = [];
              while (result18 !== null) {
                result17.push(result18);
                var savedPos4 = pos;
                var result19 = parse_varOrIRIref(context);
                if (result19 !== null) {
                  var result20 = parse__(context);
                  if (result20 !== null) {
                    var result18 = [result19, result20];
                  } else {
                    var result18 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result18 = null;
                  pos = savedPos4;
                }
              }
            } else {
              var result17 = null;
            }
            if (result17 !== null) {
              var result3 = result17;
            } else {
              var savedPos3 = pos;
              var result15 = parse_ASTERISK(context);
              if (result15 !== null) {
                var result16 = parse__(context);
                if (result16 !== null) {
                  var result14 = [result15, result16];
                } else {
                  var result14 = null;
                  pos = savedPos3;
                }
              } else {
                var result14 = null;
                pos = savedPos3;
              }
              if (result14 !== null) {
                var result3 = result14;
              } else {
                var result3 = null;;
              };
            }
            if (result3 !== null) {
              var result4 = [];
              var savedPos2 = pos;
              var result12 = parse_datasetClause(context);
              if (result12 !== null) {
                var result13 = parse__(context);
                if (result13 !== null) {
                  var result11 = [result12, result13];
                } else {
                  var result11 = null;
                  pos = savedPos2;
                }
              } else {
                var result11 = null;
                pos = savedPos2;
              }
              while (result11 !== null) {
                result4.push(result11);
                var savedPos2 = pos;
                var result12 = parse_datasetClause(context);
                if (result12 !== null) {
                  var result13 = parse__(context);
                  if (result13 !== null) {
                    var result11 = [result12, result13];
                  } else {
                    var result11 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos2;
                }
              }
              if (result4 !== null) {
                var savedPos1 = pos;
                var result9 = parse_whereClause(context);
                if (result9 !== null) {
                  var result10 = parse__(context);
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
                var result5 = result8 !== null ? result8 : '';
                if (result5 !== null) {
                  var result6 = parse_solutionModifier(context);
                  if (result6 !== null) {
                    var result7 = parse__(context);
                    if (result7 !== null) {
                      var result0 = [result1, result2, result3, result4, result5, result6, result7];
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_askQuery(context) {
        var cacheKey = "askQuery" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_ASK(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = [];
            var savedPos1 = pos;
            var result7 = parse_datasetClause(context);
            if (result7 !== null) {
              var result8 = parse__(context);
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            } else {
              var result6 = null;
              pos = savedPos1;
            }
            while (result6 !== null) {
              result3.push(result6);
              var savedPos1 = pos;
              var result7 = parse_datasetClause(context);
              if (result7 !== null) {
                var result8 = parse__(context);
                if (result8 !== null) {
                  var result6 = [result7, result8];
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            }
            if (result3 !== null) {
              var result4 = parse_whereClause(context);
              if (result4 !== null) {
                var result5 = parse__(context);
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_datasetClause(context) {
        var cacheKey = "datasetClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_FROM(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result5 = parse_iriRef(context);
            if (result5 !== null) {
              var result3 = result5;
            } else {
              var result4 = parse_namedGraphClause(context);
              if (result4 !== null) {
                var result3 = result4;
              } else {
                var result3 = null;;
              };
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_namedGraphClause(context) {
        var cacheKey = "namedGraphClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_NAMED(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = parse_iriRef(context);
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whereClause(context) {
        var cacheKey = "whereClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result4 = parse_WHERE(context);
        if (result4 !== null) {
          var result5 = parse__(context);
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          var result2 = parse_groupGraphPattern(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_solutionModifier(context) {
        var cacheKey = "solutionModifier" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse_orderClause(context);
        var result1 = result5 !== null ? result5 : '';
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result4 = parse_limitOffsetClauses(context);
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_limitOffsetClauses(context) {
        var cacheKey = "limitOffsetClauses" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result7 = parse_limitClause(context);
        if (result7 !== null) {
          var result8 = parse__(context);
          if (result8 !== null) {
            var savedPos2 = pos;
            var result11 = parse_offsetClause(context);
            if (result11 !== null) {
              var result12 = parse__(context);
              if (result12 !== null) {
                var result10 = [result11, result12];
              } else {
                var result10 = null;
                pos = savedPos2;
              }
            } else {
              var result10 = null;
              pos = savedPos2;
            }
            var result9 = result10 !== null ? result10 : '';
            if (result9 !== null) {
              var result6 = [result7, result8, result9];
            } else {
              var result6 = null;
              pos = savedPos1;
            }
          } else {
            var result6 = null;
            pos = savedPos1;
          }
        } else {
          var result6 = null;
          pos = savedPos1;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var result2 = parse_offsetClause(context);
          if (result2 !== null) {
            var result3 = parse__(context);
            if (result3 !== null) {
              var result5 = parse_limitClause(context);
              var result4 = result5 !== null ? result5 : '';
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_orderClause(context) {
        var cacheKey = "orderClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_ORDER(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = parse_BY(context);
            if (result3 !== null) {
              var result4 = parse__(context);
              if (result4 !== null) {
                var result6 = parse_orderCondition(context);
                if (result6 !== null) {
                  var result5 = [];
                  while (result6 !== null) {
                    result5.push(result6);
                    var result6 = parse_orderCondition(context);
                  }
                } else {
                  var result5 = null;
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_orderCondition(context) {
        var cacheKey = "orderCondition" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result9 = parse_ASC(context);
        if (result9 !== null) {
          var result5 = result9;
        } else {
          var result8 = parse_DESC(context);
          if (result8 !== null) {
            var result5 = result8;
          } else {
            var result5 = null;;
          };
        }
        if (result5 !== null) {
          var result6 = parse__(context);
          if (result6 !== null) {
            var result7 = parse_brackettedExpression(context);
            if (result7 !== null) {
              var result4 = [result5, result6, result7];
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_constraint(context);
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result2 = parse_var(context);
            if (result2 !== null) {
              var result1 = result2;
            } else {
              var result1 = null;;
            };
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_limitClause(context) {
        var cacheKey = "limitClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_LIMIT(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = parse_INTEGER(context);
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_offsetClause(context) {
        var cacheKey = "offsetClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_OFFSET(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = parse_INTEGER(context);
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_groupGraphPattern(context) {
        var cacheKey = "groupGraphPattern" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_OPEN_CURLY_BRACE(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var savedPos6 = pos;
            var result23 = parse_triplesBlock(context);
            if (result23 !== null) {
              var result24 = parse__(context);
              if (result24 !== null) {
                var result22 = [result23, result24];
              } else {
                var result22 = null;
                pos = savedPos6;
              }
            } else {
              var result22 = null;
              pos = savedPos6;
            }
            var result3 = result22 !== null ? result22 : '';
            if (result3 !== null) {
              var result4 = [];
              var savedPos1 = pos;
              var savedPos5 = pos;
              var result20 = parse_graphPatternNotTriples(context);
              if (result20 !== null) {
                var result21 = parse__(context);
                if (result21 !== null) {
                  var result19 = [result20, result21];
                } else {
                  var result19 = null;
                  pos = savedPos5;
                }
              } else {
                var result19 = null;
                pos = savedPos5;
              }
              if (result19 !== null) {
                var result7 = result19;
              } else {
                var savedPos4 = pos;
                var result17 = parse_filter(context);
                if (result17 !== null) {
                  var result18 = parse__(context);
                  if (result18 !== null) {
                    var result16 = [result17, result18];
                  } else {
                    var result16 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result16 = null;
                  pos = savedPos4;
                }
                if (result16 !== null) {
                  var result7 = result16;
                } else {
                  var result7 = null;;
                };
              }
              if (result7 !== null) {
                var savedPos3 = pos;
                var result14 = parse_DOT(context);
                if (result14 !== null) {
                  var result15 = parse__(context);
                  if (result15 !== null) {
                    var result13 = [result14, result15];
                  } else {
                    var result13 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result13 = null;
                  pos = savedPos3;
                }
                var result8 = result13 !== null ? result13 : '';
                if (result8 !== null) {
                  var savedPos2 = pos;
                  var result11 = parse_triplesBlock(context);
                  if (result11 !== null) {
                    var result12 = parse__(context);
                    if (result12 !== null) {
                      var result10 = [result11, result12];
                    } else {
                      var result10 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos2;
                  }
                  var result9 = result10 !== null ? result10 : '';
                  if (result9 !== null) {
                    var result6 = [result7, result8, result9];
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              while (result6 !== null) {
                result4.push(result6);
                var savedPos1 = pos;
                var savedPos5 = pos;
                var result20 = parse_graphPatternNotTriples(context);
                if (result20 !== null) {
                  var result21 = parse__(context);
                  if (result21 !== null) {
                    var result19 = [result20, result21];
                  } else {
                    var result19 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result19 = null;
                  pos = savedPos5;
                }
                if (result19 !== null) {
                  var result7 = result19;
                } else {
                  var savedPos4 = pos;
                  var result17 = parse_filter(context);
                  if (result17 !== null) {
                    var result18 = parse__(context);
                    if (result18 !== null) {
                      var result16 = [result17, result18];
                    } else {
                      var result16 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result16 = null;
                    pos = savedPos4;
                  }
                  if (result16 !== null) {
                    var result7 = result16;
                  } else {
                    var result7 = null;;
                  };
                }
                if (result7 !== null) {
                  var savedPos3 = pos;
                  var result14 = parse_DOT(context);
                  if (result14 !== null) {
                    var result15 = parse__(context);
                    if (result15 !== null) {
                      var result13 = [result14, result15];
                    } else {
                      var result13 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result13 = null;
                    pos = savedPos3;
                  }
                  var result8 = result13 !== null ? result13 : '';
                  if (result8 !== null) {
                    var savedPos2 = pos;
                    var result11 = parse_triplesBlock(context);
                    if (result11 !== null) {
                      var result12 = parse__(context);
                      if (result12 !== null) {
                        var result10 = [result11, result12];
                      } else {
                        var result10 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result10 = null;
                      pos = savedPos2;
                    }
                    var result9 = result10 !== null ? result10 : '';
                    if (result9 !== null) {
                      var result6 = [result7, result8, result9];
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              }
              if (result4 !== null) {
                var result5 = parse_CLOSE_CURLY_BRACE(context);
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_triplesBlock(context) {
        var cacheKey = "triplesBlock" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_triplesSameSubject(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var savedPos1 = pos;
            var result5 = parse_DOT(context);
            if (result5 !== null) {
              var result6 = parse__(context);
              if (result6 !== null) {
                var savedPos2 = pos;
                var result9 = parse_triplesBlock(context);
                if (result9 !== null) {
                  var result10 = parse__(context);
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
                var result7 = result8 !== null ? result8 : '';
                if (result7 !== null) {
                  var result4 = [result5, result6, result7];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_graphPatternNotTriples(context) {
        var cacheKey = "graphPatternNotTriples" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_optionalGraphPattern(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_groupOrUnionGraphPattern(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_graphGraphPattern(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_optionalGraphPattern(context) {
        var cacheKey = "optionalGraphPattern" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_OPTIONAL(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = parse_groupGraphPattern(context);
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_graphGraphPattern(context) {
        var cacheKey = "graphGraphPattern" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_GRAPH(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = parse_varOrIRIref(context);
            if (result3 !== null) {
              var result4 = parse__(context);
              if (result4 !== null) {
                var result5 = parse_groupGraphPattern(context);
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_groupOrUnionGraphPattern(context) {
        var cacheKey = "groupOrUnionGraphPattern" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_groupGraphPattern(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = [];
            var savedPos1 = pos;
            var result5 = parse_UNION(context);
            if (result5 !== null) {
              var result6 = parse__(context);
              if (result6 !== null) {
                var result7 = parse_groupGraphPattern(context);
                if (result7 !== null) {
                  var result8 = parse__(context);
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            while (result4 !== null) {
              result3.push(result4);
              var savedPos1 = pos;
              var result5 = parse_UNION(context);
              if (result5 !== null) {
                var result6 = parse__(context);
                if (result6 !== null) {
                  var result7 = parse_groupGraphPattern(context);
                  if (result7 !== null) {
                    var result8 = parse__(context);
                    if (result8 !== null) {
                      var result4 = [result5, result6, result7, result8];
                    } else {
                      var result4 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_filter(context) {
        var cacheKey = "filter" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_FILTER(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = parse_constraint(context);
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_constraint(context) {
        var cacheKey = "constraint" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_brackettedExpression(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_builtInCall(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_functionCall(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_functionCall(context) {
        var cacheKey = "functionCall" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_iriRef(context);
        if (result1 !== null) {
          var result2 = parse_argList(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_argList(context) {
        var cacheKey = "argList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_OPEN_BRACE(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var savedPos1 = pos;
            var result6 = parse_conditionalOrExpression(context);
            if (result6 !== null) {
              var result7 = parse__(context);
              if (result7 !== null) {
                var result8 = [];
                var savedPos2 = pos;
                var result10 = parse_COMMA(context);
                if (result10 !== null) {
                  var result11 = parse__(context);
                  if (result11 !== null) {
                    var result12 = parse_conditionalOrExpression(context);
                    if (result12 !== null) {
                      var result13 = parse__(context);
                      if (result13 !== null) {
                        var result9 = [result10, result11, result12, result13];
                      } else {
                        var result9 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
                while (result9 !== null) {
                  result8.push(result9);
                  var savedPos2 = pos;
                  var result10 = parse_COMMA(context);
                  if (result10 !== null) {
                    var result11 = parse__(context);
                    if (result11 !== null) {
                      var result12 = parse_conditionalOrExpression(context);
                      if (result12 !== null) {
                        var result13 = parse__(context);
                        if (result13 !== null) {
                          var result9 = [result10, result11, result12, result13];
                        } else {
                          var result9 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                }
                if (result8 !== null) {
                  var result5 = [result6, result7, result8];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            var result3 = result5 !== null ? result5 : '';
            if (result3 !== null) {
              var result4 = parse_CLOSE_BRACE(context);
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_constructTemplate(context) {
        var cacheKey = "constructTemplate" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_OPEN_CURLY_BRACE(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result6 = parse_constructTriples(context);
            var result3 = result6 !== null ? result6 : '';
            if (result3 !== null) {
              var result4 = parse__(context);
              if (result4 !== null) {
                var result5 = parse_CLOSE_CURLY_BRACE(context);
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_constructTriples(context) {
        var cacheKey = "constructTriples" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_triplesSameSubject(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var savedPos1 = pos;
            var result5 = parse_DOT(context);
            if (result5 !== null) {
              var result6 = parse__(context);
              if (result6 !== null) {
                var savedPos2 = pos;
                var result9 = parse_constructTriples(context);
                if (result9 !== null) {
                  var result10 = parse__(context);
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
                var result7 = result8 !== null ? result8 : '';
                if (result7 !== null) {
                  var result4 = [result5, result6, result7];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_triplesSameSubject(context) {
        var cacheKey = "triplesSameSubject" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result6 = parse_varOrTerm(context);
        if (result6 !== null) {
          var result7 = parse__(context);
          if (result7 !== null) {
            var result8 = parse_propertyListNotEmpty(context);
            if (result8 !== null) {
              var result5 = [result6, result7, result8];
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result2 = parse_triplesNode(context);
          if (result2 !== null) {
            var result3 = parse__(context);
            if (result3 !== null) {
              var result4 = parse_propertyList(context);
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_propertyListNotEmpty(context) {
        var cacheKey = "propertyListNotEmpty" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_verb(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = parse_objectList(context);
            if (result3 !== null) {
              var result4 = parse__(context);
              if (result4 !== null) {
                var result5 = [];
                var savedPos1 = pos;
                var result7 = parse_SEMICOLON(context);
                if (result7 !== null) {
                  var result8 = parse__(context);
                  if (result8 !== null) {
                    var savedPos2 = pos;
                    var result11 = parse_verb(context);
                    if (result11 !== null) {
                      var result12 = parse__(context);
                      if (result12 !== null) {
                        var result13 = parse_objectList(context);
                        if (result13 !== null) {
                          var result14 = parse__(context);
                          if (result14 !== null) {
                            var result10 = [result11, result12, result13, result14];
                          } else {
                            var result10 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result10 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result10 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result10 = null;
                      pos = savedPos2;
                    }
                    var result9 = result10 !== null ? result10 : '';
                    if (result9 !== null) {
                      var result6 = [result7, result8, result9];
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
                while (result6 !== null) {
                  result5.push(result6);
                  var savedPos1 = pos;
                  var result7 = parse_SEMICOLON(context);
                  if (result7 !== null) {
                    var result8 = parse__(context);
                    if (result8 !== null) {
                      var savedPos2 = pos;
                      var result11 = parse_verb(context);
                      if (result11 !== null) {
                        var result12 = parse__(context);
                        if (result12 !== null) {
                          var result13 = parse_objectList(context);
                          if (result13 !== null) {
                            var result14 = parse__(context);
                            if (result14 !== null) {
                              var result10 = [result11, result12, result13, result14];
                            } else {
                              var result10 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result10 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result10 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result10 = null;
                        pos = savedPos2;
                      }
                      var result9 = result10 !== null ? result10 : '';
                      if (result9 !== null) {
                        var result6 = [result7, result8, result9];
                      } else {
                        var result6 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_propertyList(context) {
        var cacheKey = "propertyList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_propertyListNotEmpty(context);
        var result0 = result1 !== null ? result1 : '';
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_objectList(context) {
        var cacheKey = "objectList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_graphNode(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = [];
            var savedPos1 = pos;
            var result5 = parse_COMMA(context);
            if (result5 !== null) {
              var result6 = parse__(context);
              if (result6 !== null) {
                var result7 = parse_graphNode(context);
                if (result7 !== null) {
                  var result8 = parse__(context);
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            while (result4 !== null) {
              result3.push(result4);
              var savedPos1 = pos;
              var result5 = parse_COMMA(context);
              if (result5 !== null) {
                var result6 = parse__(context);
                if (result6 !== null) {
                  var result7 = parse_graphNode(context);
                  if (result7 !== null) {
                    var result8 = parse__(context);
                    if (result8 !== null) {
                      var result4 = [result5, result6, result7, result8];
                    } else {
                      var result4 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_verb(context) {
        var cacheKey = "verb" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_varOrIRIref(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_A(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_triplesNode(context) {
        var cacheKey = "triplesNode" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_collection(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_blankNodePropertyList(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_blankNodePropertyList(context) {
        var cacheKey = "blankNodePropertyList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_OPEN_SQUARE_BRACE(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = parse_propertyListNotEmpty(context);
            if (result3 !== null) {
              var result4 = parse__(context);
              if (result4 !== null) {
                var result5 = parse_CLOSE_SQUARE_BRACE(context);
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_collection(context) {
        var cacheKey = "collection" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_OPEN_BRACE(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var savedPos1 = pos;
            var result6 = parse_graphNode(context);
            if (result6 !== null) {
              var result7 = parse__(context);
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result3 = [];
              while (result5 !== null) {
                result3.push(result5);
                var savedPos1 = pos;
                var result6 = parse_graphNode(context);
                if (result6 !== null) {
                  var result7 = parse__(context);
                  if (result7 !== null) {
                    var result5 = [result6, result7];
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              }
            } else {
              var result3 = null;
            }
            if (result3 !== null) {
              var result4 = parse_CLOSE_BRACE(context);
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_graphNode(context) {
        var cacheKey = "graphNode" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_varOrTerm(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_triplesNode(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_varOrTerm(context) {
        var cacheKey = "varOrTerm" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_var(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_graphTerm(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_varOrIRIref(context) {
        var cacheKey = "varOrIRIref" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_var(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_iriRef(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_var(context) {
        var cacheKey = "var" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_VAR1(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_VAR2(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_graphTerm(context) {
        var cacheKey = "graphTerm" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result9 = parse_iriRef(context);
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var result8 = parse_rdfLiteral(context);
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var result7 = parse_numericLiteral(context);
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var result6 = parse_booleanLiteral(context);
              if (result6 !== null) {
                var result0 = result6;
              } else {
                var result5 = parse_blankNode(context);
                if (result5 !== null) {
                  var result0 = result5;
                } else {
                  var savedPos0 = pos;
                  var result2 = parse_OPEN_BRACE(context);
                  if (result2 !== null) {
                    var result3 = parse__(context);
                    if (result3 !== null) {
                      var result4 = parse_CLOSE_BRACE(context);
                      if (result4 !== null) {
                        var result1 = [result2, result3, result4];
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_conditionalOrExpression(context) {
        var cacheKey = "conditionalOrExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_conditionalAndExpression(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = [];
            var savedPos1 = pos;
            var result5 = parse_OR(context);
            if (result5 !== null) {
              var result6 = parse_conditionalAndExpression(context);
              if (result6 !== null) {
                var result7 = parse__(context);
                if (result7 !== null) {
                  var result4 = [result5, result6, result7];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            while (result4 !== null) {
              result3.push(result4);
              var savedPos1 = pos;
              var result5 = parse_OR(context);
              if (result5 !== null) {
                var result6 = parse_conditionalAndExpression(context);
                if (result6 !== null) {
                  var result7 = parse__(context);
                  if (result7 !== null) {
                    var result4 = [result5, result6, result7];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_conditionalAndExpression(context) {
        var cacheKey = "conditionalAndExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_relationalExpression(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = [];
            var savedPos1 = pos;
            var result5 = parse_AND(context);
            if (result5 !== null) {
              var result6 = parse__(context);
              if (result6 !== null) {
                var result7 = parse_relationalExpression(context);
                if (result7 !== null) {
                  var result8 = parse__(context);
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            while (result4 !== null) {
              result3.push(result4);
              var savedPos1 = pos;
              var result5 = parse_AND(context);
              if (result5 !== null) {
                var result6 = parse__(context);
                if (result6 !== null) {
                  var result7 = parse_relationalExpression(context);
                  if (result7 !== null) {
                    var result8 = parse__(context);
                    if (result8 !== null) {
                      var result4 = [result5, result6, result7, result8];
                    } else {
                      var result4 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relationalExpression(context) {
        var cacheKey = "relationalExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_additiveExpression(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var savedPos6 = pos;
            var result26 = parse_EQUAL(context);
            if (result26 !== null) {
              var result27 = parse__(context);
              if (result27 !== null) {
                var result28 = parse_additiveExpression(context);
                if (result28 !== null) {
                  var result25 = [result26, result27, result28];
                } else {
                  var result25 = null;
                  pos = savedPos6;
                }
              } else {
                var result25 = null;
                pos = savedPos6;
              }
            } else {
              var result25 = null;
              pos = savedPos6;
            }
            if (result25 !== null) {
              var result4 = result25;
            } else {
              var savedPos5 = pos;
              var result22 = parse_NOT_EQUAL(context);
              if (result22 !== null) {
                var result23 = parse__(context);
                if (result23 !== null) {
                  var result24 = parse_additiveExpression(context);
                  if (result24 !== null) {
                    var result21 = [result22, result23, result24];
                  } else {
                    var result21 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result21 = null;
                  pos = savedPos5;
                }
              } else {
                var result21 = null;
                pos = savedPos5;
              }
              if (result21 !== null) {
                var result4 = result21;
              } else {
                var savedPos4 = pos;
                var result18 = parse_LESS(context);
                if (result18 !== null) {
                  var result19 = parse__(context);
                  if (result19 !== null) {
                    var result20 = parse_additiveExpression(context);
                    if (result20 !== null) {
                      var result17 = [result18, result19, result20];
                    } else {
                      var result17 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result17 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result17 = null;
                  pos = savedPos4;
                }
                if (result17 !== null) {
                  var result4 = result17;
                } else {
                  var savedPos3 = pos;
                  var result14 = parse_GREATER(context);
                  if (result14 !== null) {
                    var result15 = parse__(context);
                    if (result15 !== null) {
                      var result16 = parse_additiveExpression(context);
                      if (result16 !== null) {
                        var result13 = [result14, result15, result16];
                      } else {
                        var result13 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result13 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result13 = null;
                    pos = savedPos3;
                  }
                  if (result13 !== null) {
                    var result4 = result13;
                  } else {
                    var savedPos2 = pos;
                    var result10 = parse_LESS_EQUAL(context);
                    if (result10 !== null) {
                      var result11 = parse__(context);
                      if (result11 !== null) {
                        var result12 = parse_additiveExpression(context);
                        if (result12 !== null) {
                          var result9 = [result10, result11, result12];
                        } else {
                          var result9 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                    if (result9 !== null) {
                      var result4 = result9;
                    } else {
                      var savedPos1 = pos;
                      var result6 = parse_GREATER_EQUAL(context);
                      if (result6 !== null) {
                        var result7 = parse__(context);
                        if (result7 !== null) {
                          var result8 = parse_additiveExpression(context);
                          if (result8 !== null) {
                            var result5 = [result6, result7, result8];
                          } else {
                            var result5 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result5 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result5 = null;
                        pos = savedPos1;
                      }
                      if (result5 !== null) {
                        var result4 = result5;
                      } else {
                        var result4 = null;;
                      };
                    };
                  };
                };
              };
            }
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_additiveExpression(context) {
        var cacheKey = "additiveExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_multiplicativeExpression(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = [];
            var savedPos4 = pos;
            var result17 = parse_PLUS(context);
            if (result17 !== null) {
              var result18 = parse__(context);
              if (result18 !== null) {
                var result19 = parse_multiplicativeExpression(context);
                if (result19 !== null) {
                  var result20 = parse__(context);
                  if (result20 !== null) {
                    var result16 = [result17, result18, result19, result20];
                  } else {
                    var result16 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result16 = null;
                  pos = savedPos4;
                }
              } else {
                var result16 = null;
                pos = savedPos4;
              }
            } else {
              var result16 = null;
              pos = savedPos4;
            }
            if (result16 !== null) {
              var result4 = result16;
            } else {
              var savedPos3 = pos;
              var result12 = parse_MINUS(context);
              if (result12 !== null) {
                var result13 = parse__(context);
                if (result13 !== null) {
                  var result14 = parse_multiplicativeExpression(context);
                  if (result14 !== null) {
                    var result15 = parse__(context);
                    if (result15 !== null) {
                      var result11 = [result12, result13, result14, result15];
                    } else {
                      var result11 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result11 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
              if (result11 !== null) {
                var result4 = result11;
              } else {
                var savedPos2 = pos;
                var result9 = parse_numericLiteralPositive(context);
                if (result9 !== null) {
                  var result10 = parse__(context);
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
                if (result8 !== null) {
                  var result4 = result8;
                } else {
                  var savedPos1 = pos;
                  var result6 = parse_numericLiteralNegative(context);
                  if (result6 !== null) {
                    var result7 = parse__(context);
                    if (result7 !== null) {
                      var result5 = [result6, result7];
                    } else {
                      var result5 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                  if (result5 !== null) {
                    var result4 = result5;
                  } else {
                    var result4 = null;;
                  };
                };
              };
            }
            while (result4 !== null) {
              result3.push(result4);
              var savedPos4 = pos;
              var result17 = parse_PLUS(context);
              if (result17 !== null) {
                var result18 = parse__(context);
                if (result18 !== null) {
                  var result19 = parse_multiplicativeExpression(context);
                  if (result19 !== null) {
                    var result20 = parse__(context);
                    if (result20 !== null) {
                      var result16 = [result17, result18, result19, result20];
                    } else {
                      var result16 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result16 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result16 = null;
                  pos = savedPos4;
                }
              } else {
                var result16 = null;
                pos = savedPos4;
              }
              if (result16 !== null) {
                var result4 = result16;
              } else {
                var savedPos3 = pos;
                var result12 = parse_MINUS(context);
                if (result12 !== null) {
                  var result13 = parse__(context);
                  if (result13 !== null) {
                    var result14 = parse_multiplicativeExpression(context);
                    if (result14 !== null) {
                      var result15 = parse__(context);
                      if (result15 !== null) {
                        var result11 = [result12, result13, result14, result15];
                      } else {
                        var result11 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result11 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result11 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
                if (result11 !== null) {
                  var result4 = result11;
                } else {
                  var savedPos2 = pos;
                  var result9 = parse_numericLiteralPositive(context);
                  if (result9 !== null) {
                    var result10 = parse__(context);
                    if (result10 !== null) {
                      var result8 = [result9, result10];
                    } else {
                      var result8 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                  if (result8 !== null) {
                    var result4 = result8;
                  } else {
                    var savedPos1 = pos;
                    var result6 = parse_numericLiteralNegative(context);
                    if (result6 !== null) {
                      var result7 = parse__(context);
                      if (result7 !== null) {
                        var result5 = [result6, result7];
                      } else {
                        var result5 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result5 = null;
                      pos = savedPos1;
                    }
                    if (result5 !== null) {
                      var result4 = result5;
                    } else {
                      var result4 = null;;
                    };
                  };
                };
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_multiplicativeExpression(context) {
        var cacheKey = "multiplicativeExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_unaryExpression(context);
        if (result1 !== null) {
          var result2 = parse__(context);
          if (result2 !== null) {
            var result3 = [];
            var savedPos2 = pos;
            var result11 = parse_ASTERISK(context);
            if (result11 !== null) {
              var result12 = parse__(context);
              if (result12 !== null) {
                var result13 = parse_unaryExpression(context);
                if (result13 !== null) {
                  var result14 = parse__(context);
                  if (result14 !== null) {
                    var result10 = [result11, result12, result13, result14];
                  } else {
                    var result10 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos2;
                }
              } else {
                var result10 = null;
                pos = savedPos2;
              }
            } else {
              var result10 = null;
              pos = savedPos2;
            }
            if (result10 !== null) {
              var result4 = result10;
            } else {
              var savedPos1 = pos;
              var result6 = parse_DIVIDE(context);
              if (result6 !== null) {
                var result7 = parse__(context);
                if (result7 !== null) {
                  var result8 = parse_unaryExpression(context);
                  if (result8 !== null) {
                    var result9 = parse__(context);
                    if (result9 !== null) {
                      var result5 = [result6, result7, result8, result9];
                    } else {
                      var result5 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
            while (result4 !== null) {
              result3.push(result4);
              var savedPos2 = pos;
              var result11 = parse_ASTERISK(context);
              if (result11 !== null) {
                var result12 = parse__(context);
                if (result12 !== null) {
                  var result13 = parse_unaryExpression(context);
                  if (result13 !== null) {
                    var result14 = parse__(context);
                    if (result14 !== null) {
                      var result10 = [result11, result12, result13, result14];
                    } else {
                      var result10 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos2;
                }
              } else {
                var result10 = null;
                pos = savedPos2;
              }
              if (result10 !== null) {
                var result4 = result10;
              } else {
                var savedPos1 = pos;
                var result6 = parse_DIVIDE(context);
                if (result6 !== null) {
                  var result7 = parse__(context);
                  if (result7 !== null) {
                    var result8 = parse_unaryExpression(context);
                    if (result8 !== null) {
                      var result9 = parse__(context);
                      if (result9 !== null) {
                        var result5 = [result6, result7, result8, result9];
                      } else {
                        var result5 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result5 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
                if (result5 !== null) {
                  var result4 = result5;
                } else {
                  var result4 = null;;
                };
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unaryExpression(context) {
        var cacheKey = "unaryExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result9 = parse_NOT(context);
        if (result9 !== null) {
          var result10 = parse_primaryExpression(context);
          if (result10 !== null) {
            var result8 = [result9, result10];
          } else {
            var result8 = null;
            pos = savedPos2;
          }
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos1 = pos;
          var result6 = parse_PLUS(context);
          if (result6 !== null) {
            var result7 = parse_primaryExpression(context);
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var savedPos0 = pos;
            var result3 = parse_MINUS(context);
            if (result3 !== null) {
              var result4 = parse_primaryExpression(context);
              if (result4 !== null) {
                var result2 = [result3, result4];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_primaryExpression(context);
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_primaryExpression(context) {
        var cacheKey = "primaryExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result7 = parse_brackettedExpression(context);
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var result6 = parse_builtInCall(context);
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var result5 = parse_iriRefOrFunction(context);
            if (result5 !== null) {
              var result0 = result5;
            } else {
              var result4 = parse_rdfLiteral(context);
              if (result4 !== null) {
                var result0 = result4;
              } else {
                var result3 = parse_numericLiteral(context);
                if (result3 !== null) {
                  var result0 = result3;
                } else {
                  var result2 = parse_booleanLiteral(context);
                  if (result2 !== null) {
                    var result0 = result2;
                  } else {
                    var result1 = parse_var(context);
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_brackettedExpression(context) {
        var cacheKey = "brackettedExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_OPEN_BRACE(context);
        if (result1 !== null) {
          var result2 = parse_conditionalOrExpression(context);
          if (result2 !== null) {
            var result3 = parse_CLOSE_BRACE(context);
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_builtInCall(context) {
        var cacheKey = "builtInCall" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos9 = pos;
        var result74 = parse_STR(context);
        if (result74 !== null) {
          var result75 = parse_OPEN_BRACE(context);
          if (result75 !== null) {
            var result76 = parse__(context);
            if (result76 !== null) {
              var result77 = parse_conditionalOrExpression(context);
              if (result77 !== null) {
                var result78 = parse__(context);
                if (result78 !== null) {
                  var result79 = parse_CLOSE_BRACE(context);
                  if (result79 !== null) {
                    var result73 = [result74, result75, result76, result77, result78, result79];
                  } else {
                    var result73 = null;
                    pos = savedPos9;
                  }
                } else {
                  var result73 = null;
                  pos = savedPos9;
                }
              } else {
                var result73 = null;
                pos = savedPos9;
              }
            } else {
              var result73 = null;
              pos = savedPos9;
            }
          } else {
            var result73 = null;
            pos = savedPos9;
          }
        } else {
          var result73 = null;
          pos = savedPos9;
        }
        if (result73 !== null) {
          var result0 = result73;
        } else {
          var savedPos8 = pos;
          var result67 = parse_LANG(context);
          if (result67 !== null) {
            var result68 = parse_OPEN_BRACE(context);
            if (result68 !== null) {
              var result69 = parse__(context);
              if (result69 !== null) {
                var result70 = parse_conditionalOrExpression(context);
                if (result70 !== null) {
                  var result71 = parse__(context);
                  if (result71 !== null) {
                    var result72 = parse_CLOSE_BRACE(context);
                    if (result72 !== null) {
                      var result66 = [result67, result68, result69, result70, result71, result72];
                    } else {
                      var result66 = null;
                      pos = savedPos8;
                    }
                  } else {
                    var result66 = null;
                    pos = savedPos8;
                  }
                } else {
                  var result66 = null;
                  pos = savedPos8;
                }
              } else {
                var result66 = null;
                pos = savedPos8;
              }
            } else {
              var result66 = null;
              pos = savedPos8;
            }
          } else {
            var result66 = null;
            pos = savedPos8;
          }
          if (result66 !== null) {
            var result0 = result66;
          } else {
            var savedPos7 = pos;
            var result56 = parse_LANGMATCHES(context);
            if (result56 !== null) {
              var result57 = parse_OPEN_BRACE(context);
              if (result57 !== null) {
                var result58 = parse__(context);
                if (result58 !== null) {
                  var result59 = parse_conditionalOrExpression(context);
                  if (result59 !== null) {
                    var result60 = parse__(context);
                    if (result60 !== null) {
                      var result61 = parse_COMMA(context);
                      if (result61 !== null) {
                        var result62 = parse__(context);
                        if (result62 !== null) {
                          var result63 = parse_conditionalOrExpression(context);
                          if (result63 !== null) {
                            var result64 = parse__(context);
                            if (result64 !== null) {
                              var result65 = parse_CLOSE_BRACE(context);
                              if (result65 !== null) {
                                var result55 = [result56, result57, result58, result59, result60, result61, result62, result63, result64, result65];
                              } else {
                                var result55 = null;
                                pos = savedPos7;
                              }
                            } else {
                              var result55 = null;
                              pos = savedPos7;
                            }
                          } else {
                            var result55 = null;
                            pos = savedPos7;
                          }
                        } else {
                          var result55 = null;
                          pos = savedPos7;
                        }
                      } else {
                        var result55 = null;
                        pos = savedPos7;
                      }
                    } else {
                      var result55 = null;
                      pos = savedPos7;
                    }
                  } else {
                    var result55 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result55 = null;
                  pos = savedPos7;
                }
              } else {
                var result55 = null;
                pos = savedPos7;
              }
            } else {
              var result55 = null;
              pos = savedPos7;
            }
            if (result55 !== null) {
              var result0 = result55;
            } else {
              var savedPos6 = pos;
              var result49 = parse_DATATYPE(context);
              if (result49 !== null) {
                var result50 = parse_OPEN_BRACE(context);
                if (result50 !== null) {
                  var result51 = parse__(context);
                  if (result51 !== null) {
                    var result52 = parse_conditionalOrExpression(context);
                    if (result52 !== null) {
                      var result53 = parse__(context);
                      if (result53 !== null) {
                        var result54 = parse_CLOSE_BRACE(context);
                        if (result54 !== null) {
                          var result48 = [result49, result50, result51, result52, result53, result54];
                        } else {
                          var result48 = null;
                          pos = savedPos6;
                        }
                      } else {
                        var result48 = null;
                        pos = savedPos6;
                      }
                    } else {
                      var result48 = null;
                      pos = savedPos6;
                    }
                  } else {
                    var result48 = null;
                    pos = savedPos6;
                  }
                } else {
                  var result48 = null;
                  pos = savedPos6;
                }
              } else {
                var result48 = null;
                pos = savedPos6;
              }
              if (result48 !== null) {
                var result0 = result48;
              } else {
                var savedPos5 = pos;
                var result42 = parse_BOUND(context);
                if (result42 !== null) {
                  var result43 = parse_OPEN_BRACE(context);
                  if (result43 !== null) {
                    var result44 = parse__(context);
                    if (result44 !== null) {
                      var result45 = parse_var(context);
                      if (result45 !== null) {
                        var result46 = parse__(context);
                        if (result46 !== null) {
                          var result47 = parse_CLOSE_BRACE(context);
                          if (result47 !== null) {
                            var result41 = [result42, result43, result44, result45, result46, result47];
                          } else {
                            var result41 = null;
                            pos = savedPos5;
                          }
                        } else {
                          var result41 = null;
                          pos = savedPos5;
                        }
                      } else {
                        var result41 = null;
                        pos = savedPos5;
                      }
                    } else {
                      var result41 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result41 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result41 = null;
                  pos = savedPos5;
                }
                if (result41 !== null) {
                  var result0 = result41;
                } else {
                  var savedPos4 = pos;
                  var result31 = parse_SAMETERM(context);
                  if (result31 !== null) {
                    var result32 = parse_OPEN_BRACE(context);
                    if (result32 !== null) {
                      var result33 = parse__(context);
                      if (result33 !== null) {
                        var result34 = parse_conditionalOrExpression(context);
                        if (result34 !== null) {
                          var result35 = parse__(context);
                          if (result35 !== null) {
                            var result36 = parse_COMMA(context);
                            if (result36 !== null) {
                              var result37 = parse__(context);
                              if (result37 !== null) {
                                var result38 = parse_conditionalOrExpression(context);
                                if (result38 !== null) {
                                  var result39 = parse__(context);
                                  if (result39 !== null) {
                                    var result40 = parse_CLOSE_BRACE(context);
                                    if (result40 !== null) {
                                      var result30 = [result31, result32, result33, result34, result35, result36, result37, result38, result39, result40];
                                    } else {
                                      var result30 = null;
                                      pos = savedPos4;
                                    }
                                  } else {
                                    var result30 = null;
                                    pos = savedPos4;
                                  }
                                } else {
                                  var result30 = null;
                                  pos = savedPos4;
                                }
                              } else {
                                var result30 = null;
                                pos = savedPos4;
                              }
                            } else {
                              var result30 = null;
                              pos = savedPos4;
                            }
                          } else {
                            var result30 = null;
                            pos = savedPos4;
                          }
                        } else {
                          var result30 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result30 = null;
                        pos = savedPos4;
                      }
                    } else {
                      var result30 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result30 = null;
                    pos = savedPos4;
                  }
                  if (result30 !== null) {
                    var result0 = result30;
                  } else {
                    var savedPos3 = pos;
                    var result24 = parse_ISIRI(context);
                    if (result24 !== null) {
                      var result25 = parse_OPEN_BRACE(context);
                      if (result25 !== null) {
                        var result26 = parse__(context);
                        if (result26 !== null) {
                          var result27 = parse_conditionalOrExpression(context);
                          if (result27 !== null) {
                            var result28 = parse__(context);
                            if (result28 !== null) {
                              var result29 = parse_CLOSE_BRACE(context);
                              if (result29 !== null) {
                                var result23 = [result24, result25, result26, result27, result28, result29];
                              } else {
                                var result23 = null;
                                pos = savedPos3;
                              }
                            } else {
                              var result23 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result23 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result23 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result23 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result23 = null;
                      pos = savedPos3;
                    }
                    if (result23 !== null) {
                      var result0 = result23;
                    } else {
                      var savedPos2 = pos;
                      var result17 = parse_ISURI(context);
                      if (result17 !== null) {
                        var result18 = parse_OPEN_BRACE(context);
                        if (result18 !== null) {
                          var result19 = parse__(context);
                          if (result19 !== null) {
                            var result20 = parse_conditionalOrExpression(context);
                            if (result20 !== null) {
                              var result21 = parse__(context);
                              if (result21 !== null) {
                                var result22 = parse_CLOSE_BRACE(context);
                                if (result22 !== null) {
                                  var result16 = [result17, result18, result19, result20, result21, result22];
                                } else {
                                  var result16 = null;
                                  pos = savedPos2;
                                }
                              } else {
                                var result16 = null;
                                pos = savedPos2;
                              }
                            } else {
                              var result16 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result16 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result16 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result16 = null;
                        pos = savedPos2;
                      }
                      if (result16 !== null) {
                        var result0 = result16;
                      } else {
                        var savedPos1 = pos;
                        var result10 = parse_ISBLANK(context);
                        if (result10 !== null) {
                          var result11 = parse_OPEN_BRACE(context);
                          if (result11 !== null) {
                            var result12 = parse__(context);
                            if (result12 !== null) {
                              var result13 = parse_conditionalOrExpression(context);
                              if (result13 !== null) {
                                var result14 = parse__(context);
                                if (result14 !== null) {
                                  var result15 = parse_CLOSE_BRACE(context);
                                  if (result15 !== null) {
                                    var result9 = [result10, result11, result12, result13, result14, result15];
                                  } else {
                                    var result9 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result9 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result9 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result9 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result9 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result9 = null;
                          pos = savedPos1;
                        }
                        if (result9 !== null) {
                          var result0 = result9;
                        } else {
                          var savedPos0 = pos;
                          var result3 = parse_ISLITERAL(context);
                          if (result3 !== null) {
                            var result4 = parse_OPEN_BRACE(context);
                            if (result4 !== null) {
                              var result5 = parse__(context);
                              if (result5 !== null) {
                                var result6 = parse_conditionalOrExpression(context);
                                if (result6 !== null) {
                                  var result7 = parse__(context);
                                  if (result7 !== null) {
                                    var result8 = parse_CLOSE_BRACE(context);
                                    if (result8 !== null) {
                                      var result2 = [result3, result4, result5, result6, result7, result8];
                                    } else {
                                      var result2 = null;
                                      pos = savedPos0;
                                    }
                                  } else {
                                    var result2 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result2 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result2 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result2 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result2 = null;
                            pos = savedPos0;
                          }
                          if (result2 !== null) {
                            var result0 = result2;
                          } else {
                            var result1 = parse_regexExpression(context);
                            if (result1 !== null) {
                              var result0 = result1;
                            } else {
                              var result0 = null;;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_regexExpression(context) {
        var cacheKey = "regexExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_REGEX(context);
        if (result1 !== null) {
          var result2 = parse_OPEN_BRACE(context);
          if (result2 !== null) {
            var result3 = parse__(context);
            if (result3 !== null) {
              var result4 = parse_conditionalOrExpression(context);
              if (result4 !== null) {
                var result5 = parse__(context);
                if (result5 !== null) {
                  var result6 = parse_COMMA(context);
                  if (result6 !== null) {
                    var result7 = parse__(context);
                    if (result7 !== null) {
                      var result8 = parse_conditionalOrExpression(context);
                      if (result8 !== null) {
                        var result9 = parse__(context);
                        if (result9 !== null) {
                          var savedPos1 = pos;
                          var result14 = parse_COMMA(context);
                          if (result14 !== null) {
                            var result15 = parse__(context);
                            if (result15 !== null) {
                              var result16 = parse_conditionalOrExpression(context);
                              if (result16 !== null) {
                                var result13 = [result14, result15, result16];
                              } else {
                                var result13 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result13 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result13 = null;
                            pos = savedPos1;
                          }
                          var result10 = result13 !== null ? result13 : '';
                          if (result10 !== null) {
                            var result11 = parse__(context);
                            if (result11 !== null) {
                              var result12 = parse_CLOSE_BRACE(context);
                              if (result12 !== null) {
                                var result0 = [result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                              } else {
                                var result0 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result0 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result0 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result0 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result0 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_iriRefOrFunction(context) {
        var cacheKey = "iriRefOrFunction" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_iriRef(context);
        if (result1 !== null) {
          var result3 = parse_argList(context);
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_rdfLiteral(context) {
        var cacheKey = "rdfLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_string(context);
        if (result1 !== null) {
          var result7 = parse_LANGTAG(context);
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var savedPos1 = pos;
            var result5 = parse_REFERENCE(context);
            if (result5 !== null) {
              var result6 = parse_iriRef(context);
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          }
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_numericLiteral(context) {
        var cacheKey = "numericLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_numericLiteralUnsigned(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_numericLiteralPositive(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_numericLiteralNegative(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_numericLiteralUnsigned(context) {
        var cacheKey = "numericLiteralUnsigned" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_DOUBLE(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_numericLiteralPositive(context) {
        var cacheKey = "numericLiteralPositive" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_DOUBLE_POSITIVE(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL_POSITIVE(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER_POSITIVE(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_numericLiteralNegative(context) {
        var cacheKey = "numericLiteralNegative" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_DOUBLE_NEGATIVE(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL_NEGATIVE(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER_NEGATIVE(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_booleanLiteral(context) {
        var cacheKey = "booleanLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_TRUE(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_FALSE(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string(context) {
        var cacheKey = "string" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_STRING_LITERAL_LONG1(context);
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_STRING_LITERAL_LONG2(context);
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_STRING_LITERAL1(context);
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_STRING_LITERAL2(context);
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_iriRef(context) {
        var cacheKey = "iriRef" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_IRI_REF(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_prefixedName(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prefixedName(context) {
        var cacheKey = "prefixedName" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_PNAME_LN(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_PNAME_NS(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_blankNode(context) {
        var cacheKey = "blankNode" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result5 = parse_BLANK_NODE_LABEL(context);
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result2 = parse_OPEN_SQUARE_BRACE(context);
          if (result2 !== null) {
            var result3 = parse__(context);
            if (result3 !== null) {
              var result4 = parse_CLOSE_SQUARE_BRACE(context);
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__(context) {
        var cacheKey = "_" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result1 = parse_WS(context);
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_WS(context);
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WS(context) {
        var cacheKey = "WS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === " ") {
          var result4 = " ";
          pos += 1;
        } else {
          var result4 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(" "));
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 1) === "	") {
            var result3 = "	";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("	"));
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_EOL(context);
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_COMMENT(context);
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PNAME_NS(context) {
        var cacheKey = "PNAME_NS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_PN_PREFIX(context);
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result2 = ":";
            pos += 1;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(":"));
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PNAME_LN(context) {
        var cacheKey = "PNAME_LN" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_PNAME_NS(context);
        if (result1 !== null) {
          var result2 = parse_PN_LOCAL(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BASE(context) {
        var cacheKey = "BASE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Bb]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Bb]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Aa]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Aa]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Ss]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Ss]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Ee]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ee]");
                }
              }
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PREFIX(context) {
        var cacheKey = "PREFIX" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Pp]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Pp]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Rr]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Rr]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Ee]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Ee]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Ff]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ff]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Ii]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Ii]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Xx]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Xx]");
                    }
                  }
                  if (result6 !== null) {
                    var result0 = [result1, result2, result3, result4, result5, result6];
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SELECT(context) {
        var cacheKey = "SELECT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ss]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ss]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ee]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ee]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Ll]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Ll]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Ee]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ee]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Cc]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Cc]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Tt]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Tt]");
                    }
                  }
                  if (result6 !== null) {
                    var result0 = [result1, result2, result3, result4, result5, result6];
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DISTINCT(context) {
        var cacheKey = "DISTINCT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Dd]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Dd]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ii]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ii]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Ss]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Ss]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Tt]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Tt]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Ii]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Ii]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Nn]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Nn]");
                    }
                  }
                  if (result6 !== null) {
                    if (input.substr(pos).match(/^[Cc]/) !== null) {
                      var result7 = input.charAt(pos);
                      pos++;
                    } else {
                      var result7 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[Cc]");
                      }
                    }
                    if (result7 !== null) {
                      if (input.substr(pos).match(/^[Tt]/) !== null) {
                        var result8 = input.charAt(pos);
                        pos++;
                      } else {
                        var result8 = null;
                        if (context.reportMatchFailures) {
                          matchFailed("[Tt]");
                        }
                      }
                      if (result8 !== null) {
                        var result0 = [result1, result2, result3, result4, result5, result6, result7, result8];
                      } else {
                        var result0 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_REDUCED(context) {
        var cacheKey = "REDUCED" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Rr]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Rr]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ee]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ee]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Dd]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Dd]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Uu]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Uu]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Cc]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Cc]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Ee]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Ee]");
                    }
                  }
                  if (result6 !== null) {
                    if (input.substr(pos).match(/^[Dd]/) !== null) {
                      var result7 = input.charAt(pos);
                      pos++;
                    } else {
                      var result7 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[Dd]");
                      }
                    }
                    if (result7 !== null) {
                      var result0 = [result1, result2, result3, result4, result5, result6, result7];
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CONSTRUCT(context) {
        var cacheKey = "CONSTRUCT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Cc]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Cc]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Oo]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Oo]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Nn]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Nn]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Ss]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ss]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Tt]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Tt]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Rr]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Rr]");
                    }
                  }
                  if (result6 !== null) {
                    if (input.substr(pos).match(/^[Uu]/) !== null) {
                      var result7 = input.charAt(pos);
                      pos++;
                    } else {
                      var result7 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[Uu]");
                      }
                    }
                    if (result7 !== null) {
                      if (input.substr(pos).match(/^[Cc]/) !== null) {
                        var result8 = input.charAt(pos);
                        pos++;
                      } else {
                        var result8 = null;
                        if (context.reportMatchFailures) {
                          matchFailed("[Cc]");
                        }
                      }
                      if (result8 !== null) {
                        if (input.substr(pos).match(/^[Tt]/) !== null) {
                          var result9 = input.charAt(pos);
                          pos++;
                        } else {
                          var result9 = null;
                          if (context.reportMatchFailures) {
                            matchFailed("[Tt]");
                          }
                        }
                        if (result9 !== null) {
                          var result0 = [result1, result2, result3, result4, result5, result6, result7, result8, result9];
                        } else {
                          var result0 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result0 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DESCRIBE(context) {
        var cacheKey = "DESCRIBE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Dd]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Dd]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ee]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ee]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Ss]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Ss]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Cc]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Cc]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Rr]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Rr]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Ii]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Ii]");
                    }
                  }
                  if (result6 !== null) {
                    if (input.substr(pos).match(/^[Bb]/) !== null) {
                      var result7 = input.charAt(pos);
                      pos++;
                    } else {
                      var result7 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[Bb]");
                      }
                    }
                    if (result7 !== null) {
                      if (input.substr(pos).match(/^[Ee]/) !== null) {
                        var result8 = input.charAt(pos);
                        pos++;
                      } else {
                        var result8 = null;
                        if (context.reportMatchFailures) {
                          matchFailed("[Ee]");
                        }
                      }
                      if (result8 !== null) {
                        var result0 = [result1, result2, result3, result4, result5, result6, result7, result8];
                      } else {
                        var result0 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ASK(context) {
        var cacheKey = "ASK" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Aa]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Aa]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ss]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ss]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Kk]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Kk]");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FROM(context) {
        var cacheKey = "FROM" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ff]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ff]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Rr]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Rr]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Oo]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Oo]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Mm]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Mm]");
                }
              }
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NAMED(context) {
        var cacheKey = "NAMED" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Nn]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Nn]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Aa]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Aa]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Mm]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Mm]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Ee]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ee]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Dd]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Dd]");
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WHERE(context) {
        var cacheKey = "WHERE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ww]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ww]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Hh]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Hh]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Ee]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Ee]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Rr]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Rr]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Ee]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Ee]");
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ORDER(context) {
        var cacheKey = "ORDER" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Oo]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Oo]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Rr]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Rr]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Dd]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Dd]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Ee]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ee]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Rr]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Rr]");
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BY(context) {
        var cacheKey = "BY" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Bb]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Bb]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Yy]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Yy]");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ASC(context) {
        var cacheKey = "ASC" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Aa]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Aa]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ss]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ss]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Cc]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Cc]");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DESC(context) {
        var cacheKey = "DESC" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Dd]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Dd]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ee]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ee]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Ss]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Ss]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Cc]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Cc]");
                }
              }
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LIMIT(context) {
        var cacheKey = "LIMIT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ll]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ll]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ii]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ii]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Mm]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Mm]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Ii]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ii]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Tt]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Tt]");
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OFFSET(context) {
        var cacheKey = "OFFSET" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Oo]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Oo]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ff]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ff]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Ff]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Ff]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Ss]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ss]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Ee]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Ee]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Tt]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Tt]");
                    }
                  }
                  if (result6 !== null) {
                    var result0 = [result1, result2, result3, result4, result5, result6];
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OPTIONAL(context) {
        var cacheKey = "OPTIONAL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Oo]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Oo]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Pp]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Pp]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Tt]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Tt]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Ii]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ii]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Oo]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Oo]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Nn]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Nn]");
                    }
                  }
                  if (result6 !== null) {
                    if (input.substr(pos).match(/^[Aa]/) !== null) {
                      var result7 = input.charAt(pos);
                      pos++;
                    } else {
                      var result7 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[Aa]");
                      }
                    }
                    if (result7 !== null) {
                      if (input.substr(pos).match(/^[Ll]/) !== null) {
                        var result8 = input.charAt(pos);
                        pos++;
                      } else {
                        var result8 = null;
                        if (context.reportMatchFailures) {
                          matchFailed("[Ll]");
                        }
                      }
                      if (result8 !== null) {
                        var result0 = [result1, result2, result3, result4, result5, result6, result7, result8];
                      } else {
                        var result0 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GRAPH(context) {
        var cacheKey = "GRAPH" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Gg]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Gg]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Rr]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Rr]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Aa]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Aa]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Pp]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Pp]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Hh]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Hh]");
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UNION(context) {
        var cacheKey = "UNION" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Uu]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Uu]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Nn]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Nn]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Ii]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Ii]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Oo]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Oo]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Nn]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Nn]");
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FILTER(context) {
        var cacheKey = "FILTER" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ff]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ff]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ii]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ii]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Ll]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Ll]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Tt]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Tt]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Ee]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Ee]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Rr]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Rr]");
                    }
                  }
                  if (result6 !== null) {
                    var result0 = [result1, result2, result3, result4, result5, result6];
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_A(context) {
        var cacheKey = "A" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        if (input.substr(pos, 1) === "a") {
          var result0 = "a";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("a"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STR(context) {
        var cacheKey = "STR" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ss]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ss]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Tt]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Tt]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Rr]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Rr]");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LANG(context) {
        var cacheKey = "LANG" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ll]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ll]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Aa]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Aa]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Nn]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Nn]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Gg]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Gg]");
                }
              }
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LANGMATCHES(context) {
        var cacheKey = "LANGMATCHES" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ll]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ll]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Aa]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Aa]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Nn]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Nn]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Gg]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Gg]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Mm]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Mm]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Aa]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Aa]");
                    }
                  }
                  if (result6 !== null) {
                    if (input.substr(pos).match(/^[Tt]/) !== null) {
                      var result7 = input.charAt(pos);
                      pos++;
                    } else {
                      var result7 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[Tt]");
                      }
                    }
                    if (result7 !== null) {
                      if (input.substr(pos).match(/^[Cc]/) !== null) {
                        var result8 = input.charAt(pos);
                        pos++;
                      } else {
                        var result8 = null;
                        if (context.reportMatchFailures) {
                          matchFailed("[Cc]");
                        }
                      }
                      if (result8 !== null) {
                        if (input.substr(pos).match(/^[Hh]/) !== null) {
                          var result9 = input.charAt(pos);
                          pos++;
                        } else {
                          var result9 = null;
                          if (context.reportMatchFailures) {
                            matchFailed("[Hh]");
                          }
                        }
                        if (result9 !== null) {
                          if (input.substr(pos).match(/^[Ee]/) !== null) {
                            var result10 = input.charAt(pos);
                            pos++;
                          } else {
                            var result10 = null;
                            if (context.reportMatchFailures) {
                              matchFailed("[Ee]");
                            }
                          }
                          if (result10 !== null) {
                            if (input.substr(pos).match(/^[Ss]/) !== null) {
                              var result11 = input.charAt(pos);
                              pos++;
                            } else {
                              var result11 = null;
                              if (context.reportMatchFailures) {
                                matchFailed("[Ss]");
                              }
                            }
                            if (result11 !== null) {
                              var result0 = [result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                            } else {
                              var result0 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result0 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result0 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result0 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DATATYPE(context) {
        var cacheKey = "DATATYPE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Dd]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Dd]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Aa]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Aa]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Tt]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Tt]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Aa]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Aa]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Tt]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Tt]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Yy]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Yy]");
                    }
                  }
                  if (result6 !== null) {
                    if (input.substr(pos).match(/^[Pp]/) !== null) {
                      var result7 = input.charAt(pos);
                      pos++;
                    } else {
                      var result7 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[Pp]");
                      }
                    }
                    if (result7 !== null) {
                      if (input.substr(pos).match(/^[Ee]/) !== null) {
                        var result8 = input.charAt(pos);
                        pos++;
                      } else {
                        var result8 = null;
                        if (context.reportMatchFailures) {
                          matchFailed("[Ee]");
                        }
                      }
                      if (result8 !== null) {
                        var result0 = [result1, result2, result3, result4, result5, result6, result7, result8];
                      } else {
                        var result0 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BOUND(context) {
        var cacheKey = "BOUND" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Bb]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Bb]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Oo]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Oo]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Uu]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Uu]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Nn]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Nn]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Dd]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Dd]");
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SAMETERM(context) {
        var cacheKey = "SAMETERM" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ss]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ss]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Aa]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Aa]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Mm]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Mm]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Ee]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ee]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Tt]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Tt]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Ee]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Ee]");
                    }
                  }
                  if (result6 !== null) {
                    if (input.substr(pos).match(/^[Rr]/) !== null) {
                      var result7 = input.charAt(pos);
                      pos++;
                    } else {
                      var result7 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[Rr]");
                      }
                    }
                    if (result7 !== null) {
                      if (input.substr(pos).match(/^[Mm]/) !== null) {
                        var result8 = input.charAt(pos);
                        pos++;
                      } else {
                        var result8 = null;
                        if (context.reportMatchFailures) {
                          matchFailed("[Mm]");
                        }
                      }
                      if (result8 !== null) {
                        var result0 = [result1, result2, result3, result4, result5, result6, result7, result8];
                      } else {
                        var result0 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ISIRI(context) {
        var cacheKey = "ISIRI" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ii]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ii]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ss]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ss]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Ii]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Ii]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Rr]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Rr]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Ii]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Ii]");
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ISURI(context) {
        var cacheKey = "ISURI" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ii]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ii]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ss]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ss]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Uu]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Uu]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Rr]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Rr]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Ii]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Ii]");
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ISBLANK(context) {
        var cacheKey = "ISBLANK" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ii]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ii]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ss]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ss]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Bb]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Bb]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Ll]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ll]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Aa]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Aa]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Nn]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Nn]");
                    }
                  }
                  if (result6 !== null) {
                    if (input.substr(pos).match(/^[Kk]/) !== null) {
                      var result7 = input.charAt(pos);
                      pos++;
                    } else {
                      var result7 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[Kk]");
                      }
                    }
                    if (result7 !== null) {
                      var result0 = [result1, result2, result3, result4, result5, result6, result7];
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ISLITERAL(context) {
        var cacheKey = "ISLITERAL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ii]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ii]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ss]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ss]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Ll]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Ll]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Ii]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ii]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Tt]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Tt]");
                  }
                }
                if (result5 !== null) {
                  if (input.substr(pos).match(/^[Ee]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[Ee]");
                    }
                  }
                  if (result6 !== null) {
                    if (input.substr(pos).match(/^[Rr]/) !== null) {
                      var result7 = input.charAt(pos);
                      pos++;
                    } else {
                      var result7 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[Rr]");
                      }
                    }
                    if (result7 !== null) {
                      if (input.substr(pos).match(/^[Aa]/) !== null) {
                        var result8 = input.charAt(pos);
                        pos++;
                      } else {
                        var result8 = null;
                        if (context.reportMatchFailures) {
                          matchFailed("[Aa]");
                        }
                      }
                      if (result8 !== null) {
                        if (input.substr(pos).match(/^[Ll]/) !== null) {
                          var result9 = input.charAt(pos);
                          pos++;
                        } else {
                          var result9 = null;
                          if (context.reportMatchFailures) {
                            matchFailed("[Ll]");
                          }
                        }
                        if (result9 !== null) {
                          var result0 = [result1, result2, result3, result4, result5, result6, result7, result8, result9];
                        } else {
                          var result0 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result0 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_REGEX(context) {
        var cacheKey = "REGEX" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Rr]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Rr]");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[Ee]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Ee]");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[Gg]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Gg]");
              }
            }
            if (result3 !== null) {
              if (input.substr(pos).match(/^[Ee]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ee]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[Xx]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Xx]");
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TRUE(context) {
        var cacheKey = "TRUE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Tt]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Tt]");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[Rr]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Rr]");
            }
          }
          if (result3 !== null) {
            if (input.substr(pos).match(/^[Uu]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Uu]");
              }
            }
            if (result4 !== null) {
              if (input.substr(pos).match(/^[Ee]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ee]");
                }
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {return "true"})()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FALSE(context) {
        var cacheKey = "FALSE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ff]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[Ff]");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[Aa]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Aa]");
            }
          }
          if (result3 !== null) {
            if (input.substr(pos).match(/^[Ll]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed("[Ll]");
              }
            }
            if (result4 !== null) {
              if (input.substr(pos).match(/^[Ss]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[Ss]");
                }
              }
              if (result5 !== null) {
                if (input.substr(pos).match(/^[Ee]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[Ee]");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {return "false";})()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IRI_REF(context) {
        var cacheKey = "IRI_REF" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_LESS(context);
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^<>"'|{}^\\\0- ]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^<>\"'|{}^\\\\\\0- ]");
            }
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^<>"'|{}^\\\0- ]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^<>\"'|{}^\\\\\\0- ]");
              }
            }
          }
          if (result3 !== null) {
            var result4 = parse_GREATER(context);
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(uri) {return uri.join();})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BLANK_NODE_LABEL(context) {
        var cacheKey = "BLANK_NODE_LABEL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "_:") {
          var result1 = "_:";
          pos += 2;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("_:"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_PN_LOCAL(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VAR1(context) {
        var cacheKey = "VAR1" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "?") {
          var result1 = "?";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("?"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_VARNAME(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VAR2(context) {
        var cacheKey = "VAR2" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "$") {
          var result1 = "$";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("$"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_VARNAME(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LANGTAG(context) {
        var cacheKey = "LANGTAG" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "@") {
          var result1 = "@";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("@"));
          }
        }
        if (result1 !== null) {
          var result10 = parse_PN_CHARS_BASE(context);
          if (result10 !== null) {
            var result2 = [];
            while (result10 !== null) {
              result2.push(result10);
              var result10 = parse_PN_CHARS_BASE(context);
            }
          } else {
            var result2 = null;
          }
          if (result2 !== null) {
            var result3 = [];
            var savedPos1 = pos;
            var result5 = parse_MINUS(context);
            if (result5 !== null) {
              var savedPos2 = pos;
              var result8 = parse_PN_CHARS_BASE(context);
              if (result8 !== null) {
                var result9 = parse_DIGIT(context);
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              if (result7 !== null) {
                var result6 = [];
                while (result7 !== null) {
                  result6.push(result7);
                  var savedPos2 = pos;
                  var result8 = parse_PN_CHARS_BASE(context);
                  if (result8 !== null) {
                    var result9 = parse_DIGIT(context);
                    if (result9 !== null) {
                      var result7 = [result8, result9];
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                }
              } else {
                var result6 = null;
              }
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            while (result4 !== null) {
              result3.push(result4);
              var savedPos1 = pos;
              var result5 = parse_MINUS(context);
              if (result5 !== null) {
                var savedPos2 = pos;
                var result8 = parse_PN_CHARS_BASE(context);
                if (result8 !== null) {
                  var result9 = parse_DIGIT(context);
                  if (result9 !== null) {
                    var result7 = [result8, result9];
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                if (result7 !== null) {
                  var result6 = [];
                  while (result7 !== null) {
                    result6.push(result7);
                    var savedPos2 = pos;
                    var result8 = parse_PN_CHARS_BASE(context);
                    if (result8 !== null) {
                      var result9 = parse_DIGIT(context);
                      if (result9 !== null) {
                        var result7 = [result8, result9];
                      } else {
                        var result7 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                  }
                } else {
                  var result6 = null;
                }
                if (result6 !== null) {
                  var result4 = [result5, result6];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INTEGER(context) {
        var cacheKey = "INTEGER" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_DIGIT(context);
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            var result1 = parse_DIGIT(context);
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DECIMAL(context) {
        var cacheKey = "DECIMAL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result10 = parse_DIGIT(context);
        if (result10 !== null) {
          var result6 = [];
          while (result10 !== null) {
            result6.push(result10);
            var result10 = parse_DIGIT(context);
          }
        } else {
          var result6 = null;
        }
        if (result6 !== null) {
          var result7 = parse_DOT(context);
          if (result7 !== null) {
            var result8 = [];
            var result9 = parse_DIGIT(context);
            while (result9 !== null) {
              result8.push(result9);
              var result9 = parse_DIGIT(context);
            }
            if (result8 !== null) {
              var result5 = [result6, result7, result8];
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result2 = parse_DOT(context);
          if (result2 !== null) {
            var result4 = parse_DIGIT(context);
            if (result4 !== null) {
              var result3 = [];
              while (result4 !== null) {
                result3.push(result4);
                var result4 = parse_DIGIT(context);
              }
            } else {
              var result3 = null;
            }
            if (result3 !== null) {
              var result1 = [result2, result3];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOUBLE(context) {
        var cacheKey = "DOUBLE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result16 = parse_DIGIT(context);
        if (result16 !== null) {
          var result11 = [];
          while (result16 !== null) {
            result11.push(result16);
            var result16 = parse_DIGIT(context);
          }
        } else {
          var result11 = null;
        }
        if (result11 !== null) {
          var result12 = parse_DOT(context);
          if (result12 !== null) {
            var result13 = [];
            var result15 = parse_DIGIT(context);
            while (result15 !== null) {
              result13.push(result15);
              var result15 = parse_DIGIT(context);
            }
            if (result13 !== null) {
              var result14 = parse_EXPONENT(context);
              if (result14 !== null) {
                var result10 = [result11, result12, result13, result14];
              } else {
                var result10 = null;
                pos = savedPos2;
              }
            } else {
              var result10 = null;
              pos = savedPos2;
            }
          } else {
            var result10 = null;
            pos = savedPos2;
          }
        } else {
          var result10 = null;
          pos = savedPos2;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos1 = pos;
          var result6 = parse_DOT(context);
          if (result6 !== null) {
            var result9 = parse_DIGIT(context);
            if (result9 !== null) {
              var result7 = [];
              while (result9 !== null) {
                result7.push(result9);
                var result9 = parse_DIGIT(context);
              }
            } else {
              var result7 = null;
            }
            if (result7 !== null) {
              var result8 = parse_EXPONENT(context);
              if (result8 !== null) {
                var result5 = [result6, result7, result8];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var savedPos0 = pos;
            var result4 = parse_DIGIT(context);
            if (result4 !== null) {
              var result2 = [];
              while (result4 !== null) {
                result2.push(result4);
                var result4 = parse_DIGIT(context);
              }
            } else {
              var result2 = null;
            }
            if (result2 !== null) {
              var result3 = parse_EXPONENT(context);
              if (result3 !== null) {
                var result1 = [result2, result3];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INTEGER_POSITIVE(context) {
        var cacheKey = "INTEGER_POSITIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_PLUS(context);
        if (result1 !== null) {
          var result2 = parse_INTEGER(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DECIMAL_POSITIVE(context) {
        var cacheKey = "DECIMAL_POSITIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_PLUS(context);
        if (result1 !== null) {
          var result2 = parse_DECIMAL(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOUBLE_POSITIVE(context) {
        var cacheKey = "DOUBLE_POSITIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_PLUS(context);
        if (result1 !== null) {
          var result2 = parse_DOUBLE(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INTEGER_NEGATIVE(context) {
        var cacheKey = "INTEGER_NEGATIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_MINUS(context);
        if (result1 !== null) {
          var result2 = parse_INTEGER(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DECIMAL_NEGATIVE(context) {
        var cacheKey = "DECIMAL_NEGATIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_MINUS(context);
        if (result1 !== null) {
          var result2 = parse_DECIMAL(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOUBLE_NEGATIVE(context) {
        var cacheKey = "DOUBLE_NEGATIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_MINUS(context);
        if (result1 !== null) {
          var result2 = parse_DOUBLE(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EXPONENT(context) {
        var cacheKey = "EXPONENT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[eE]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[eE]");
          }
        }
        if (result1 !== null) {
          var result7 = parse_PLUS(context);
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_MINUS(context);
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          var result2 = result5 !== null ? result5 : '';
          if (result2 !== null) {
            var result4 = parse_DIGIT(context);
            if (result4 !== null) {
              var result3 = [];
              while (result4 !== null) {
                result3.push(result4);
                var result4 = parse_DIGIT(context);
              }
            } else {
              var result3 = null;
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL1(context) {
        var cacheKey = "STRING_LITERAL1" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "'") {
          var result1 = "'";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("'"));
          }
        }
        if (result1 !== null) {
          var result2 = [];
          if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^'\\\\\\n\\r]");
            }
          }
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result5 = parse_ECHAR(context);
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          while (result4 !== null) {
            result2.push(result4);
            if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^'\\\\\\n\\r]");
              }
            }
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result5 = parse_ECHAR(context);
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result3 = "'";
              pos += 1;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("'"));
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL2(context) {
        var cacheKey = "STRING_LITERAL2" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result1 = "\"";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\""));
          }
        }
        if (result1 !== null) {
          var result2 = [];
          if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^\"\\\\\\n\\r]");
            }
          }
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result5 = parse_ECHAR(context);
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          while (result4 !== null) {
            result2.push(result4);
            if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^\"\\\\\\n\\r]");
              }
            }
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result5 = parse_ECHAR(context);
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result3 = "\"";
              pos += 1;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("\""));
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL_LONG1(context) {
        var cacheKey = "STRING_LITERAL_LONG1" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        if (input.substr(pos, 5) === "'''''") {
          var result16 = "'''''";
          pos += 5;
        } else {
          var result16 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("'''''"));
          }
        }
        if (result16 !== null) {
          var result17 = [];
          var result21 = parse_ECHAR(context);
          if (result21 !== null) {
            var result19 = result21;
          } else {
            if (input.substr(pos).match(/^[^'\\]/) !== null) {
              var result20 = input.charAt(pos);
              pos++;
            } else {
              var result20 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^'\\\\]");
              }
            }
            if (result20 !== null) {
              var result19 = result20;
            } else {
              var result19 = null;;
            };
          }
          while (result19 !== null) {
            result17.push(result19);
            var result21 = parse_ECHAR(context);
            if (result21 !== null) {
              var result19 = result21;
            } else {
              if (input.substr(pos).match(/^[^'\\]/) !== null) {
                var result20 = input.charAt(pos);
                pos++;
              } else {
                var result20 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[^'\\\\]");
                }
              }
              if (result20 !== null) {
                var result19 = result20;
              } else {
                var result19 = null;;
              };
            }
          }
          if (result17 !== null) {
            if (input.substr(pos, 3) === "'''") {
              var result18 = "'''";
              pos += 3;
            } else {
              var result18 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("'''"));
              }
            }
            if (result18 !== null) {
              var result15 = [result16, result17, result18];
            } else {
              var result15 = null;
              pos = savedPos2;
            }
          } else {
            var result15 = null;
            pos = savedPos2;
          }
        } else {
          var result15 = null;
          pos = savedPos2;
        }
        if (result15 !== null) {
          var result0 = result15;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 4) === "''''") {
            var result9 = "''''";
            pos += 4;
          } else {
            var result9 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("''''"));
            }
          }
          if (result9 !== null) {
            var result10 = [];
            var result14 = parse_ECHAR(context);
            if (result14 !== null) {
              var result12 = result14;
            } else {
              if (input.substr(pos).match(/^[^'\\]/) !== null) {
                var result13 = input.charAt(pos);
                pos++;
              } else {
                var result13 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[^'\\\\]");
                }
              }
              if (result13 !== null) {
                var result12 = result13;
              } else {
                var result12 = null;;
              };
            }
            while (result12 !== null) {
              result10.push(result12);
              var result14 = parse_ECHAR(context);
              if (result14 !== null) {
                var result12 = result14;
              } else {
                if (input.substr(pos).match(/^[^'\\]/) !== null) {
                  var result13 = input.charAt(pos);
                  pos++;
                } else {
                  var result13 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[^'\\\\]");
                  }
                }
                if (result13 !== null) {
                  var result12 = result13;
                } else {
                  var result12 = null;;
                };
              }
            }
            if (result10 !== null) {
              if (input.substr(pos, 3) === "'''") {
                var result11 = "'''";
                pos += 3;
              } else {
                var result11 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("'''"));
                }
              }
              if (result11 !== null) {
                var result8 = [result9, result10, result11];
              } else {
                var result8 = null;
                pos = savedPos1;
              }
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 3) === "'''") {
              var result2 = "'''";
              pos += 3;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("'''"));
              }
            }
            if (result2 !== null) {
              var result3 = [];
              var result7 = parse_ECHAR(context);
              if (result7 !== null) {
                var result5 = result7;
              } else {
                if (input.substr(pos).match(/^[^'\\]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[^'\\\\]");
                  }
                }
                if (result6 !== null) {
                  var result5 = result6;
                } else {
                  var result5 = null;;
                };
              }
              while (result5 !== null) {
                result3.push(result5);
                var result7 = parse_ECHAR(context);
                if (result7 !== null) {
                  var result5 = result7;
                } else {
                  if (input.substr(pos).match(/^[^'\\]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[^'\\\\]");
                    }
                  }
                  if (result6 !== null) {
                    var result5 = result6;
                  } else {
                    var result5 = null;;
                  };
                }
              }
              if (result3 !== null) {
                if (input.substr(pos, 3) === "'''") {
                  var result4 = "'''";
                  pos += 3;
                } else {
                  var result4 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("'''"));
                  }
                }
                if (result4 !== null) {
                  var result1 = [result2, result3, result4];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL_LONG2(context) {
        var cacheKey = "STRING_LITERAL_LONG2" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        if (input.substr(pos, 5) === "\"\"\"\"\"") {
          var result16 = "\"\"\"\"\"";
          pos += 5;
        } else {
          var result16 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\"\"\"\"\""));
          }
        }
        if (result16 !== null) {
          var result17 = [];
          var result21 = parse_ECHAR(context);
          if (result21 !== null) {
            var result19 = result21;
          } else {
            if (input.substr(pos).match(/^[^"\\]/) !== null) {
              var result20 = input.charAt(pos);
              pos++;
            } else {
              var result20 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^\"\\\\]");
              }
            }
            if (result20 !== null) {
              var result19 = result20;
            } else {
              var result19 = null;;
            };
          }
          while (result19 !== null) {
            result17.push(result19);
            var result21 = parse_ECHAR(context);
            if (result21 !== null) {
              var result19 = result21;
            } else {
              if (input.substr(pos).match(/^[^"\\]/) !== null) {
                var result20 = input.charAt(pos);
                pos++;
              } else {
                var result20 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[^\"\\\\]");
                }
              }
              if (result20 !== null) {
                var result19 = result20;
              } else {
                var result19 = null;;
              };
            }
          }
          if (result17 !== null) {
            if (input.substr(pos, 3) === "\"\"\"") {
              var result18 = "\"\"\"";
              pos += 3;
            } else {
              var result18 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("\"\"\""));
              }
            }
            if (result18 !== null) {
              var result15 = [result16, result17, result18];
            } else {
              var result15 = null;
              pos = savedPos2;
            }
          } else {
            var result15 = null;
            pos = savedPos2;
          }
        } else {
          var result15 = null;
          pos = savedPos2;
        }
        if (result15 !== null) {
          var result0 = result15;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 4) === "\"\"\"\"") {
            var result9 = "\"\"\"\"";
            pos += 4;
          } else {
            var result9 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("\"\"\"\""));
            }
          }
          if (result9 !== null) {
            var result10 = [];
            var result14 = parse_ECHAR(context);
            if (result14 !== null) {
              var result12 = result14;
            } else {
              if (input.substr(pos).match(/^[^"\\]/) !== null) {
                var result13 = input.charAt(pos);
                pos++;
              } else {
                var result13 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[^\"\\\\]");
                }
              }
              if (result13 !== null) {
                var result12 = result13;
              } else {
                var result12 = null;;
              };
            }
            while (result12 !== null) {
              result10.push(result12);
              var result14 = parse_ECHAR(context);
              if (result14 !== null) {
                var result12 = result14;
              } else {
                if (input.substr(pos).match(/^[^"\\]/) !== null) {
                  var result13 = input.charAt(pos);
                  pos++;
                } else {
                  var result13 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[^\"\\\\]");
                  }
                }
                if (result13 !== null) {
                  var result12 = result13;
                } else {
                  var result12 = null;;
                };
              }
            }
            if (result10 !== null) {
              if (input.substr(pos, 3) === "\"\"\"") {
                var result11 = "\"\"\"";
                pos += 3;
              } else {
                var result11 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("\"\"\""));
                }
              }
              if (result11 !== null) {
                var result8 = [result9, result10, result11];
              } else {
                var result8 = null;
                pos = savedPos1;
              }
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 3) === "\"\"\"") {
              var result2 = "\"\"\"";
              pos += 3;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("\"\"\""));
              }
            }
            if (result2 !== null) {
              var result3 = [];
              var result7 = parse_ECHAR(context);
              if (result7 !== null) {
                var result5 = result7;
              } else {
                if (input.substr(pos).match(/^[^"\\]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[^\"\\\\]");
                  }
                }
                if (result6 !== null) {
                  var result5 = result6;
                } else {
                  var result5 = null;;
                };
              }
              while (result5 !== null) {
                result3.push(result5);
                var result7 = parse_ECHAR(context);
                if (result7 !== null) {
                  var result5 = result7;
                } else {
                  if (input.substr(pos).match(/^[^"\\]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[^\"\\\\]");
                    }
                  }
                  if (result6 !== null) {
                    var result5 = result6;
                  } else {
                    var result5 = null;;
                  };
                }
              }
              if (result3 !== null) {
                if (input.substr(pos, 3) === "\"\"\"") {
                  var result4 = "\"\"\"";
                  pos += 3;
                } else {
                  var result4 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("\"\"\""));
                  }
                }
                if (result4 !== null) {
                  var result1 = [result2, result3, result4];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ECHAR(context) {
        var cacheKey = "ECHAR" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result1 = "\\";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\\"));
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[tbnrf\\"']/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[tbnrf\\\\\"']");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_CHARS_U(context) {
        var cacheKey = "PN_CHARS_U" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_PN_CHARS_BASE(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === "_") {
            var result1 = "_";
            pos += 1;
          } else {
            var result1 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("_"));
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VARNAME(context) {
        var cacheKey = "VARNAME" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result9 = parse_PN_CHARS_U(context);
        if (result9 !== null) {
          var result1 = result9;
        } else {
          var result8 = parse_DIGIT(context);
          if (result8 !== null) {
            var result1 = result8;
          } else {
            var result1 = null;;
          };
        }
        if (result1 !== null) {
          var result2 = [];
          var result7 = parse_PN_CHARS_U(context);
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var result6 = parse_DIGIT(context);
            if (result6 !== null) {
              var result3 = result6;
            } else {
              if (input.substr(pos, 1) === "\xB7") {
                var result5 = "\xB7";
                pos += 1;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("\xB7"));
                }
              }
              if (result5 !== null) {
                var result3 = result5;
              } else {
                if (input.substr(pos).match(/^[\u0300-\u36FF\u203F-\u2040]/) !== null) {
                  var result4 = input.charAt(pos);
                  pos++;
                } else {
                  var result4 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[\\u0300-\\u36FF\\u203F-\\u2040]");
                  }
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            };
          }
          while (result3 !== null) {
            result2.push(result3);
            var result7 = parse_PN_CHARS_U(context);
            if (result7 !== null) {
              var result3 = result7;
            } else {
              var result6 = parse_DIGIT(context);
              if (result6 !== null) {
                var result3 = result6;
              } else {
                if (input.substr(pos, 1) === "\xB7") {
                  var result5 = "\xB7";
                  pos += 1;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("\xB7"));
                  }
                }
                if (result5 !== null) {
                  var result3 = result5;
                } else {
                  if (input.substr(pos).match(/^[\u0300-\u36FF\u203F-\u2040]/) !== null) {
                    var result4 = input.charAt(pos);
                    pos++;
                  } else {
                    var result4 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[\\u0300-\\u36FF\\u203F-\\u2040]");
                    }
                  }
                  if (result4 !== null) {
                    var result3 = result4;
                  } else {
                    var result3 = null;;
                  };
                };
              };
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_CHARS(context) {
        var cacheKey = "PN_CHARS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result6 = parse_PN_CHARS_U(context);
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_MINUS(context);
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_DIGIT(context);
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos, 1) === "\xB7") {
                var result3 = "\xB7";
                pos += 1;
              } else {
                var result3 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("\xB7"));
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                  var result2 = input.charAt(pos);
                  pos++;
                } else {
                  var result2 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[\\u0300-\\u036F]");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                    var result1 = input.charAt(pos);
                    pos++;
                  } else {
                    var result1 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[\\u203F-\\u2040]");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_PREFIX(context) {
        var cacheKey = "PN_PREFIX" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_PN_CHARS_BASE(context);
        if (result1 !== null) {
          var result2 = [];
          var result7 = parse_PN_CHARS(context);
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var savedPos1 = pos;
            var result5 = parse_DOT(context);
            if (result5 !== null) {
              var result6 = parse_PN_CHARS(context);
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          }
          while (result3 !== null) {
            result2.push(result3);
            var result7 = parse_PN_CHARS(context);
            if (result7 !== null) {
              var result3 = result7;
            } else {
              var savedPos1 = pos;
              var result5 = parse_DOT(context);
              if (result5 !== null) {
                var result6 = parse_PN_CHARS(context);
                if (result6 !== null) {
                  var result4 = [result5, result6];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
              if (result4 !== null) {
                var result3 = result4;
              } else {
                var result3 = null;;
              };
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_LOCAL(context) {
        var cacheKey = "PN_LOCAL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result9 = parse_PN_CHARS_U(context);
        if (result9 !== null) {
          var result1 = result9;
        } else {
          var result8 = parse_DIGIT(context);
          if (result8 !== null) {
            var result1 = result8;
          } else {
            var result1 = null;;
          };
        }
        if (result1 !== null) {
          var result2 = [];
          var result7 = parse_PN_CHARS(context);
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var savedPos1 = pos;
            var result5 = parse_DOT(context);
            if (result5 !== null) {
              var result6 = parse_PN_CHARS(context);
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          }
          while (result3 !== null) {
            result2.push(result3);
            var result7 = parse_PN_CHARS(context);
            if (result7 !== null) {
              var result3 = result7;
            } else {
              var savedPos1 = pos;
              var result5 = parse_DOT(context);
              if (result5 !== null) {
                var result6 = parse_PN_CHARS(context);
                if (result6 !== null) {
                  var result4 = [result5, result6];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
              if (result4 !== null) {
                var result3 = result4;
              } else {
                var result3 = null;;
              };
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_CHARS_BASE(context) {
        var cacheKey = "PN_CHARS_BASE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[A-Za-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed("[A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DIGIT(context) {
        var cacheKey = "DIGIT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_COMMENT(context) {
        var cacheKey = "COMMENT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "#") {
          var result1 = "#";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("#"));
          }
        }
        if (result1 !== null) {
          var result2 = [];
          if (input.substr(pos).match(/^[^\n\r]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^\\n\\r]");
            }
          }
          while (result4 !== null) {
            result2.push(result4);
            if (input.substr(pos).match(/^[^\n\r]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^\\n\\r]");
              }
            }
          }
          if (result2 !== null) {
            var result3 = parse_EOL(context);
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EOL(context) {
        var cacheKey = "EOL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "\n") {
          var result2 = "\n";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\n"));
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === "\r") {
            var result1 = "\r";
            pos += 1;
          } else {
            var result1 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("\r"));
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_REFERENCE(context) {
        var cacheKey = "REFERENCE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "^^") {
          var result0 = "^^";
          pos += 2;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("^^"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LESS_EQUAL(context) {
        var cacheKey = "LESS_EQUAL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "<=") {
          var result0 = "<=";
          pos += 2;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("<="));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GREATER_EQUAL(context) {
        var cacheKey = "GREATER_EQUAL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === ">=") {
          var result0 = ">=";
          pos += 2;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(">="));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NOT_EQUAL(context) {
        var cacheKey = "NOT_EQUAL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "!=") {
          var result0 = "!=";
          pos += 2;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("!="));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AND(context) {
        var cacheKey = "AND" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "&&") {
          var result0 = "&&";
          pos += 2;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("&&"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OR(context) {
        var cacheKey = "OR" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "||") {
          var result0 = "||";
          pos += 2;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("||"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OPEN_BRACE(context) {
        var cacheKey = "OPEN_BRACE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "(") {
          var result0 = "(";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("("));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CLOSE_BRACE(context) {
        var cacheKey = "CLOSE_BRACE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === ")") {
          var result0 = ")";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(")"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OPEN_CURLY_BRACE(context) {
        var cacheKey = "OPEN_CURLY_BRACE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "{") {
          var result0 = "{";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("{"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CLOSE_CURLY_BRACE(context) {
        var cacheKey = "CLOSE_CURLY_BRACE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "}") {
          var result0 = "}";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("}"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OPEN_SQUARE_BRACE(context) {
        var cacheKey = "OPEN_SQUARE_BRACE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "[") {
          var result0 = "[";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("["));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CLOSE_SQUARE_BRACE(context) {
        var cacheKey = "CLOSE_SQUARE_BRACE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "]") {
          var result0 = "]";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("]"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SEMICOLON(context) {
        var cacheKey = "SEMICOLON" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === ";") {
          var result0 = ";";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(";"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOT(context) {
        var cacheKey = "DOT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === ".") {
          var result0 = ".";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("."));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PLUS(context) {
        var cacheKey = "PLUS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "+") {
          var result0 = "+";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("+"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MINUS(context) {
        var cacheKey = "MINUS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "-") {
          var result0 = "-";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("-"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ASTERISK(context) {
        var cacheKey = "ASTERISK" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "*") {
          var result0 = "*";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("*"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_COMMA(context) {
        var cacheKey = "COMMA" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === ",") {
          var result0 = ",";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(","));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NOT(context) {
        var cacheKey = "NOT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "!") {
          var result0 = "!";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("!"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DIVIDE(context) {
        var cacheKey = "DIVIDE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "/") {
          var result0 = "/";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("/"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EQUAL(context) {
        var cacheKey = "EQUAL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "=") {
          var result0 = "=";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("="));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LESS(context) {
        var cacheKey = "LESS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "<") {
          var result0 = "<";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("<"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GREATER(context) {
        var cacheKey = "GREATER" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === ">") {
          var result0 = ">";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(">"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          switch (failuresExpected.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpected[0];
            default:
              failuresExpected.sort();
              return failuresExpected.slice(0, failuresExpected.length - 1).join(', ')
                + ' or '
                + failuresExpected[failuresExpected.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quoteString(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parse_query({ reportMatchFailures: true });
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
