CodeMirror.defineMode("sparql", function(config, parserConfig) {

    var indentUnit = config.indentUnit;

    // ll1_table is auto-generated from grammar 
    // - do not edit manually
  var ll1_table=
{
  "*[&&,valueLogical]" : {
     "&&": ["[&&,valueLogical]","*[&&,valueLogical]"], 
     "AS": [], 
     ")": [], 
     ",": [], 
     "||": [], 
     ";": []}, 
  "*[,,expression]" : {
     ",": ["[,,expression]","*[,,expression]"], 
     ")": []}, 
  "*[,,object]" : {
     ",": ["[,,object]","*[,,object]"], 
     ".": [], 
     ";": [], 
     "]": [], 
     "}": [], 
     "GRAPH": [], 
     "{": [], 
     "OPTIONAL": [], 
     "MINUS": [], 
     "SERVICE": [], 
     "FILTER": [], 
     "BIND": []}, 
  "*[/,pathEltOrInverse]" : {
     "/": ["[/,pathEltOrInverse]","*[/,pathEltOrInverse]"], 
     "|": [], 
     ")": [], 
     "(": [], 
     "[": [], 
     "VAR1": [], 
     "VAR2": [], 
     "NIL": [], 
     "IRI_REF": [], 
     "TRUE": [], 
     "FALSE": [], 
     "BLANK_NODE_LABEL": [], 
     "ANON": [], 
     "PNAME_LN": [], 
     "PNAME_NS": [], 
     "STRING_LITERAL1": [], 
     "STRING_LITERAL2": [], 
     "STRING_LITERAL_LONG1": [], 
     "STRING_LITERAL_LONG2": [], 
     "INTEGER": [], 
     "DECIMAL": [], 
     "DOUBLE": [], 
     "INTEGER_POSITIVE": [], 
     "DECIMAL_POSITIVE": [], 
     "DOUBLE_POSITIVE": [], 
     "INTEGER_NEGATIVE": [], 
     "DECIMAL_NEGATIVE": [], 
     "DOUBLE_NEGATIVE": []}, 
  "*[;,?[or([verbpath,verbSimple]),objectList]]" : {
     ";": ["[;,?[or([verbpath,verbSimple]),objectList]]","*[;,?[or([verbpath,verbSimple]),objectList]]"], 
     ".": [], 
     "{": [], 
     "OPTIONAL": [], 
     "MINUS": [], 
     "GRAPH": [], 
     "SERVICE": [], 
     "FILTER": [], 
     "BIND": [], 
     "}": []}, 
  "*[;,?[verb,objectList]]" : {
     ";": ["[;,?[verb,objectList]]","*[;,?[verb,objectList]]"], 
     ".": [], 
     "]": [], 
     "}": [], 
     "GRAPH": [], 
     "{": [], 
     "OPTIONAL": [], 
     "MINUS": [], 
     "SERVICE": [], 
     "FILTER": [], 
     "BIND": []}, 
  "*[UNION,groupGraphPattern]" : {
     "UNION": ["[UNION,groupGraphPattern]","*[UNION,groupGraphPattern]"], 
     "VAR1": [], 
     "VAR2": [], 
     "NIL": [], 
     "(": [], 
     "[": [], 
     "IRI_REF": [], 
     "TRUE": [], 
     "FALSE": [], 
     "BLANK_NODE_LABEL": [], 
     "ANON": [], 
     "PNAME_LN": [], 
     "PNAME_NS": [], 
     "STRING_LITERAL1": [], 
     "STRING_LITERAL2": [], 
     "STRING_LITERAL_LONG1": [], 
     "STRING_LITERAL_LONG2": [], 
     "INTEGER": [], 
     "DECIMAL": [], 
     "DOUBLE": [], 
     "INTEGER_POSITIVE": [], 
     "DECIMAL_POSITIVE": [], 
     "DOUBLE_POSITIVE": [], 
     "INTEGER_NEGATIVE": [], 
     "DECIMAL_NEGATIVE": [], 
     "DOUBLE_NEGATIVE": [], 
     ".": [], 
     "{": [], 
     "OPTIONAL": [], 
     "MINUS": [], 
     "GRAPH": [], 
     "SERVICE": [], 
     "FILTER": [], 
     "BIND": [], 
     "}": []}, 
  "*[graphPatternNotTriples,?.,?triplesBlock]" : {
     "{": ["[graphPatternNotTriples,?.,?triplesBlock]","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "OPTIONAL": ["[graphPatternNotTriples,?.,?triplesBlock]","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "MINUS": ["[graphPatternNotTriples,?.,?triplesBlock]","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "GRAPH": ["[graphPatternNotTriples,?.,?triplesBlock]","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "SERVICE": ["[graphPatternNotTriples,?.,?triplesBlock]","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "FILTER": ["[graphPatternNotTriples,?.,?triplesBlock]","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "BIND": ["[graphPatternNotTriples,?.,?triplesBlock]","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "}": []}, 
  "*[quadsNotTriples,?.,?triplesTemplate]" : {
     "GRAPH": ["[quadsNotTriples,?.,?triplesTemplate]","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "}": []}, 
  "*[|,pathOneInPropertySet]" : {
     "|": ["[|,pathOneInPropertySet]","*[|,pathOneInPropertySet]"], 
     ")": []}, 
  "*[|,pathSequence]" : {
     "|": ["[|,pathSequence]","*[|,pathSequence]"], 
     ")": [], 
     "(": [], 
     "[": [], 
     "VAR1": [], 
     "VAR2": [], 
     "NIL": [], 
     "IRI_REF": [], 
     "TRUE": [], 
     "FALSE": [], 
     "BLANK_NODE_LABEL": [], 
     "ANON": [], 
     "PNAME_LN": [], 
     "PNAME_NS": [], 
     "STRING_LITERAL1": [], 
     "STRING_LITERAL2": [], 
     "STRING_LITERAL_LONG1": [], 
     "STRING_LITERAL_LONG2": [], 
     "INTEGER": [], 
     "DECIMAL": [], 
     "DOUBLE": [], 
     "INTEGER_POSITIVE": [], 
     "DECIMAL_POSITIVE": [], 
     "DOUBLE_POSITIVE": [], 
     "INTEGER_NEGATIVE": [], 
     "DECIMAL_NEGATIVE": [], 
     "DOUBLE_NEGATIVE": []}, 
  "*[||,conditionalAndexpression]" : {
     "||": ["[||,conditionalAndexpression]","*[||,conditionalAndexpression]"], 
     "AS": [], 
     ")": [], 
     ",": [], 
     ";": []}, 
  "*bindingValue" : {
     "UNDEF": ["bindingValue","*bindingValue"], 
     "IRI_REF": ["bindingValue","*bindingValue"], 
     "TRUE": ["bindingValue","*bindingValue"], 
     "FALSE": ["bindingValue","*bindingValue"], 
     "PNAME_LN": ["bindingValue","*bindingValue"], 
     "PNAME_NS": ["bindingValue","*bindingValue"], 
     "STRING_LITERAL1": ["bindingValue","*bindingValue"], 
     "STRING_LITERAL2": ["bindingValue","*bindingValue"], 
     "STRING_LITERAL_LONG1": ["bindingValue","*bindingValue"], 
     "STRING_LITERAL_LONG2": ["bindingValue","*bindingValue"], 
     "INTEGER": ["bindingValue","*bindingValue"], 
     "DECIMAL": ["bindingValue","*bindingValue"], 
     "DOUBLE": ["bindingValue","*bindingValue"], 
     "INTEGER_POSITIVE": ["bindingValue","*bindingValue"], 
     "DECIMAL_POSITIVE": ["bindingValue","*bindingValue"], 
     "DOUBLE_POSITIVE": ["bindingValue","*bindingValue"], 
     "INTEGER_NEGATIVE": ["bindingValue","*bindingValue"], 
     "DECIMAL_NEGATIVE": ["bindingValue","*bindingValue"], 
     "DOUBLE_NEGATIVE": ["bindingValue","*bindingValue"], 
     ")": []}, 
  "*datasetClause" : {
     "FROM": ["datasetClause","*datasetClause"], 
     "WHERE": [], 
     "{": [], 
     "ORDER": [], 
     "HAVING": [], 
     "GROUP": [], 
     "LIMIT": [], 
     "OFFSET": [], 
     "$": [], 
     "BINDINGS": []}, 
  "*graphNode" : {
     "(": ["graphNode","*graphNode"], 
     "[": ["graphNode","*graphNode"], 
     "VAR1": ["graphNode","*graphNode"], 
     "VAR2": ["graphNode","*graphNode"], 
     "NIL": ["graphNode","*graphNode"], 
     "IRI_REF": ["graphNode","*graphNode"], 
     "TRUE": ["graphNode","*graphNode"], 
     "FALSE": ["graphNode","*graphNode"], 
     "BLANK_NODE_LABEL": ["graphNode","*graphNode"], 
     "ANON": ["graphNode","*graphNode"], 
     "PNAME_LN": ["graphNode","*graphNode"], 
     "PNAME_NS": ["graphNode","*graphNode"], 
     "STRING_LITERAL1": ["graphNode","*graphNode"], 
     "STRING_LITERAL2": ["graphNode","*graphNode"], 
     "STRING_LITERAL_LONG1": ["graphNode","*graphNode"], 
     "STRING_LITERAL_LONG2": ["graphNode","*graphNode"], 
     "INTEGER": ["graphNode","*graphNode"], 
     "DECIMAL": ["graphNode","*graphNode"], 
     "DOUBLE": ["graphNode","*graphNode"], 
     "INTEGER_POSITIVE": ["graphNode","*graphNode"], 
     "DECIMAL_POSITIVE": ["graphNode","*graphNode"], 
     "DOUBLE_POSITIVE": ["graphNode","*graphNode"], 
     "INTEGER_NEGATIVE": ["graphNode","*graphNode"], 
     "DECIMAL_NEGATIVE": ["graphNode","*graphNode"], 
     "DOUBLE_NEGATIVE": ["graphNode","*graphNode"], 
     ")": []}, 
  "*groupCondition" : {
     "(": ["groupCondition","*groupCondition"], 
     "STR": ["groupCondition","*groupCondition"], 
     "LANG": ["groupCondition","*groupCondition"], 
     "LANGMATCHES": ["groupCondition","*groupCondition"], 
     "DATATYPE": ["groupCondition","*groupCondition"], 
     "BOUND": ["groupCondition","*groupCondition"], 
     "IRI": ["groupCondition","*groupCondition"], 
     "URI": ["groupCondition","*groupCondition"], 
     "BNODE": ["groupCondition","*groupCondition"], 
     "RAND": ["groupCondition","*groupCondition"], 
     "ABS": ["groupCondition","*groupCondition"], 
     "CEIL": ["groupCondition","*groupCondition"], 
     "FLOOR": ["groupCondition","*groupCondition"], 
     "ROUND": ["groupCondition","*groupCondition"], 
     "CONCAT": ["groupCondition","*groupCondition"], 
     "STRLEN": ["groupCondition","*groupCondition"], 
     "UCASE": ["groupCondition","*groupCondition"], 
     "LCASE": ["groupCondition","*groupCondition"], 
     "ENCODE_FOR_URI": ["groupCondition","*groupCondition"], 
     "CONTAINS": ["groupCondition","*groupCondition"], 
     "STRSTARTS": ["groupCondition","*groupCondition"], 
     "STRENDS": ["groupCondition","*groupCondition"], 
     "STRBEFORE": ["groupCondition","*groupCondition"], 
     "STRAFTER": ["groupCondition","*groupCondition"], 
     "YEAR": ["groupCondition","*groupCondition"], 
     "MONTH": ["groupCondition","*groupCondition"], 
     "DAY": ["groupCondition","*groupCondition"], 
     "HOURS": ["groupCondition","*groupCondition"], 
     "MINUTES": ["groupCondition","*groupCondition"], 
     "SECONDS": ["groupCondition","*groupCondition"], 
     "TIMEZONE": ["groupCondition","*groupCondition"], 
     "TZ": ["groupCondition","*groupCondition"], 
     "NOW": ["groupCondition","*groupCondition"], 
     "MD5": ["groupCondition","*groupCondition"], 
     "SHA1": ["groupCondition","*groupCondition"], 
     "SHA256": ["groupCondition","*groupCondition"], 
     "SHA384": ["groupCondition","*groupCondition"], 
     "SHA512": ["groupCondition","*groupCondition"], 
     "COALESCE": ["groupCondition","*groupCondition"], 
     "IF": ["groupCondition","*groupCondition"], 
     "STRLANG": ["groupCondition","*groupCondition"], 
     "STRDT": ["groupCondition","*groupCondition"], 
     "SAMETERM": ["groupCondition","*groupCondition"], 
     "ISIRI": ["groupCondition","*groupCondition"], 
     "ISURI": ["groupCondition","*groupCondition"], 
     "ISBLANK": ["groupCondition","*groupCondition"], 
     "ISLITERAL": ["groupCondition","*groupCondition"], 
     "ISNUMERIC": ["groupCondition","*groupCondition"], 
     "VAR1": ["groupCondition","*groupCondition"], 
     "VAR2": ["groupCondition","*groupCondition"], 
     "SUBSTR": ["groupCondition","*groupCondition"], 
     "REPLACE": ["groupCondition","*groupCondition"], 
     "REGEX": ["groupCondition","*groupCondition"], 
     "EXISTS": ["groupCondition","*groupCondition"], 
     "NOT": ["groupCondition","*groupCondition"], 
     "IRI_REF": ["groupCondition","*groupCondition"], 
     "PNAME_LN": ["groupCondition","*groupCondition"], 
     "PNAME_NS": ["groupCondition","*groupCondition"], 
     "LIMIT": [], 
     "OFFSET": [], 
     "ORDER": [], 
     "HAVING": [], 
     "$": [], 
     "BINDINGS": [], 
     "}": []}, 
  "*havingCondition" : {
     "(": ["havingCondition","*havingCondition"], 
     "STR": ["havingCondition","*havingCondition"], 
     "LANG": ["havingCondition","*havingCondition"], 
     "LANGMATCHES": ["havingCondition","*havingCondition"], 
     "DATATYPE": ["havingCondition","*havingCondition"], 
     "BOUND": ["havingCondition","*havingCondition"], 
     "IRI": ["havingCondition","*havingCondition"], 
     "URI": ["havingCondition","*havingCondition"], 
     "BNODE": ["havingCondition","*havingCondition"], 
     "RAND": ["havingCondition","*havingCondition"], 
     "ABS": ["havingCondition","*havingCondition"], 
     "CEIL": ["havingCondition","*havingCondition"], 
     "FLOOR": ["havingCondition","*havingCondition"], 
     "ROUND": ["havingCondition","*havingCondition"], 
     "CONCAT": ["havingCondition","*havingCondition"], 
     "STRLEN": ["havingCondition","*havingCondition"], 
     "UCASE": ["havingCondition","*havingCondition"], 
     "LCASE": ["havingCondition","*havingCondition"], 
     "ENCODE_FOR_URI": ["havingCondition","*havingCondition"], 
     "CONTAINS": ["havingCondition","*havingCondition"], 
     "STRSTARTS": ["havingCondition","*havingCondition"], 
     "STRENDS": ["havingCondition","*havingCondition"], 
     "STRBEFORE": ["havingCondition","*havingCondition"], 
     "STRAFTER": ["havingCondition","*havingCondition"], 
     "YEAR": ["havingCondition","*havingCondition"], 
     "MONTH": ["havingCondition","*havingCondition"], 
     "DAY": ["havingCondition","*havingCondition"], 
     "HOURS": ["havingCondition","*havingCondition"], 
     "MINUTES": ["havingCondition","*havingCondition"], 
     "SECONDS": ["havingCondition","*havingCondition"], 
     "TIMEZONE": ["havingCondition","*havingCondition"], 
     "TZ": ["havingCondition","*havingCondition"], 
     "NOW": ["havingCondition","*havingCondition"], 
     "MD5": ["havingCondition","*havingCondition"], 
     "SHA1": ["havingCondition","*havingCondition"], 
     "SHA256": ["havingCondition","*havingCondition"], 
     "SHA384": ["havingCondition","*havingCondition"], 
     "SHA512": ["havingCondition","*havingCondition"], 
     "COALESCE": ["havingCondition","*havingCondition"], 
     "IF": ["havingCondition","*havingCondition"], 
     "STRLANG": ["havingCondition","*havingCondition"], 
     "STRDT": ["havingCondition","*havingCondition"], 
     "SAMETERM": ["havingCondition","*havingCondition"], 
     "ISIRI": ["havingCondition","*havingCondition"], 
     "ISURI": ["havingCondition","*havingCondition"], 
     "ISBLANK": ["havingCondition","*havingCondition"], 
     "ISLITERAL": ["havingCondition","*havingCondition"], 
     "ISNUMERIC": ["havingCondition","*havingCondition"], 
     "SUBSTR": ["havingCondition","*havingCondition"], 
     "REPLACE": ["havingCondition","*havingCondition"], 
     "REGEX": ["havingCondition","*havingCondition"], 
     "EXISTS": ["havingCondition","*havingCondition"], 
     "NOT": ["havingCondition","*havingCondition"], 
     "IRI_REF": ["havingCondition","*havingCondition"], 
     "PNAME_LN": ["havingCondition","*havingCondition"], 
     "PNAME_NS": ["havingCondition","*havingCondition"], 
     "LIMIT": [], 
     "OFFSET": [], 
     "ORDER": [], 
     "$": [], 
     "BINDINGS": [], 
     "}": []}, 
  "*or([[ (,*bindingValue,)],NIL])" : {
     "(": ["or([[ (,*bindingValue,)],NIL])","*or([[ (,*bindingValue,)],NIL])"], 
     "NIL": ["or([[ (,*bindingValue,)],NIL])","*or([[ (,*bindingValue,)],NIL])"], 
     "}": []}, 
  "*or([[*,unaryexpression],[/,unaryexpression]])" : {
     "*": ["or([[*,unaryexpression],[/,unaryexpression]])","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "/": ["or([[*,unaryexpression],[/,unaryexpression]])","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "AS": [], 
     ")": [], 
     ",": [], 
     "||": [], 
     "&&": [], 
     "=": [], 
     "!=": [], 
     "<": [], 
     ">": [], 
     "<=": [], 
     ">=": [], 
     "IN": [], 
     "NOT": [], 
     "+": [], 
     "-": [], 
     "INTEGER_POSITIVE": [], 
     "DECIMAL_POSITIVE": [], 
     "DOUBLE_POSITIVE": [], 
     "INTEGER_NEGATIVE": [], 
     "DECIMAL_NEGATIVE": [], 
     "DOUBLE_NEGATIVE": [], 
     ";": []}, 
  "*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])" : {
     "+": ["or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "-": ["or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "INTEGER_POSITIVE": ["or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "DECIMAL_POSITIVE": ["or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "DOUBLE_POSITIVE": ["or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "INTEGER_NEGATIVE": ["or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "DECIMAL_NEGATIVE": ["or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "DOUBLE_NEGATIVE": ["or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "AS": [], 
     ")": [], 
     ",": [], 
     "||": [], 
     "&&": [], 
     "=": [], 
     "!=": [], 
     "<": [], 
     ">": [], 
     "<=": [], 
     ">=": [], 
     "IN": [], 
     "NOT": [], 
     ";": []}, 
  "*or([baseDecl,prefixDecl])" : {
     "BASE": ["or([baseDecl,prefixDecl])","*or([baseDecl,prefixDecl])"], 
     "PREFIX": ["or([baseDecl,prefixDecl])","*or([baseDecl,prefixDecl])"], 
     "CONSTRUCT": [], 
     "DESCRIBE": [], 
     "ASK": [], 
     "SELECT": [], 
     "LOAD": [], 
     "CLEAR": [], 
     "DROP": [], 
     "ADD": [], 
     "MOVE": [], 
     "COPY": [], 
     "CREATE": [], 
     "INSERT DATA": [], 
     "DELETE DATA": [], 
     "DELETE WHERE": [], 
     "WITH": [], 
     "DELETE": [], 
     "INSERT": []}, 
  "*or([var,[ (,expression,AS,var,)]])" : {
     "(": ["or([var,[ (,expression,AS,var,)]])","*or([var,[ (,expression,AS,var,)]])"], 
     "VAR1": ["or([var,[ (,expression,AS,var,)]])","*or([var,[ (,expression,AS,var,)]])"], 
     "VAR2": ["or([var,[ (,expression,AS,var,)]])","*or([var,[ (,expression,AS,var,)]])"], 
     "WHERE": [], 
     "{": [], 
     "FROM": []}, 
  "*orderCondition" : {
     "ASC": ["orderCondition","*orderCondition"], 
     "DESC": ["orderCondition","*orderCondition"], 
     "VAR1": ["orderCondition","*orderCondition"], 
     "VAR2": ["orderCondition","*orderCondition"], 
     "(": ["orderCondition","*orderCondition"], 
     "STR": ["orderCondition","*orderCondition"], 
     "LANG": ["orderCondition","*orderCondition"], 
     "LANGMATCHES": ["orderCondition","*orderCondition"], 
     "DATATYPE": ["orderCondition","*orderCondition"], 
     "BOUND": ["orderCondition","*orderCondition"], 
     "IRI": ["orderCondition","*orderCondition"], 
     "URI": ["orderCondition","*orderCondition"], 
     "BNODE": ["orderCondition","*orderCondition"], 
     "RAND": ["orderCondition","*orderCondition"], 
     "ABS": ["orderCondition","*orderCondition"], 
     "CEIL": ["orderCondition","*orderCondition"], 
     "FLOOR": ["orderCondition","*orderCondition"], 
     "ROUND": ["orderCondition","*orderCondition"], 
     "CONCAT": ["orderCondition","*orderCondition"], 
     "STRLEN": ["orderCondition","*orderCondition"], 
     "UCASE": ["orderCondition","*orderCondition"], 
     "LCASE": ["orderCondition","*orderCondition"], 
     "ENCODE_FOR_URI": ["orderCondition","*orderCondition"], 
     "CONTAINS": ["orderCondition","*orderCondition"], 
     "STRSTARTS": ["orderCondition","*orderCondition"], 
     "STRENDS": ["orderCondition","*orderCondition"], 
     "STRBEFORE": ["orderCondition","*orderCondition"], 
     "STRAFTER": ["orderCondition","*orderCondition"], 
     "YEAR": ["orderCondition","*orderCondition"], 
     "MONTH": ["orderCondition","*orderCondition"], 
     "DAY": ["orderCondition","*orderCondition"], 
     "HOURS": ["orderCondition","*orderCondition"], 
     "MINUTES": ["orderCondition","*orderCondition"], 
     "SECONDS": ["orderCondition","*orderCondition"], 
     "TIMEZONE": ["orderCondition","*orderCondition"], 
     "TZ": ["orderCondition","*orderCondition"], 
     "NOW": ["orderCondition","*orderCondition"], 
     "MD5": ["orderCondition","*orderCondition"], 
     "SHA1": ["orderCondition","*orderCondition"], 
     "SHA256": ["orderCondition","*orderCondition"], 
     "SHA384": ["orderCondition","*orderCondition"], 
     "SHA512": ["orderCondition","*orderCondition"], 
     "COALESCE": ["orderCondition","*orderCondition"], 
     "IF": ["orderCondition","*orderCondition"], 
     "STRLANG": ["orderCondition","*orderCondition"], 
     "STRDT": ["orderCondition","*orderCondition"], 
     "SAMETERM": ["orderCondition","*orderCondition"], 
     "ISIRI": ["orderCondition","*orderCondition"], 
     "ISURI": ["orderCondition","*orderCondition"], 
     "ISBLANK": ["orderCondition","*orderCondition"], 
     "ISLITERAL": ["orderCondition","*orderCondition"], 
     "ISNUMERIC": ["orderCondition","*orderCondition"], 
     "SUBSTR": ["orderCondition","*orderCondition"], 
     "REPLACE": ["orderCondition","*orderCondition"], 
     "REGEX": ["orderCondition","*orderCondition"], 
     "EXISTS": ["orderCondition","*orderCondition"], 
     "NOT": ["orderCondition","*orderCondition"], 
     "IRI_REF": ["orderCondition","*orderCondition"], 
     "PNAME_LN": ["orderCondition","*orderCondition"], 
     "PNAME_NS": ["orderCondition","*orderCondition"], 
     "LIMIT": [], 
     "OFFSET": [], 
     "$": [], 
     "BINDINGS": [], 
     "}": []}, 
  "*usingClause" : {
     "USING": ["usingClause","*usingClause"], 
     "WHERE": []}, 
  "*var" : {
     "VAR1": ["var","*var"], 
     "VAR2": ["var","*var"], 
     "{": []}, 
  "*varOriRIref" : {
     "VAR1": ["varOriRIref","*varOriRIref"], 
     "VAR2": ["varOriRIref","*varOriRIref"], 
     "IRI_REF": ["varOriRIref","*varOriRIref"], 
     "PNAME_LN": ["varOriRIref","*varOriRIref"], 
     "PNAME_NS": ["varOriRIref","*varOriRIref"], 
     "ORDER": [], 
     "HAVING": [], 
     "GROUP": [], 
     "LIMIT": [], 
     "OFFSET": [], 
     "WHERE": [], 
     "{": [], 
     "FROM": [], 
     "$": [], 
     "BINDINGS": []}, 
  "+graphNode" : {
     "(": ["graphNode","*graphNode"], 
     "[": ["graphNode","*graphNode"], 
     "VAR1": ["graphNode","*graphNode"], 
     "VAR2": ["graphNode","*graphNode"], 
     "NIL": ["graphNode","*graphNode"], 
     "IRI_REF": ["graphNode","*graphNode"], 
     "TRUE": ["graphNode","*graphNode"], 
     "FALSE": ["graphNode","*graphNode"], 
     "BLANK_NODE_LABEL": ["graphNode","*graphNode"], 
     "ANON": ["graphNode","*graphNode"], 
     "PNAME_LN": ["graphNode","*graphNode"], 
     "PNAME_NS": ["graphNode","*graphNode"], 
     "STRING_LITERAL1": ["graphNode","*graphNode"], 
     "STRING_LITERAL2": ["graphNode","*graphNode"], 
     "STRING_LITERAL_LONG1": ["graphNode","*graphNode"], 
     "STRING_LITERAL_LONG2": ["graphNode","*graphNode"], 
     "INTEGER": ["graphNode","*graphNode"], 
     "DECIMAL": ["graphNode","*graphNode"], 
     "DOUBLE": ["graphNode","*graphNode"], 
     "INTEGER_POSITIVE": ["graphNode","*graphNode"], 
     "DECIMAL_POSITIVE": ["graphNode","*graphNode"], 
     "DOUBLE_POSITIVE": ["graphNode","*graphNode"], 
     "INTEGER_NEGATIVE": ["graphNode","*graphNode"], 
     "DECIMAL_NEGATIVE": ["graphNode","*graphNode"], 
     "DOUBLE_NEGATIVE": ["graphNode","*graphNode"]}, 
  "+groupCondition" : {
     "(": ["groupCondition","*groupCondition"], 
     "STR": ["groupCondition","*groupCondition"], 
     "LANG": ["groupCondition","*groupCondition"], 
     "LANGMATCHES": ["groupCondition","*groupCondition"], 
     "DATATYPE": ["groupCondition","*groupCondition"], 
     "BOUND": ["groupCondition","*groupCondition"], 
     "IRI": ["groupCondition","*groupCondition"], 
     "URI": ["groupCondition","*groupCondition"], 
     "BNODE": ["groupCondition","*groupCondition"], 
     "RAND": ["groupCondition","*groupCondition"], 
     "ABS": ["groupCondition","*groupCondition"], 
     "CEIL": ["groupCondition","*groupCondition"], 
     "FLOOR": ["groupCondition","*groupCondition"], 
     "ROUND": ["groupCondition","*groupCondition"], 
     "CONCAT": ["groupCondition","*groupCondition"], 
     "STRLEN": ["groupCondition","*groupCondition"], 
     "UCASE": ["groupCondition","*groupCondition"], 
     "LCASE": ["groupCondition","*groupCondition"], 
     "ENCODE_FOR_URI": ["groupCondition","*groupCondition"], 
     "CONTAINS": ["groupCondition","*groupCondition"], 
     "STRSTARTS": ["groupCondition","*groupCondition"], 
     "STRENDS": ["groupCondition","*groupCondition"], 
     "STRBEFORE": ["groupCondition","*groupCondition"], 
     "STRAFTER": ["groupCondition","*groupCondition"], 
     "YEAR": ["groupCondition","*groupCondition"], 
     "MONTH": ["groupCondition","*groupCondition"], 
     "DAY": ["groupCondition","*groupCondition"], 
     "HOURS": ["groupCondition","*groupCondition"], 
     "MINUTES": ["groupCondition","*groupCondition"], 
     "SECONDS": ["groupCondition","*groupCondition"], 
     "TIMEZONE": ["groupCondition","*groupCondition"], 
     "TZ": ["groupCondition","*groupCondition"], 
     "NOW": ["groupCondition","*groupCondition"], 
     "MD5": ["groupCondition","*groupCondition"], 
     "SHA1": ["groupCondition","*groupCondition"], 
     "SHA256": ["groupCondition","*groupCondition"], 
     "SHA384": ["groupCondition","*groupCondition"], 
     "SHA512": ["groupCondition","*groupCondition"], 
     "COALESCE": ["groupCondition","*groupCondition"], 
     "IF": ["groupCondition","*groupCondition"], 
     "STRLANG": ["groupCondition","*groupCondition"], 
     "STRDT": ["groupCondition","*groupCondition"], 
     "SAMETERM": ["groupCondition","*groupCondition"], 
     "ISIRI": ["groupCondition","*groupCondition"], 
     "ISURI": ["groupCondition","*groupCondition"], 
     "ISBLANK": ["groupCondition","*groupCondition"], 
     "ISLITERAL": ["groupCondition","*groupCondition"], 
     "ISNUMERIC": ["groupCondition","*groupCondition"], 
     "VAR1": ["groupCondition","*groupCondition"], 
     "VAR2": ["groupCondition","*groupCondition"], 
     "SUBSTR": ["groupCondition","*groupCondition"], 
     "REPLACE": ["groupCondition","*groupCondition"], 
     "REGEX": ["groupCondition","*groupCondition"], 
     "EXISTS": ["groupCondition","*groupCondition"], 
     "NOT": ["groupCondition","*groupCondition"], 
     "IRI_REF": ["groupCondition","*groupCondition"], 
     "PNAME_LN": ["groupCondition","*groupCondition"], 
     "PNAME_NS": ["groupCondition","*groupCondition"]}, 
  "+havingCondition" : {
     "(": ["havingCondition","*havingCondition"], 
     "STR": ["havingCondition","*havingCondition"], 
     "LANG": ["havingCondition","*havingCondition"], 
     "LANGMATCHES": ["havingCondition","*havingCondition"], 
     "DATATYPE": ["havingCondition","*havingCondition"], 
     "BOUND": ["havingCondition","*havingCondition"], 
     "IRI": ["havingCondition","*havingCondition"], 
     "URI": ["havingCondition","*havingCondition"], 
     "BNODE": ["havingCondition","*havingCondition"], 
     "RAND": ["havingCondition","*havingCondition"], 
     "ABS": ["havingCondition","*havingCondition"], 
     "CEIL": ["havingCondition","*havingCondition"], 
     "FLOOR": ["havingCondition","*havingCondition"], 
     "ROUND": ["havingCondition","*havingCondition"], 
     "CONCAT": ["havingCondition","*havingCondition"], 
     "STRLEN": ["havingCondition","*havingCondition"], 
     "UCASE": ["havingCondition","*havingCondition"], 
     "LCASE": ["havingCondition","*havingCondition"], 
     "ENCODE_FOR_URI": ["havingCondition","*havingCondition"], 
     "CONTAINS": ["havingCondition","*havingCondition"], 
     "STRSTARTS": ["havingCondition","*havingCondition"], 
     "STRENDS": ["havingCondition","*havingCondition"], 
     "STRBEFORE": ["havingCondition","*havingCondition"], 
     "STRAFTER": ["havingCondition","*havingCondition"], 
     "YEAR": ["havingCondition","*havingCondition"], 
     "MONTH": ["havingCondition","*havingCondition"], 
     "DAY": ["havingCondition","*havingCondition"], 
     "HOURS": ["havingCondition","*havingCondition"], 
     "MINUTES": ["havingCondition","*havingCondition"], 
     "SECONDS": ["havingCondition","*havingCondition"], 
     "TIMEZONE": ["havingCondition","*havingCondition"], 
     "TZ": ["havingCondition","*havingCondition"], 
     "NOW": ["havingCondition","*havingCondition"], 
     "MD5": ["havingCondition","*havingCondition"], 
     "SHA1": ["havingCondition","*havingCondition"], 
     "SHA256": ["havingCondition","*havingCondition"], 
     "SHA384": ["havingCondition","*havingCondition"], 
     "SHA512": ["havingCondition","*havingCondition"], 
     "COALESCE": ["havingCondition","*havingCondition"], 
     "IF": ["havingCondition","*havingCondition"], 
     "STRLANG": ["havingCondition","*havingCondition"], 
     "STRDT": ["havingCondition","*havingCondition"], 
     "SAMETERM": ["havingCondition","*havingCondition"], 
     "ISIRI": ["havingCondition","*havingCondition"], 
     "ISURI": ["havingCondition","*havingCondition"], 
     "ISBLANK": ["havingCondition","*havingCondition"], 
     "ISLITERAL": ["havingCondition","*havingCondition"], 
     "ISNUMERIC": ["havingCondition","*havingCondition"], 
     "SUBSTR": ["havingCondition","*havingCondition"], 
     "REPLACE": ["havingCondition","*havingCondition"], 
     "REGEX": ["havingCondition","*havingCondition"], 
     "EXISTS": ["havingCondition","*havingCondition"], 
     "NOT": ["havingCondition","*havingCondition"], 
     "IRI_REF": ["havingCondition","*havingCondition"], 
     "PNAME_LN": ["havingCondition","*havingCondition"], 
     "PNAME_NS": ["havingCondition","*havingCondition"]}, 
  "+or([var,[ (,expression,AS,var,)]])" : {
     "(": ["or([var,[ (,expression,AS,var,)]])","*or([var,[ (,expression,AS,var,)]])"], 
     "VAR1": ["or([var,[ (,expression,AS,var,)]])","*or([var,[ (,expression,AS,var,)]])"], 
     "VAR2": ["or([var,[ (,expression,AS,var,)]])","*or([var,[ (,expression,AS,var,)]])"]}, 
  "+orderCondition" : {
     "ASC": ["orderCondition","*orderCondition"], 
     "DESC": ["orderCondition","*orderCondition"], 
     "VAR1": ["orderCondition","*orderCondition"], 
     "VAR2": ["orderCondition","*orderCondition"], 
     "(": ["orderCondition","*orderCondition"], 
     "STR": ["orderCondition","*orderCondition"], 
     "LANG": ["orderCondition","*orderCondition"], 
     "LANGMATCHES": ["orderCondition","*orderCondition"], 
     "DATATYPE": ["orderCondition","*orderCondition"], 
     "BOUND": ["orderCondition","*orderCondition"], 
     "IRI": ["orderCondition","*orderCondition"], 
     "URI": ["orderCondition","*orderCondition"], 
     "BNODE": ["orderCondition","*orderCondition"], 
     "RAND": ["orderCondition","*orderCondition"], 
     "ABS": ["orderCondition","*orderCondition"], 
     "CEIL": ["orderCondition","*orderCondition"], 
     "FLOOR": ["orderCondition","*orderCondition"], 
     "ROUND": ["orderCondition","*orderCondition"], 
     "CONCAT": ["orderCondition","*orderCondition"], 
     "STRLEN": ["orderCondition","*orderCondition"], 
     "UCASE": ["orderCondition","*orderCondition"], 
     "LCASE": ["orderCondition","*orderCondition"], 
     "ENCODE_FOR_URI": ["orderCondition","*orderCondition"], 
     "CONTAINS": ["orderCondition","*orderCondition"], 
     "STRSTARTS": ["orderCondition","*orderCondition"], 
     "STRENDS": ["orderCondition","*orderCondition"], 
     "STRBEFORE": ["orderCondition","*orderCondition"], 
     "STRAFTER": ["orderCondition","*orderCondition"], 
     "YEAR": ["orderCondition","*orderCondition"], 
     "MONTH": ["orderCondition","*orderCondition"], 
     "DAY": ["orderCondition","*orderCondition"], 
     "HOURS": ["orderCondition","*orderCondition"], 
     "MINUTES": ["orderCondition","*orderCondition"], 
     "SECONDS": ["orderCondition","*orderCondition"], 
     "TIMEZONE": ["orderCondition","*orderCondition"], 
     "TZ": ["orderCondition","*orderCondition"], 
     "NOW": ["orderCondition","*orderCondition"], 
     "MD5": ["orderCondition","*orderCondition"], 
     "SHA1": ["orderCondition","*orderCondition"], 
     "SHA256": ["orderCondition","*orderCondition"], 
     "SHA384": ["orderCondition","*orderCondition"], 
     "SHA512": ["orderCondition","*orderCondition"], 
     "COALESCE": ["orderCondition","*orderCondition"], 
     "IF": ["orderCondition","*orderCondition"], 
     "STRLANG": ["orderCondition","*orderCondition"], 
     "STRDT": ["orderCondition","*orderCondition"], 
     "SAMETERM": ["orderCondition","*orderCondition"], 
     "ISIRI": ["orderCondition","*orderCondition"], 
     "ISURI": ["orderCondition","*orderCondition"], 
     "ISBLANK": ["orderCondition","*orderCondition"], 
     "ISLITERAL": ["orderCondition","*orderCondition"], 
     "ISNUMERIC": ["orderCondition","*orderCondition"], 
     "SUBSTR": ["orderCondition","*orderCondition"], 
     "REPLACE": ["orderCondition","*orderCondition"], 
     "REGEX": ["orderCondition","*orderCondition"], 
     "EXISTS": ["orderCondition","*orderCondition"], 
     "NOT": ["orderCondition","*orderCondition"], 
     "IRI_REF": ["orderCondition","*orderCondition"], 
     "PNAME_LN": ["orderCondition","*orderCondition"], 
     "PNAME_NS": ["orderCondition","*orderCondition"]}, 
  "+varOriRIref" : {
     "VAR1": ["varOriRIref","*varOriRIref"], 
     "VAR2": ["varOriRIref","*varOriRIref"], 
     "IRI_REF": ["varOriRIref","*varOriRIref"], 
     "PNAME_LN": ["varOriRIref","*varOriRIref"], 
     "PNAME_NS": ["varOriRIref","*varOriRIref"]}, 
  "?." : {
     ".": ["."], 
     "VAR1": [], 
     "VAR2": [], 
     "NIL": [], 
     "(": [], 
     "[": [], 
     "IRI_REF": [], 
     "TRUE": [], 
     "FALSE": [], 
     "BLANK_NODE_LABEL": [], 
     "ANON": [], 
     "PNAME_LN": [], 
     "PNAME_NS": [], 
     "STRING_LITERAL1": [], 
     "STRING_LITERAL2": [], 
     "STRING_LITERAL_LONG1": [], 
     "STRING_LITERAL_LONG2": [], 
     "INTEGER": [], 
     "DECIMAL": [], 
     "DOUBLE": [], 
     "INTEGER_POSITIVE": [], 
     "DECIMAL_POSITIVE": [], 
     "DOUBLE_POSITIVE": [], 
     "INTEGER_NEGATIVE": [], 
     "DECIMAL_NEGATIVE": [], 
     "DOUBLE_NEGATIVE": [], 
     "GRAPH": [], 
     "{": [], 
     "OPTIONAL": [], 
     "MINUS": [], 
     "SERVICE": [], 
     "FILTER": [], 
     "BIND": [], 
     "}": []}, 
  "?DISTINCT" : {
     "DISTINCT": ["DISTINCT"], 
     "!": [], 
     "+": [], 
     "-": [], 
     "VAR1": [], 
     "VAR2": [], 
     "(": [], 
     "STR": [], 
     "LANG": [], 
     "LANGMATCHES": [], 
     "DATATYPE": [], 
     "BOUND": [], 
     "IRI": [], 
     "URI": [], 
     "BNODE": [], 
     "RAND": [], 
     "ABS": [], 
     "CEIL": [], 
     "FLOOR": [], 
     "ROUND": [], 
     "CONCAT": [], 
     "STRLEN": [], 
     "UCASE": [], 
     "LCASE": [], 
     "ENCODE_FOR_URI": [], 
     "CONTAINS": [], 
     "STRSTARTS": [], 
     "STRENDS": [], 
     "STRBEFORE": [], 
     "STRAFTER": [], 
     "YEAR": [], 
     "MONTH": [], 
     "DAY": [], 
     "HOURS": [], 
     "MINUTES": [], 
     "SECONDS": [], 
     "TIMEZONE": [], 
     "TZ": [], 
     "NOW": [], 
     "MD5": [], 
     "SHA1": [], 
     "SHA256": [], 
     "SHA384": [], 
     "SHA512": [], 
     "COALESCE": [], 
     "IF": [], 
     "STRLANG": [], 
     "STRDT": [], 
     "SAMETERM": [], 
     "ISIRI": [], 
     "ISURI": [], 
     "ISBLANK": [], 
     "ISLITERAL": [], 
     "ISNUMERIC": [], 
     "TRUE": [], 
     "FALSE": [], 
     "COUNT": [], 
     "SUM": [], 
     "MIN": [], 
     "MAX": [], 
     "AVG": [], 
     "SAMPLE": [], 
     "GROUP_CONCAT": [], 
     "SUBSTR": [], 
     "REPLACE": [], 
     "REGEX": [], 
     "EXISTS": [], 
     "NOT": [], 
     "IRI_REF": [], 
     "STRING_LITERAL1": [], 
     "STRING_LITERAL2": [], 
     "STRING_LITERAL_LONG1": [], 
     "STRING_LITERAL_LONG2": [], 
     "INTEGER": [], 
     "DECIMAL": [], 
     "DOUBLE": [], 
     "INTEGER_POSITIVE": [], 
     "DECIMAL_POSITIVE": [], 
     "DOUBLE_POSITIVE": [], 
     "INTEGER_NEGATIVE": [], 
     "DECIMAL_NEGATIVE": [], 
     "DOUBLE_NEGATIVE": [], 
     "PNAME_LN": [], 
     "PNAME_NS": [], 
     "*": []}, 
  "?GRAPH" : {
     "GRAPH": ["GRAPH"], 
     "IRI_REF": [], 
     "PNAME_LN": [], 
     "PNAME_NS": []}, 
  "?SILENT" : {
     "SILENT": ["SILENT"], 
     "IRI_REF": [], 
     "PNAME_LN": [], 
     "PNAME_NS": [], 
     "GRAPH": [], 
     "DEFAULT": [], 
     "NAMED": [], 
     "ALL": [], 
     "VAR1": [], 
     "VAR2": []}, 
  "?WHERE" : {
     "WHERE": ["WHERE"], 
     "{": []}, 
  "?[,,expression]" : {
     ",": ["[,,expression]"], 
     ")": []}, 
  "?[.,?constructTriples]" : {
     ".": ["[.,?constructTriples]"], 
     "}": []}, 
  "?[.,?triplesBlock]" : {
     ".": ["[.,?triplesBlock]"], 
     "{": [], 
     "OPTIONAL": [], 
     "MINUS": [], 
     "GRAPH": [], 
     "SERVICE": [], 
     "FILTER": [], 
     "BIND": [], 
     "}": []}, 
  "?[.,?triplesTemplate]" : {
     ".": ["[.,?triplesTemplate]"], 
     "}": [], 
     "GRAPH": []}, 
  "?[;,SEPARATOR,=,string]" : {
     ";": ["[;,SEPARATOR,=,string]"], 
     ")": []}, 
  "?[;,update]" : {
     ";": ["[;,update]"]}, 
  "?[AS,var]" : {
     "AS": ["[AS,var]"], 
     ")": []}, 
  "?[BINDINGS,*var,{,*or([[ (,*bindingValue,)],NIL]),}]" : {
     "BINDINGS": ["[BINDINGS,*var,{,*or([[ (,*bindingValue,)],NIL]),}]"], 
     "$": []}, 
  "?[INTO,graphRef]" : {
     "INTO": ["[INTO,graphRef]"], 
     ";": []}, 
  "?[WITH,iRIref]" : {
     "WITH": ["[WITH,iRIref]"], 
     "DELETE": [], 
     "INSERT": []}, 
  "?[or([verbpath,verbSimple]),objectList]" : {
     "VAR1": ["[or([verbpath,verbSimple]),objectList]"], 
     "VAR2": ["[or([verbpath,verbSimple]),objectList]"], 
     "^": ["[or([verbpath,verbSimple]),objectList]"], 
     "a": ["[or([verbpath,verbSimple]),objectList]"], 
     "!": ["[or([verbpath,verbSimple]),objectList]"], 
     "(": ["[or([verbpath,verbSimple]),objectList]"], 
     "IRI_REF": ["[or([verbpath,verbSimple]),objectList]"], 
     "PNAME_LN": ["[or([verbpath,verbSimple]),objectList]"], 
     "PNAME_NS": ["[or([verbpath,verbSimple]),objectList]"], 
     ";": [], 
     ".": [], 
     "{": [], 
     "OPTIONAL": [], 
     "MINUS": [], 
     "GRAPH": [], 
     "SERVICE": [], 
     "FILTER": [], 
     "BIND": [], 
     "}": []}, 
  "?[pathOneInPropertySet,*[|,pathOneInPropertySet]]" : {
     "a": ["[pathOneInPropertySet,*[|,pathOneInPropertySet]]"], 
     "^": ["[pathOneInPropertySet,*[|,pathOneInPropertySet]]"], 
     "IRI_REF": ["[pathOneInPropertySet,*[|,pathOneInPropertySet]]"], 
     "PNAME_LN": ["[pathOneInPropertySet,*[|,pathOneInPropertySet]]"], 
     "PNAME_NS": ["[pathOneInPropertySet,*[|,pathOneInPropertySet]]"], 
     ")": []}, 
  "?[update1,?[;,update]]" : {
     "LOAD": ["[update1,?[;,update]]"], 
     "CLEAR": ["[update1,?[;,update]]"], 
     "DROP": ["[update1,?[;,update]]"], 
     "ADD": ["[update1,?[;,update]]"], 
     "MOVE": ["[update1,?[;,update]]"], 
     "COPY": ["[update1,?[;,update]]"], 
     "CREATE": ["[update1,?[;,update]]"], 
     "INSERT DATA": ["[update1,?[;,update]]"], 
     "DELETE DATA": ["[update1,?[;,update]]"], 
     "DELETE WHERE": ["[update1,?[;,update]]"], 
     "WITH": ["[update1,?[;,update]]"], 
     "DELETE": ["[update1,?[;,update]]"], 
     "INSERT": ["[update1,?[;,update]]"]}, 
  "?[verb,objectList]" : {
     "a": ["[verb,objectList]"], 
     "VAR1": ["[verb,objectList]"], 
     "VAR2": ["[verb,objectList]"], 
     "IRI_REF": ["[verb,objectList]"], 
     "PNAME_LN": ["[verb,objectList]"], 
     "PNAME_NS": ["[verb,objectList]"], 
     ";": [], 
     ".": [], 
     "]": [], 
     "}": [], 
     "GRAPH": [], 
     "{": [], 
     "OPTIONAL": [], 
     "MINUS": [], 
     "SERVICE": [], 
     "FILTER": [], 
     "BIND": []}, 
  "?argList" : {
     "NIL": ["argList"], 
     "(": ["argList"], 
     "AS": [], 
     ")": [], 
     ",": [], 
     "||": [], 
     "&&": [], 
     "=": [], 
     "!=": [], 
     "<": [], 
     ">": [], 
     "<=": [], 
     ">=": [], 
     "IN": [], 
     "NOT": [], 
     "+": [], 
     "-": [], 
     "INTEGER_POSITIVE": [], 
     "DECIMAL_POSITIVE": [], 
     "DOUBLE_POSITIVE": [], 
     "INTEGER_NEGATIVE": [], 
     "DECIMAL_NEGATIVE": [], 
     "DOUBLE_NEGATIVE": [], 
     "*": [], 
     "/": [], 
     ";": []}, 
  "?constructTriples" : {
     "VAR1": ["constructTriples"], 
     "VAR2": ["constructTriples"], 
     "NIL": ["constructTriples"], 
     "(": ["constructTriples"], 
     "[": ["constructTriples"], 
     "IRI_REF": ["constructTriples"], 
     "TRUE": ["constructTriples"], 
     "FALSE": ["constructTriples"], 
     "BLANK_NODE_LABEL": ["constructTriples"], 
     "ANON": ["constructTriples"], 
     "PNAME_LN": ["constructTriples"], 
     "PNAME_NS": ["constructTriples"], 
     "STRING_LITERAL1": ["constructTriples"], 
     "STRING_LITERAL2": ["constructTriples"], 
     "STRING_LITERAL_LONG1": ["constructTriples"], 
     "STRING_LITERAL_LONG2": ["constructTriples"], 
     "INTEGER": ["constructTriples"], 
     "DECIMAL": ["constructTriples"], 
     "DOUBLE": ["constructTriples"], 
     "INTEGER_POSITIVE": ["constructTriples"], 
     "DECIMAL_POSITIVE": ["constructTriples"], 
     "DOUBLE_POSITIVE": ["constructTriples"], 
     "INTEGER_NEGATIVE": ["constructTriples"], 
     "DECIMAL_NEGATIVE": ["constructTriples"], 
     "DOUBLE_NEGATIVE": ["constructTriples"], 
     "}": []}, 
  "?groupClause" : {
     "GROUP": ["groupClause"], 
     "LIMIT": [], 
     "OFFSET": [], 
     "ORDER": [], 
     "HAVING": [], 
     "$": [], 
     "BINDINGS": [], 
     "}": []}, 
  "?havingClause" : {
     "HAVING": ["havingClause"], 
     "LIMIT": [], 
     "OFFSET": [], 
     "ORDER": [], 
     "$": [], 
     "BINDINGS": [], 
     "}": []}, 
  "?insertClause" : {
     "INSERT": ["insertClause"], 
     "WHERE": [], 
     "USING": []}, 
  "?limitClause" : {
     "LIMIT": ["limitClause"], 
     "$": [], 
     "BINDINGS": [], 
     "}": []}, 
  "?limitoffsetClauses" : {
     "LIMIT": ["limitoffsetClauses"], 
     "OFFSET": ["limitoffsetClauses"], 
     "$": [], 
     "BINDINGS": [], 
     "}": []}, 
  "?offsetClause" : {
     "OFFSET": ["offsetClause"], 
     "$": [], 
     "BINDINGS": [], 
     "}": []}, 
  "?or([DISTINCT,REDUCED])" : {
     "DISTINCT": ["or([DISTINCT,REDUCED])"], 
     "REDUCED": ["or([DISTINCT,REDUCED])"], 
     "*": [], 
     "(": [], 
     "VAR1": [], 
     "VAR2": []}, 
  "?or([LANGTAG,[^^,iRIref]])" : {
     "LANGTAG": ["or([LANGTAG,[^^,iRIref]])"], 
     "^^": ["or([LANGTAG,[^^,iRIref]])"], 
     "UNDEF": [], 
     "IRI_REF": [], 
     "TRUE": [], 
     "FALSE": [], 
     "PNAME_LN": [], 
     "PNAME_NS": [], 
     "STRING_LITERAL1": [], 
     "STRING_LITERAL2": [], 
     "STRING_LITERAL_LONG1": [], 
     "STRING_LITERAL_LONG2": [], 
     "INTEGER": [], 
     "DECIMAL": [], 
     "DOUBLE": [], 
     "INTEGER_POSITIVE": [], 
     "DECIMAL_POSITIVE": [], 
     "DOUBLE_POSITIVE": [], 
     "INTEGER_NEGATIVE": [], 
     "DECIMAL_NEGATIVE": [], 
     "DOUBLE_NEGATIVE": [], 
     "a": [], 
     "VAR1": [], 
     "VAR2": [], 
     "^": [], 
     "!": [], 
     "(": [], 
     ".": [], 
     ";": [], 
     ",": [], 
     "AS": [], 
     ")": [], 
     "||": [], 
     "&&": [], 
     "=": [], 
     "!=": [], 
     "<": [], 
     ">": [], 
     "<=": [], 
     ">=": [], 
     "IN": [], 
     "NOT": [], 
     "+": [], 
     "-": [], 
     "*": [], 
     "/": [], 
     "[": [], 
     "NIL": [], 
     "BLANK_NODE_LABEL": [], 
     "ANON": [], 
     "]": [], 
     "}": [], 
     "GRAPH": [], 
     "{": [], 
     "OPTIONAL": [], 
     "MINUS": [], 
     "SERVICE": [], 
     "FILTER": [], 
     "BIND": []}, 
  "?or([[*,unaryexpression],[/,unaryexpression]])" : {
     "*": ["or([[*,unaryexpression],[/,unaryexpression]])"], 
     "/": ["or([[*,unaryexpression],[/,unaryexpression]])"], 
     "+": [], 
     "-": [], 
     "INTEGER_POSITIVE": [], 
     "DECIMAL_POSITIVE": [], 
     "DOUBLE_POSITIVE": [], 
     "INTEGER_NEGATIVE": [], 
     "DECIMAL_NEGATIVE": [], 
     "DOUBLE_NEGATIVE": [], 
     "AS": [], 
     ")": [], 
     ",": [], 
     "||": [], 
     "&&": [], 
     "=": [], 
     "!=": [], 
     "<": [], 
     ">": [], 
     "<=": [], 
     ">=": [], 
     "IN": [], 
     "NOT": [], 
     ";": []}, 
  "?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])" : {
     "=": ["or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "!=": ["or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "<": ["or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     ">": ["or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "<=": ["or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     ">=": ["or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "IN": ["or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "NOT": ["or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "AS": [], 
     ")": [], 
     ",": [], 
     "||": [], 
     "&&": [], 
     ";": []}, 
  "?orderClause" : {
     "ORDER": ["orderClause"], 
     "LIMIT": [], 
     "OFFSET": [], 
     "$": [], 
     "BINDINGS": [], 
     "}": []}, 
  "?pathMod" : {
     "*": ["pathMod"], 
     "?": ["pathMod"], 
     "+": ["pathMod"], 
     "{": ["pathMod"], 
     "|": [], 
     "/": [], 
     ")": [], 
     "(": [], 
     "[": [], 
     "VAR1": [], 
     "VAR2": [], 
     "NIL": [], 
     "IRI_REF": [], 
     "TRUE": [], 
     "FALSE": [], 
     "BLANK_NODE_LABEL": [], 
     "ANON": [], 
     "PNAME_LN": [], 
     "PNAME_NS": [], 
     "STRING_LITERAL1": [], 
     "STRING_LITERAL2": [], 
     "STRING_LITERAL_LONG1": [], 
     "STRING_LITERAL_LONG2": [], 
     "INTEGER": [], 
     "DECIMAL": [], 
     "DOUBLE": [], 
     "INTEGER_POSITIVE": [], 
     "DECIMAL_POSITIVE": [], 
     "DOUBLE_POSITIVE": [], 
     "INTEGER_NEGATIVE": [], 
     "DECIMAL_NEGATIVE": [], 
     "DOUBLE_NEGATIVE": []}, 
  "?propertyListNotEmpty" : {
     "a": ["propertyListNotEmpty"], 
     "VAR1": ["propertyListNotEmpty"], 
     "VAR2": ["propertyListNotEmpty"], 
     "IRI_REF": ["propertyListNotEmpty"], 
     "PNAME_LN": ["propertyListNotEmpty"], 
     "PNAME_NS": ["propertyListNotEmpty"], 
     ".": [], 
     "}": [], 
     "GRAPH": [], 
     "{": [], 
     "OPTIONAL": [], 
     "MINUS": [], 
     "SERVICE": [], 
     "FILTER": [], 
     "BIND": []}, 
  "?triplesBlock" : {
     "VAR1": ["triplesBlock"], 
     "VAR2": ["triplesBlock"], 
     "NIL": ["triplesBlock"], 
     "(": ["triplesBlock"], 
     "[": ["triplesBlock"], 
     "IRI_REF": ["triplesBlock"], 
     "TRUE": ["triplesBlock"], 
     "FALSE": ["triplesBlock"], 
     "BLANK_NODE_LABEL": ["triplesBlock"], 
     "ANON": ["triplesBlock"], 
     "PNAME_LN": ["triplesBlock"], 
     "PNAME_NS": ["triplesBlock"], 
     "STRING_LITERAL1": ["triplesBlock"], 
     "STRING_LITERAL2": ["triplesBlock"], 
     "STRING_LITERAL_LONG1": ["triplesBlock"], 
     "STRING_LITERAL_LONG2": ["triplesBlock"], 
     "INTEGER": ["triplesBlock"], 
     "DECIMAL": ["triplesBlock"], 
     "DOUBLE": ["triplesBlock"], 
     "INTEGER_POSITIVE": ["triplesBlock"], 
     "DECIMAL_POSITIVE": ["triplesBlock"], 
     "DOUBLE_POSITIVE": ["triplesBlock"], 
     "INTEGER_NEGATIVE": ["triplesBlock"], 
     "DECIMAL_NEGATIVE": ["triplesBlock"], 
     "DOUBLE_NEGATIVE": ["triplesBlock"], 
     "{": [], 
     "OPTIONAL": [], 
     "MINUS": [], 
     "GRAPH": [], 
     "SERVICE": [], 
     "FILTER": [], 
     "BIND": [], 
     "}": []}, 
  "?triplesTemplate" : {
     "VAR1": ["triplesTemplate"], 
     "VAR2": ["triplesTemplate"], 
     "NIL": ["triplesTemplate"], 
     "(": ["triplesTemplate"], 
     "[": ["triplesTemplate"], 
     "IRI_REF": ["triplesTemplate"], 
     "TRUE": ["triplesTemplate"], 
     "FALSE": ["triplesTemplate"], 
     "BLANK_NODE_LABEL": ["triplesTemplate"], 
     "ANON": ["triplesTemplate"], 
     "PNAME_LN": ["triplesTemplate"], 
     "PNAME_NS": ["triplesTemplate"], 
     "STRING_LITERAL1": ["triplesTemplate"], 
     "STRING_LITERAL2": ["triplesTemplate"], 
     "STRING_LITERAL_LONG1": ["triplesTemplate"], 
     "STRING_LITERAL_LONG2": ["triplesTemplate"], 
     "INTEGER": ["triplesTemplate"], 
     "DECIMAL": ["triplesTemplate"], 
     "DOUBLE": ["triplesTemplate"], 
     "INTEGER_POSITIVE": ["triplesTemplate"], 
     "DECIMAL_POSITIVE": ["triplesTemplate"], 
     "DOUBLE_POSITIVE": ["triplesTemplate"], 
     "INTEGER_NEGATIVE": ["triplesTemplate"], 
     "DECIMAL_NEGATIVE": ["triplesTemplate"], 
     "DOUBLE_NEGATIVE": ["triplesTemplate"], 
     "}": [], 
     "GRAPH": []}, 
  "?whereClause" : {
     "WHERE": ["whereClause"], 
     "{": ["whereClause"], 
     "ORDER": [], 
     "HAVING": [], 
     "GROUP": [], 
     "LIMIT": [], 
     "OFFSET": [], 
     "$": [], 
     "BINDINGS": []}, 
  "[ (,*bindingValue,)]" : {
     "(": ["(","*bindingValue",")"]}, 
  "[ (,expression,)]" : {
     "(": ["(","expression",")"]}, 
  "[ (,expression,AS,var,)]" : {
     "(": ["(","expression","AS","var",")"]}, 
  "[!=,numericexpression]" : {
     "!=": ["!=","numericexpression"]}, 
  "[&&,valueLogical]" : {
     "&&": ["&&","valueLogical"]}, 
  "[*,unaryexpression]" : {
     "*": ["*","unaryexpression"]}, 
  "[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]" : {
     "WHERE": ["*datasetClause","WHERE","{","?triplesTemplate","}","solutionModifier"], 
     "FROM": ["*datasetClause","WHERE","{","?triplesTemplate","}","solutionModifier"]}, 
  "[+,multiplicativeexpression]" : {
     "+": ["+","multiplicativeexpression"]}, 
  "[,,expression]" : {
     ",": [",","expression"]}, 
  "[,,integer,}]" : {
     ",": [",","integer","}"]}, 
  "[,,object]" : {
     ",": [",","object"]}, 
  "[,,or([},[integer,}]])]" : {
     ",": [",","or([},[integer,}]])"]}, 
  "[-,multiplicativeexpression]" : {
     "-": ["-","multiplicativeexpression"]}, 
  "[.,?constructTriples]" : {
     ".": [".","?constructTriples"]}, 
  "[.,?triplesBlock]" : {
     ".": [".","?triplesBlock"]}, 
  "[.,?triplesTemplate]" : {
     ".": [".","?triplesTemplate"]}, 
  "[/,pathEltOrInverse]" : {
     "/": ["/","pathEltOrInverse"]}, 
  "[/,unaryexpression]" : {
     "/": ["/","unaryexpression"]}, 
  "[;,?[or([verbpath,verbSimple]),objectList]]" : {
     ";": [";","?[or([verbpath,verbSimple]),objectList]"]}, 
  "[;,?[verb,objectList]]" : {
     ";": [";","?[verb,objectList]"]}, 
  "[;,SEPARATOR,=,string]" : {
     ";": [";","SEPARATOR","=","string"]}, 
  "[;,update]" : {
     ";": [";","update"]}, 
  "[<,numericexpression]" : {
     "<": ["<","numericexpression"]}, 
  "[<=,numericexpression]" : {
     "<=": ["<=","numericexpression"]}, 
  "[=,numericexpression]" : {
     "=": ["=","numericexpression"]}, 
  "[>,numericexpression]" : {
     ">": [">","numericexpression"]}, 
  "[>=,numericexpression]" : {
     ">=": [">=","numericexpression"]}, 
  "[AS,var]" : {
     "AS": ["AS","var"]}, 
  "[BINDINGS,*var,{,*or([[ (,*bindingValue,)],NIL]),}]" : {
     "BINDINGS": ["BINDINGS","*var","{","*or([[ (,*bindingValue,)],NIL])","}"]}, 
  "[IN,expressionList]" : {
     "IN": ["IN","expressionList"]}, 
  "[INTO,graphRef]" : {
     "INTO": ["INTO","graphRef"]}, 
  "[NAMED,iRIref]" : {
     "NAMED": ["NAMED","iRIref"]}, 
  "[NOT,IN,expressionList]" : {
     "NOT": ["NOT","IN","expressionList"]}, 
  "[UNION,groupGraphPattern]" : {
     "UNION": ["UNION","groupGraphPattern"]}, 
  "[WITH,iRIref]" : {
     "WITH": ["WITH","iRIref"]}, 
  "[^^,iRIref]" : {
     "^^": ["^^","iRIref"]}, 
  "[constructTemplate,*datasetClause,whereClause,solutionModifier]" : {
     "{": ["constructTemplate","*datasetClause","whereClause","solutionModifier"]}, 
  "[deleteClause,?insertClause]" : {
     "DELETE": ["deleteClause","?insertClause"]}, 
  "[graphPatternNotTriples,?.,?triplesBlock]" : {
     "{": ["graphPatternNotTriples","?.","?triplesBlock"], 
     "OPTIONAL": ["graphPatternNotTriples","?.","?triplesBlock"], 
     "MINUS": ["graphPatternNotTriples","?.","?triplesBlock"], 
     "GRAPH": ["graphPatternNotTriples","?.","?triplesBlock"], 
     "SERVICE": ["graphPatternNotTriples","?.","?triplesBlock"], 
     "FILTER": ["graphPatternNotTriples","?.","?triplesBlock"], 
     "BIND": ["graphPatternNotTriples","?.","?triplesBlock"]}, 
  "[integer,or([[,,or([},[integer,}]])],}])]" : {
     "INTEGER": ["integer","or([[,,or([},[integer,}]])],}])"]}, 
  "[integer,}]" : {
     "INTEGER": ["integer","}"]}, 
  "[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]" : {
     "INTEGER_POSITIVE": ["or([numericLiteralPositive,numericLiteralNegative])","?or([[*,unaryexpression],[/,unaryexpression]])"], 
     "DECIMAL_POSITIVE": ["or([numericLiteralPositive,numericLiteralNegative])","?or([[*,unaryexpression],[/,unaryexpression]])"], 
     "DOUBLE_POSITIVE": ["or([numericLiteralPositive,numericLiteralNegative])","?or([[*,unaryexpression],[/,unaryexpression]])"], 
     "INTEGER_NEGATIVE": ["or([numericLiteralPositive,numericLiteralNegative])","?or([[*,unaryexpression],[/,unaryexpression]])"], 
     "DECIMAL_NEGATIVE": ["or([numericLiteralPositive,numericLiteralNegative])","?or([[*,unaryexpression],[/,unaryexpression]])"], 
     "DOUBLE_NEGATIVE": ["or([numericLiteralPositive,numericLiteralNegative])","?or([[*,unaryexpression],[/,unaryexpression]])"]}, 
  "[or([verbpath,verbSimple]),objectList]" : {
     "VAR1": ["or([verbpath,verbSimple])","objectList"], 
     "VAR2": ["or([verbpath,verbSimple])","objectList"], 
     "^": ["or([verbpath,verbSimple])","objectList"], 
     "a": ["or([verbpath,verbSimple])","objectList"], 
     "!": ["or([verbpath,verbSimple])","objectList"], 
     "(": ["or([verbpath,verbSimple])","objectList"], 
     "IRI_REF": ["or([verbpath,verbSimple])","objectList"], 
     "PNAME_LN": ["or([verbpath,verbSimple])","objectList"], 
     "PNAME_NS": ["or([verbpath,verbSimple])","objectList"]}, 
  "[pathOneInPropertySet,*[|,pathOneInPropertySet]]" : {
     "a": ["pathOneInPropertySet","*[|,pathOneInPropertySet]"], 
     "^": ["pathOneInPropertySet","*[|,pathOneInPropertySet]"], 
     "IRI_REF": ["pathOneInPropertySet","*[|,pathOneInPropertySet]"], 
     "PNAME_LN": ["pathOneInPropertySet","*[|,pathOneInPropertySet]"], 
     "PNAME_NS": ["pathOneInPropertySet","*[|,pathOneInPropertySet]"]}, 
  "[quadsNotTriples,?.,?triplesTemplate]" : {
     "GRAPH": ["quadsNotTriples","?.","?triplesTemplate"]}, 
  "[update1,?[;,update]]" : {
     "LOAD": ["update1","?[;,update]"], 
     "CLEAR": ["update1","?[;,update]"], 
     "DROP": ["update1","?[;,update]"], 
     "ADD": ["update1","?[;,update]"], 
     "MOVE": ["update1","?[;,update]"], 
     "COPY": ["update1","?[;,update]"], 
     "CREATE": ["update1","?[;,update]"], 
     "INSERT DATA": ["update1","?[;,update]"], 
     "DELETE DATA": ["update1","?[;,update]"], 
     "DELETE WHERE": ["update1","?[;,update]"], 
     "WITH": ["update1","?[;,update]"], 
     "DELETE": ["update1","?[;,update]"], 
     "INSERT": ["update1","?[;,update]"]}, 
  "[verb,objectList]" : {
     "a": ["verb","objectList"], 
     "VAR1": ["verb","objectList"], 
     "VAR2": ["verb","objectList"], 
     "IRI_REF": ["verb","objectList"], 
     "PNAME_LN": ["verb","objectList"], 
     "PNAME_NS": ["verb","objectList"]}, 
  "[|,pathOneInPropertySet]" : {
     "|": ["|","pathOneInPropertySet"]}, 
  "[|,pathSequence]" : {
     "|": ["|","pathSequence"]}, 
  "[||,conditionalAndexpression]" : {
     "||": ["||","conditionalAndexpression"]}, 
  "add" : {
     "ADD": ["ADD","?SILENT","graphOrDefault","TO","graphOrDefault"]}, 
  "additiveexpression" : {
     "!": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "+": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "-": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "VAR1": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "VAR2": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "(": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "STR": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "LANG": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "LANGMATCHES": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "DATATYPE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "BOUND": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "IRI": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "URI": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "BNODE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "RAND": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "ABS": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "CEIL": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "FLOOR": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "ROUND": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "CONCAT": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "STRLEN": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "UCASE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "LCASE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "ENCODE_FOR_URI": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "CONTAINS": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "STRSTARTS": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "STRENDS": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "STRBEFORE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "STRAFTER": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "YEAR": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "MONTH": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "DAY": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "HOURS": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "MINUTES": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "SECONDS": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "TIMEZONE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "TZ": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "NOW": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "MD5": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "SHA1": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "SHA256": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "SHA384": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "SHA512": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "COALESCE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "IF": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "STRLANG": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "STRDT": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "SAMETERM": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "ISIRI": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "ISURI": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "ISBLANK": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "ISLITERAL": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "ISNUMERIC": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "TRUE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "FALSE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "COUNT": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "SUM": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "MIN": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "MAX": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "AVG": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "SAMPLE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "GROUP_CONCAT": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "SUBSTR": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "REPLACE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "REGEX": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "EXISTS": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "NOT": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "IRI_REF": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "STRING_LITERAL1": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "STRING_LITERAL2": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "STRING_LITERAL_LONG1": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "STRING_LITERAL_LONG2": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "INTEGER": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "DECIMAL": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "DOUBLE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "INTEGER_POSITIVE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "DECIMAL_POSITIVE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "DOUBLE_POSITIVE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "INTEGER_NEGATIVE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "DECIMAL_NEGATIVE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "DOUBLE_NEGATIVE": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "PNAME_LN": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"], 
     "PNAME_NS": ["multiplicativeexpression","*or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])"]}, 
  "aggregate" : {
     "COUNT": ["COUNT","(","?DISTINCT","or([*,expression])",")"], 
     "SUM": ["SUM","(","?DISTINCT","expression",")"], 
     "MIN": ["MIN","(","?DISTINCT","expression",")"], 
     "MAX": ["MAX","(","?DISTINCT","expression",")"], 
     "AVG": ["AVG","(","?DISTINCT","expression",")"], 
     "SAMPLE": ["SAMPLE","(","?DISTINCT","expression",")"], 
     "GROUP_CONCAT": ["GROUP_CONCAT","(","?DISTINCT","expression","?[;,SEPARATOR,=,string]",")"]}, 
  "argList" : {
     "NIL": ["NIL"], 
     "(": ["(","?DISTINCT","expression","*[,,expression]",")"]}, 
  "askquery" : {
     "ASK": ["ASK","*datasetClause","whereClause","solutionModifier"]}, 
  "baseDecl" : {
     "BASE": ["BASE","IRI_REF"]}, 
  "bind" : {
     "BIND": ["BIND","(","expression","AS","var",")"]}, 
  "bindingValue" : {
     "IRI_REF": ["iRIref"], 
     "PNAME_LN": ["iRIref"], 
     "PNAME_NS": ["iRIref"], 
     "STRING_LITERAL1": ["rDFLiteral"], 
     "STRING_LITERAL2": ["rDFLiteral"], 
     "STRING_LITERAL_LONG1": ["rDFLiteral"], 
     "STRING_LITERAL_LONG2": ["rDFLiteral"], 
     "INTEGER": ["numericLiteral"], 
     "DECIMAL": ["numericLiteral"], 
     "DOUBLE": ["numericLiteral"], 
     "INTEGER_POSITIVE": ["numericLiteral"], 
     "DECIMAL_POSITIVE": ["numericLiteral"], 
     "DOUBLE_POSITIVE": ["numericLiteral"], 
     "INTEGER_NEGATIVE": ["numericLiteral"], 
     "DECIMAL_NEGATIVE": ["numericLiteral"], 
     "DOUBLE_NEGATIVE": ["numericLiteral"], 
     "TRUE": ["booleanLiteral"], 
     "FALSE": ["booleanLiteral"], 
     "UNDEF": ["UNDEF"]}, 
  "bindingsClause" : {
     "BINDINGS": ["?[BINDINGS,*var,{,*or([[ (,*bindingValue,)],NIL]),}]"], 
     "$": ["?[BINDINGS,*var,{,*or([[ (,*bindingValue,)],NIL]),}]"]}, 
  "blankNode" : {
     "BLANK_NODE_LABEL": ["BLANK_NODE_LABEL"], 
     "ANON": ["ANON"]}, 
  "blankNodepropertyList" : {
     "[": ["[","propertyListNotEmpty","]"]}, 
  "booleanLiteral" : {
     "TRUE": ["TRUE"], 
     "FALSE": ["FALSE"]}, 
  "brackettedexpression" : {
     "(": ["(","expression",")"]}, 
  "builtInCall" : {
     "STR": ["STR","(","expression",")"], 
     "LANG": ["LANG","(","expression",")"], 
     "LANGMATCHES": ["LANGMATCHES","(","expression",",","expression",")"], 
     "DATATYPE": ["DATATYPE","(","expression",")"], 
     "BOUND": ["BOUND","(","var",")"], 
     "IRI": ["IRI","(","expression",")"], 
     "URI": ["URI","(","expression",")"], 
     "BNODE": ["BNODE","or([[ (,expression,)],NIL])"], 
     "RAND": ["RAND","NIL"], 
     "ABS": ["ABS","(","expression",")"], 
     "CEIL": ["CEIL","(","expression",")"], 
     "FLOOR": ["FLOOR","(","expression",")"], 
     "ROUND": ["ROUND","(","expression",")"], 
     "CONCAT": ["CONCAT","expressionList"], 
     "SUBSTR": ["substringexpression"], 
     "STRLEN": ["STRLEN","(","expression",")"], 
     "REPLACE": ["strReplaceexpression"], 
     "UCASE": ["UCASE","(","expression",")"], 
     "LCASE": ["LCASE","(","expression",")"], 
     "ENCODE_FOR_URI": ["ENCODE_FOR_URI","(","expression",")"], 
     "CONTAINS": ["CONTAINS","(","expression",",","expression",")"], 
     "STRSTARTS": ["STRSTARTS","(","expression",",","expression",")"], 
     "STRENDS": ["STRENDS","(","expression",",","expression",")"], 
     "STRBEFORE": ["STRBEFORE","(","expression",",","expression",")"], 
     "STRAFTER": ["STRAFTER","(","expression",",","expression",")"], 
     "YEAR": ["YEAR","(","expression",")"], 
     "MONTH": ["MONTH","(","expression",")"], 
     "DAY": ["DAY","(","expression",")"], 
     "HOURS": ["HOURS","(","expression",")"], 
     "MINUTES": ["MINUTES","(","expression",")"], 
     "SECONDS": ["SECONDS","(","expression",")"], 
     "TIMEZONE": ["TIMEZONE","(","expression",")"], 
     "TZ": ["TZ","(","expression",")"], 
     "NOW": ["NOW","NIL"], 
     "MD5": ["MD5","(","expression",")"], 
     "SHA1": ["SHA1","(","expression",")"], 
     "SHA256": ["SHA256","(","expression",")"], 
     "SHA384": ["SHA384","(","expression",")"], 
     "SHA512": ["SHA512","(","expression",")"], 
     "COALESCE": ["COALESCE","expressionList"], 
     "IF": ["IF","(","expression",",","expression",",","expression",")"], 
     "STRLANG": ["STRLANG","(","expression",",","expression",")"], 
     "STRDT": ["STRDT","(","expression",",","expression",")"], 
     "SAMETERM": ["SAMETERM","(","expression",",","expression",")"], 
     "ISIRI": ["ISIRI","(","expression",")"], 
     "ISURI": ["ISURI","(","expression",")"], 
     "ISBLANK": ["ISBLANK","(","expression",")"], 
     "ISLITERAL": ["ISLITERAL","(","expression",")"], 
     "ISNUMERIC": ["ISNUMERIC","(","expression",")"], 
     "REGEX": ["regexexpression"], 
     "EXISTS": ["existsFunc"], 
     "NOT": ["notexistsFunc"]}, 
  "clear" : {
     "CLEAR": ["CLEAR","?SILENT","graphRefAll"]}, 
  "collection" : {
     "(": ["(","+graphNode",")"]}, 
  "conditionalAndexpression" : {
     "!": ["valueLogical","*[&&,valueLogical]"], 
     "+": ["valueLogical","*[&&,valueLogical]"], 
     "-": ["valueLogical","*[&&,valueLogical]"], 
     "VAR1": ["valueLogical","*[&&,valueLogical]"], 
     "VAR2": ["valueLogical","*[&&,valueLogical]"], 
     "(": ["valueLogical","*[&&,valueLogical]"], 
     "STR": ["valueLogical","*[&&,valueLogical]"], 
     "LANG": ["valueLogical","*[&&,valueLogical]"], 
     "LANGMATCHES": ["valueLogical","*[&&,valueLogical]"], 
     "DATATYPE": ["valueLogical","*[&&,valueLogical]"], 
     "BOUND": ["valueLogical","*[&&,valueLogical]"], 
     "IRI": ["valueLogical","*[&&,valueLogical]"], 
     "URI": ["valueLogical","*[&&,valueLogical]"], 
     "BNODE": ["valueLogical","*[&&,valueLogical]"], 
     "RAND": ["valueLogical","*[&&,valueLogical]"], 
     "ABS": ["valueLogical","*[&&,valueLogical]"], 
     "CEIL": ["valueLogical","*[&&,valueLogical]"], 
     "FLOOR": ["valueLogical","*[&&,valueLogical]"], 
     "ROUND": ["valueLogical","*[&&,valueLogical]"], 
     "CONCAT": ["valueLogical","*[&&,valueLogical]"], 
     "STRLEN": ["valueLogical","*[&&,valueLogical]"], 
     "UCASE": ["valueLogical","*[&&,valueLogical]"], 
     "LCASE": ["valueLogical","*[&&,valueLogical]"], 
     "ENCODE_FOR_URI": ["valueLogical","*[&&,valueLogical]"], 
     "CONTAINS": ["valueLogical","*[&&,valueLogical]"], 
     "STRSTARTS": ["valueLogical","*[&&,valueLogical]"], 
     "STRENDS": ["valueLogical","*[&&,valueLogical]"], 
     "STRBEFORE": ["valueLogical","*[&&,valueLogical]"], 
     "STRAFTER": ["valueLogical","*[&&,valueLogical]"], 
     "YEAR": ["valueLogical","*[&&,valueLogical]"], 
     "MONTH": ["valueLogical","*[&&,valueLogical]"], 
     "DAY": ["valueLogical","*[&&,valueLogical]"], 
     "HOURS": ["valueLogical","*[&&,valueLogical]"], 
     "MINUTES": ["valueLogical","*[&&,valueLogical]"], 
     "SECONDS": ["valueLogical","*[&&,valueLogical]"], 
     "TIMEZONE": ["valueLogical","*[&&,valueLogical]"], 
     "TZ": ["valueLogical","*[&&,valueLogical]"], 
     "NOW": ["valueLogical","*[&&,valueLogical]"], 
     "MD5": ["valueLogical","*[&&,valueLogical]"], 
     "SHA1": ["valueLogical","*[&&,valueLogical]"], 
     "SHA256": ["valueLogical","*[&&,valueLogical]"], 
     "SHA384": ["valueLogical","*[&&,valueLogical]"], 
     "SHA512": ["valueLogical","*[&&,valueLogical]"], 
     "COALESCE": ["valueLogical","*[&&,valueLogical]"], 
     "IF": ["valueLogical","*[&&,valueLogical]"], 
     "STRLANG": ["valueLogical","*[&&,valueLogical]"], 
     "STRDT": ["valueLogical","*[&&,valueLogical]"], 
     "SAMETERM": ["valueLogical","*[&&,valueLogical]"], 
     "ISIRI": ["valueLogical","*[&&,valueLogical]"], 
     "ISURI": ["valueLogical","*[&&,valueLogical]"], 
     "ISBLANK": ["valueLogical","*[&&,valueLogical]"], 
     "ISLITERAL": ["valueLogical","*[&&,valueLogical]"], 
     "ISNUMERIC": ["valueLogical","*[&&,valueLogical]"], 
     "TRUE": ["valueLogical","*[&&,valueLogical]"], 
     "FALSE": ["valueLogical","*[&&,valueLogical]"], 
     "COUNT": ["valueLogical","*[&&,valueLogical]"], 
     "SUM": ["valueLogical","*[&&,valueLogical]"], 
     "MIN": ["valueLogical","*[&&,valueLogical]"], 
     "MAX": ["valueLogical","*[&&,valueLogical]"], 
     "AVG": ["valueLogical","*[&&,valueLogical]"], 
     "SAMPLE": ["valueLogical","*[&&,valueLogical]"], 
     "GROUP_CONCAT": ["valueLogical","*[&&,valueLogical]"], 
     "SUBSTR": ["valueLogical","*[&&,valueLogical]"], 
     "REPLACE": ["valueLogical","*[&&,valueLogical]"], 
     "REGEX": ["valueLogical","*[&&,valueLogical]"], 
     "EXISTS": ["valueLogical","*[&&,valueLogical]"], 
     "NOT": ["valueLogical","*[&&,valueLogical]"], 
     "IRI_REF": ["valueLogical","*[&&,valueLogical]"], 
     "STRING_LITERAL1": ["valueLogical","*[&&,valueLogical]"], 
     "STRING_LITERAL2": ["valueLogical","*[&&,valueLogical]"], 
     "STRING_LITERAL_LONG1": ["valueLogical","*[&&,valueLogical]"], 
     "STRING_LITERAL_LONG2": ["valueLogical","*[&&,valueLogical]"], 
     "INTEGER": ["valueLogical","*[&&,valueLogical]"], 
     "DECIMAL": ["valueLogical","*[&&,valueLogical]"], 
     "DOUBLE": ["valueLogical","*[&&,valueLogical]"], 
     "INTEGER_POSITIVE": ["valueLogical","*[&&,valueLogical]"], 
     "DECIMAL_POSITIVE": ["valueLogical","*[&&,valueLogical]"], 
     "DOUBLE_POSITIVE": ["valueLogical","*[&&,valueLogical]"], 
     "INTEGER_NEGATIVE": ["valueLogical","*[&&,valueLogical]"], 
     "DECIMAL_NEGATIVE": ["valueLogical","*[&&,valueLogical]"], 
     "DOUBLE_NEGATIVE": ["valueLogical","*[&&,valueLogical]"], 
     "PNAME_LN": ["valueLogical","*[&&,valueLogical]"], 
     "PNAME_NS": ["valueLogical","*[&&,valueLogical]"]}, 
  "conditionalOrexpression" : {
     "!": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "+": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "-": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "VAR1": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "VAR2": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "(": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "STR": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "LANG": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "LANGMATCHES": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "DATATYPE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "BOUND": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "IRI": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "URI": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "BNODE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "RAND": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "ABS": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "CEIL": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "FLOOR": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "ROUND": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "CONCAT": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "STRLEN": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "UCASE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "LCASE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "ENCODE_FOR_URI": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "CONTAINS": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "STRSTARTS": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "STRENDS": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "STRBEFORE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "STRAFTER": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "YEAR": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "MONTH": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "DAY": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "HOURS": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "MINUTES": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "SECONDS": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "TIMEZONE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "TZ": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "NOW": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "MD5": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "SHA1": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "SHA256": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "SHA384": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "SHA512": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "COALESCE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "IF": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "STRLANG": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "STRDT": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "SAMETERM": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "ISIRI": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "ISURI": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "ISBLANK": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "ISLITERAL": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "ISNUMERIC": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "TRUE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "FALSE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "COUNT": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "SUM": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "MIN": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "MAX": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "AVG": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "SAMPLE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "GROUP_CONCAT": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "SUBSTR": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "REPLACE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "REGEX": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "EXISTS": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "NOT": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "IRI_REF": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "STRING_LITERAL1": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "STRING_LITERAL2": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "STRING_LITERAL_LONG1": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "STRING_LITERAL_LONG2": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "INTEGER": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "DECIMAL": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "DOUBLE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "INTEGER_POSITIVE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "DECIMAL_POSITIVE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "DOUBLE_POSITIVE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "INTEGER_NEGATIVE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "DECIMAL_NEGATIVE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "DOUBLE_NEGATIVE": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "PNAME_LN": ["conditionalAndexpression","*[||,conditionalAndexpression]"], 
     "PNAME_NS": ["conditionalAndexpression","*[||,conditionalAndexpression]"]}, 
  "constraint" : {
     "(": ["brackettedexpression"], 
     "STR": ["builtInCall"], 
     "LANG": ["builtInCall"], 
     "LANGMATCHES": ["builtInCall"], 
     "DATATYPE": ["builtInCall"], 
     "BOUND": ["builtInCall"], 
     "IRI": ["builtInCall"], 
     "URI": ["builtInCall"], 
     "BNODE": ["builtInCall"], 
     "RAND": ["builtInCall"], 
     "ABS": ["builtInCall"], 
     "CEIL": ["builtInCall"], 
     "FLOOR": ["builtInCall"], 
     "ROUND": ["builtInCall"], 
     "CONCAT": ["builtInCall"], 
     "STRLEN": ["builtInCall"], 
     "UCASE": ["builtInCall"], 
     "LCASE": ["builtInCall"], 
     "ENCODE_FOR_URI": ["builtInCall"], 
     "CONTAINS": ["builtInCall"], 
     "STRSTARTS": ["builtInCall"], 
     "STRENDS": ["builtInCall"], 
     "STRBEFORE": ["builtInCall"], 
     "STRAFTER": ["builtInCall"], 
     "YEAR": ["builtInCall"], 
     "MONTH": ["builtInCall"], 
     "DAY": ["builtInCall"], 
     "HOURS": ["builtInCall"], 
     "MINUTES": ["builtInCall"], 
     "SECONDS": ["builtInCall"], 
     "TIMEZONE": ["builtInCall"], 
     "TZ": ["builtInCall"], 
     "NOW": ["builtInCall"], 
     "MD5": ["builtInCall"], 
     "SHA1": ["builtInCall"], 
     "SHA256": ["builtInCall"], 
     "SHA384": ["builtInCall"], 
     "SHA512": ["builtInCall"], 
     "COALESCE": ["builtInCall"], 
     "IF": ["builtInCall"], 
     "STRLANG": ["builtInCall"], 
     "STRDT": ["builtInCall"], 
     "SAMETERM": ["builtInCall"], 
     "ISIRI": ["builtInCall"], 
     "ISURI": ["builtInCall"], 
     "ISBLANK": ["builtInCall"], 
     "ISLITERAL": ["builtInCall"], 
     "ISNUMERIC": ["builtInCall"], 
     "SUBSTR": ["builtInCall"], 
     "REPLACE": ["builtInCall"], 
     "REGEX": ["builtInCall"], 
     "EXISTS": ["builtInCall"], 
     "NOT": ["builtInCall"], 
     "IRI_REF": ["functionCall"], 
     "PNAME_LN": ["functionCall"], 
     "PNAME_NS": ["functionCall"]}, 
  "constructTemplate" : {
     "{": ["{","?constructTriples","}"]}, 
  "constructTriples" : {
     "VAR1": ["triplesSameSubject","?[.,?constructTriples]"], 
     "VAR2": ["triplesSameSubject","?[.,?constructTriples]"], 
     "NIL": ["triplesSameSubject","?[.,?constructTriples]"], 
     "(": ["triplesSameSubject","?[.,?constructTriples]"], 
     "[": ["triplesSameSubject","?[.,?constructTriples]"], 
     "IRI_REF": ["triplesSameSubject","?[.,?constructTriples]"], 
     "TRUE": ["triplesSameSubject","?[.,?constructTriples]"], 
     "FALSE": ["triplesSameSubject","?[.,?constructTriples]"], 
     "BLANK_NODE_LABEL": ["triplesSameSubject","?[.,?constructTriples]"], 
     "ANON": ["triplesSameSubject","?[.,?constructTriples]"], 
     "PNAME_LN": ["triplesSameSubject","?[.,?constructTriples]"], 
     "PNAME_NS": ["triplesSameSubject","?[.,?constructTriples]"], 
     "STRING_LITERAL1": ["triplesSameSubject","?[.,?constructTriples]"], 
     "STRING_LITERAL2": ["triplesSameSubject","?[.,?constructTriples]"], 
     "STRING_LITERAL_LONG1": ["triplesSameSubject","?[.,?constructTriples]"], 
     "STRING_LITERAL_LONG2": ["triplesSameSubject","?[.,?constructTriples]"], 
     "INTEGER": ["triplesSameSubject","?[.,?constructTriples]"], 
     "DECIMAL": ["triplesSameSubject","?[.,?constructTriples]"], 
     "DOUBLE": ["triplesSameSubject","?[.,?constructTriples]"], 
     "INTEGER_POSITIVE": ["triplesSameSubject","?[.,?constructTriples]"], 
     "DECIMAL_POSITIVE": ["triplesSameSubject","?[.,?constructTriples]"], 
     "DOUBLE_POSITIVE": ["triplesSameSubject","?[.,?constructTriples]"], 
     "INTEGER_NEGATIVE": ["triplesSameSubject","?[.,?constructTriples]"], 
     "DECIMAL_NEGATIVE": ["triplesSameSubject","?[.,?constructTriples]"], 
     "DOUBLE_NEGATIVE": ["triplesSameSubject","?[.,?constructTriples]"]}, 
  "constructquery" : {
     "CONSTRUCT": ["CONSTRUCT","or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])"]}, 
  "copy" : {
     "COPY": ["COPY","?SILENT","graphOrDefault","TO","graphOrDefault"]}, 
  "create" : {
     "CREATE": ["CREATE","?SILENT","graphRef"]}, 
  "datasetClause" : {
     "FROM": ["FROM","or([defaultGraphClause,namedGraphClause])"]}, 
  "defaultGraphClause" : {
     "IRI_REF": ["sourceSelector"], 
     "PNAME_LN": ["sourceSelector"], 
     "PNAME_NS": ["sourceSelector"]}, 
  "deleteClause" : {
     "DELETE": ["DELETE","quadPattern"]}, 
  "deleteData" : {
     "DELETE DATA": ["DELETE DATA","quadData"]}, 
  "deleteWhere" : {
     "DELETE WHERE": ["DELETE WHERE","quadPattern"]}, 
  "describequery" : {
     "DESCRIBE": ["DESCRIBE","or([+varOriRIref,*])","*datasetClause","?whereClause","solutionModifier"]}, 
  "drop" : {
     "DROP": ["DROP","?SILENT","graphRefAll"]}, 
  "existsFunc" : {
     "EXISTS": ["EXISTS","groupGraphPattern"]}, 
  "expression" : {
     "!": ["conditionalOrexpression"], 
     "+": ["conditionalOrexpression"], 
     "-": ["conditionalOrexpression"], 
     "VAR1": ["conditionalOrexpression"], 
     "VAR2": ["conditionalOrexpression"], 
     "(": ["conditionalOrexpression"], 
     "STR": ["conditionalOrexpression"], 
     "LANG": ["conditionalOrexpression"], 
     "LANGMATCHES": ["conditionalOrexpression"], 
     "DATATYPE": ["conditionalOrexpression"], 
     "BOUND": ["conditionalOrexpression"], 
     "IRI": ["conditionalOrexpression"], 
     "URI": ["conditionalOrexpression"], 
     "BNODE": ["conditionalOrexpression"], 
     "RAND": ["conditionalOrexpression"], 
     "ABS": ["conditionalOrexpression"], 
     "CEIL": ["conditionalOrexpression"], 
     "FLOOR": ["conditionalOrexpression"], 
     "ROUND": ["conditionalOrexpression"], 
     "CONCAT": ["conditionalOrexpression"], 
     "STRLEN": ["conditionalOrexpression"], 
     "UCASE": ["conditionalOrexpression"], 
     "LCASE": ["conditionalOrexpression"], 
     "ENCODE_FOR_URI": ["conditionalOrexpression"], 
     "CONTAINS": ["conditionalOrexpression"], 
     "STRSTARTS": ["conditionalOrexpression"], 
     "STRENDS": ["conditionalOrexpression"], 
     "STRBEFORE": ["conditionalOrexpression"], 
     "STRAFTER": ["conditionalOrexpression"], 
     "YEAR": ["conditionalOrexpression"], 
     "MONTH": ["conditionalOrexpression"], 
     "DAY": ["conditionalOrexpression"], 
     "HOURS": ["conditionalOrexpression"], 
     "MINUTES": ["conditionalOrexpression"], 
     "SECONDS": ["conditionalOrexpression"], 
     "TIMEZONE": ["conditionalOrexpression"], 
     "TZ": ["conditionalOrexpression"], 
     "NOW": ["conditionalOrexpression"], 
     "MD5": ["conditionalOrexpression"], 
     "SHA1": ["conditionalOrexpression"], 
     "SHA256": ["conditionalOrexpression"], 
     "SHA384": ["conditionalOrexpression"], 
     "SHA512": ["conditionalOrexpression"], 
     "COALESCE": ["conditionalOrexpression"], 
     "IF": ["conditionalOrexpression"], 
     "STRLANG": ["conditionalOrexpression"], 
     "STRDT": ["conditionalOrexpression"], 
     "SAMETERM": ["conditionalOrexpression"], 
     "ISIRI": ["conditionalOrexpression"], 
     "ISURI": ["conditionalOrexpression"], 
     "ISBLANK": ["conditionalOrexpression"], 
     "ISLITERAL": ["conditionalOrexpression"], 
     "ISNUMERIC": ["conditionalOrexpression"], 
     "TRUE": ["conditionalOrexpression"], 
     "FALSE": ["conditionalOrexpression"], 
     "COUNT": ["conditionalOrexpression"], 
     "SUM": ["conditionalOrexpression"], 
     "MIN": ["conditionalOrexpression"], 
     "MAX": ["conditionalOrexpression"], 
     "AVG": ["conditionalOrexpression"], 
     "SAMPLE": ["conditionalOrexpression"], 
     "GROUP_CONCAT": ["conditionalOrexpression"], 
     "SUBSTR": ["conditionalOrexpression"], 
     "REPLACE": ["conditionalOrexpression"], 
     "REGEX": ["conditionalOrexpression"], 
     "EXISTS": ["conditionalOrexpression"], 
     "NOT": ["conditionalOrexpression"], 
     "IRI_REF": ["conditionalOrexpression"], 
     "STRING_LITERAL1": ["conditionalOrexpression"], 
     "STRING_LITERAL2": ["conditionalOrexpression"], 
     "STRING_LITERAL_LONG1": ["conditionalOrexpression"], 
     "STRING_LITERAL_LONG2": ["conditionalOrexpression"], 
     "INTEGER": ["conditionalOrexpression"], 
     "DECIMAL": ["conditionalOrexpression"], 
     "DOUBLE": ["conditionalOrexpression"], 
     "INTEGER_POSITIVE": ["conditionalOrexpression"], 
     "DECIMAL_POSITIVE": ["conditionalOrexpression"], 
     "DOUBLE_POSITIVE": ["conditionalOrexpression"], 
     "INTEGER_NEGATIVE": ["conditionalOrexpression"], 
     "DECIMAL_NEGATIVE": ["conditionalOrexpression"], 
     "DOUBLE_NEGATIVE": ["conditionalOrexpression"], 
     "PNAME_LN": ["conditionalOrexpression"], 
     "PNAME_NS": ["conditionalOrexpression"]}, 
  "expressionList" : {
     "NIL": ["NIL"], 
     "(": ["(","expression","*[,,expression]",")"]}, 
  "filter" : {
     "FILTER": ["FILTER","constraint"]}, 
  "functionCall" : {
     "IRI_REF": ["iRIref","argList"], 
     "PNAME_LN": ["iRIref","argList"], 
     "PNAME_NS": ["iRIref","argList"]}, 
  "graphGraphPattern" : {
     "GRAPH": ["GRAPH","varOriRIref","groupGraphPattern"]}, 
  "graphNode" : {
     "VAR1": ["varOrTerm"], 
     "VAR2": ["varOrTerm"], 
     "NIL": ["varOrTerm"], 
     "IRI_REF": ["varOrTerm"], 
     "TRUE": ["varOrTerm"], 
     "FALSE": ["varOrTerm"], 
     "BLANK_NODE_LABEL": ["varOrTerm"], 
     "ANON": ["varOrTerm"], 
     "PNAME_LN": ["varOrTerm"], 
     "PNAME_NS": ["varOrTerm"], 
     "STRING_LITERAL1": ["varOrTerm"], 
     "STRING_LITERAL2": ["varOrTerm"], 
     "STRING_LITERAL_LONG1": ["varOrTerm"], 
     "STRING_LITERAL_LONG2": ["varOrTerm"], 
     "INTEGER": ["varOrTerm"], 
     "DECIMAL": ["varOrTerm"], 
     "DOUBLE": ["varOrTerm"], 
     "INTEGER_POSITIVE": ["varOrTerm"], 
     "DECIMAL_POSITIVE": ["varOrTerm"], 
     "DOUBLE_POSITIVE": ["varOrTerm"], 
     "INTEGER_NEGATIVE": ["varOrTerm"], 
     "DECIMAL_NEGATIVE": ["varOrTerm"], 
     "DOUBLE_NEGATIVE": ["varOrTerm"], 
     "(": ["triplesNode"], 
     "[": ["triplesNode"]}, 
  "graphOrDefault" : {
     "DEFAULT": ["DEFAULT"], 
     "IRI_REF": ["?GRAPH","iRIref"], 
     "PNAME_LN": ["?GRAPH","iRIref"], 
     "PNAME_NS": ["?GRAPH","iRIref"], 
     "GRAPH": ["?GRAPH","iRIref"]}, 
  "graphPatternNotTriples" : {
     "{": ["groupOrUnionGraphPattern"], 
     "OPTIONAL": ["optionalGraphPattern"], 
     "MINUS": ["minusGraphPattern"], 
     "GRAPH": ["graphGraphPattern"], 
     "SERVICE": ["serviceGraphPattern"], 
     "FILTER": ["filter"], 
     "BIND": ["bind"]}, 
  "graphRef" : {
     "GRAPH": ["GRAPH","iRIref"]}, 
  "graphRefAll" : {
     "GRAPH": ["graphRef"], 
     "DEFAULT": ["DEFAULT"], 
     "NAMED": ["NAMED"], 
     "ALL": ["ALL"]}, 
  "graphTerm" : {
     "IRI_REF": ["iRIref"], 
     "PNAME_LN": ["iRIref"], 
     "PNAME_NS": ["iRIref"], 
     "STRING_LITERAL1": ["rDFLiteral"], 
     "STRING_LITERAL2": ["rDFLiteral"], 
     "STRING_LITERAL_LONG1": ["rDFLiteral"], 
     "STRING_LITERAL_LONG2": ["rDFLiteral"], 
     "INTEGER": ["numericLiteral"], 
     "DECIMAL": ["numericLiteral"], 
     "DOUBLE": ["numericLiteral"], 
     "INTEGER_POSITIVE": ["numericLiteral"], 
     "DECIMAL_POSITIVE": ["numericLiteral"], 
     "DOUBLE_POSITIVE": ["numericLiteral"], 
     "INTEGER_NEGATIVE": ["numericLiteral"], 
     "DECIMAL_NEGATIVE": ["numericLiteral"], 
     "DOUBLE_NEGATIVE": ["numericLiteral"], 
     "TRUE": ["booleanLiteral"], 
     "FALSE": ["booleanLiteral"], 
     "BLANK_NODE_LABEL": ["blankNode"], 
     "ANON": ["blankNode"], 
     "NIL": ["NIL"]}, 
  "groupClause" : {
     "GROUP": ["GROUP","BY","+groupCondition"]}, 
  "groupCondition" : {
     "STR": ["builtInCall"], 
     "LANG": ["builtInCall"], 
     "LANGMATCHES": ["builtInCall"], 
     "DATATYPE": ["builtInCall"], 
     "BOUND": ["builtInCall"], 
     "IRI": ["builtInCall"], 
     "URI": ["builtInCall"], 
     "BNODE": ["builtInCall"], 
     "RAND": ["builtInCall"], 
     "ABS": ["builtInCall"], 
     "CEIL": ["builtInCall"], 
     "FLOOR": ["builtInCall"], 
     "ROUND": ["builtInCall"], 
     "CONCAT": ["builtInCall"], 
     "STRLEN": ["builtInCall"], 
     "UCASE": ["builtInCall"], 
     "LCASE": ["builtInCall"], 
     "ENCODE_FOR_URI": ["builtInCall"], 
     "CONTAINS": ["builtInCall"], 
     "STRSTARTS": ["builtInCall"], 
     "STRENDS": ["builtInCall"], 
     "STRBEFORE": ["builtInCall"], 
     "STRAFTER": ["builtInCall"], 
     "YEAR": ["builtInCall"], 
     "MONTH": ["builtInCall"], 
     "DAY": ["builtInCall"], 
     "HOURS": ["builtInCall"], 
     "MINUTES": ["builtInCall"], 
     "SECONDS": ["builtInCall"], 
     "TIMEZONE": ["builtInCall"], 
     "TZ": ["builtInCall"], 
     "NOW": ["builtInCall"], 
     "MD5": ["builtInCall"], 
     "SHA1": ["builtInCall"], 
     "SHA256": ["builtInCall"], 
     "SHA384": ["builtInCall"], 
     "SHA512": ["builtInCall"], 
     "COALESCE": ["builtInCall"], 
     "IF": ["builtInCall"], 
     "STRLANG": ["builtInCall"], 
     "STRDT": ["builtInCall"], 
     "SAMETERM": ["builtInCall"], 
     "ISIRI": ["builtInCall"], 
     "ISURI": ["builtInCall"], 
     "ISBLANK": ["builtInCall"], 
     "ISLITERAL": ["builtInCall"], 
     "ISNUMERIC": ["builtInCall"], 
     "SUBSTR": ["builtInCall"], 
     "REPLACE": ["builtInCall"], 
     "REGEX": ["builtInCall"], 
     "EXISTS": ["builtInCall"], 
     "NOT": ["builtInCall"], 
     "IRI_REF": ["functionCall"], 
     "PNAME_LN": ["functionCall"], 
     "PNAME_NS": ["functionCall"], 
     "(": ["(","expression","?[AS,var]",")"], 
     "VAR1": ["var"], 
     "VAR2": ["var"]}, 
  "groupGraphPattern" : {
     "{": ["{","or([subSelect,groupGraphPatternSub])","}"]}, 
  "groupGraphPatternSub" : {
     "{": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "OPTIONAL": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "MINUS": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "GRAPH": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "SERVICE": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "FILTER": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "BIND": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "VAR1": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "VAR2": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "NIL": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "(": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "[": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "IRI_REF": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "TRUE": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "FALSE": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "BLANK_NODE_LABEL": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "ANON": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "PNAME_LN": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "PNAME_NS": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "STRING_LITERAL1": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "STRING_LITERAL2": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "STRING_LITERAL_LONG1": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "STRING_LITERAL_LONG2": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "INTEGER": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "DECIMAL": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "DOUBLE": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "INTEGER_POSITIVE": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "DECIMAL_POSITIVE": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "DOUBLE_POSITIVE": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "INTEGER_NEGATIVE": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "DECIMAL_NEGATIVE": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "DOUBLE_NEGATIVE": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"], 
     "}": ["?triplesBlock","*[graphPatternNotTriples,?.,?triplesBlock]"]}, 
  "groupOrUnionGraphPattern" : {
     "{": ["groupGraphPattern","*[UNION,groupGraphPattern]"]}, 
  "havingClause" : {
     "HAVING": ["HAVING","+havingCondition"]}, 
  "havingCondition" : {
     "(": ["constraint"], 
     "STR": ["constraint"], 
     "LANG": ["constraint"], 
     "LANGMATCHES": ["constraint"], 
     "DATATYPE": ["constraint"], 
     "BOUND": ["constraint"], 
     "IRI": ["constraint"], 
     "URI": ["constraint"], 
     "BNODE": ["constraint"], 
     "RAND": ["constraint"], 
     "ABS": ["constraint"], 
     "CEIL": ["constraint"], 
     "FLOOR": ["constraint"], 
     "ROUND": ["constraint"], 
     "CONCAT": ["constraint"], 
     "STRLEN": ["constraint"], 
     "UCASE": ["constraint"], 
     "LCASE": ["constraint"], 
     "ENCODE_FOR_URI": ["constraint"], 
     "CONTAINS": ["constraint"], 
     "STRSTARTS": ["constraint"], 
     "STRENDS": ["constraint"], 
     "STRBEFORE": ["constraint"], 
     "STRAFTER": ["constraint"], 
     "YEAR": ["constraint"], 
     "MONTH": ["constraint"], 
     "DAY": ["constraint"], 
     "HOURS": ["constraint"], 
     "MINUTES": ["constraint"], 
     "SECONDS": ["constraint"], 
     "TIMEZONE": ["constraint"], 
     "TZ": ["constraint"], 
     "NOW": ["constraint"], 
     "MD5": ["constraint"], 
     "SHA1": ["constraint"], 
     "SHA256": ["constraint"], 
     "SHA384": ["constraint"], 
     "SHA512": ["constraint"], 
     "COALESCE": ["constraint"], 
     "IF": ["constraint"], 
     "STRLANG": ["constraint"], 
     "STRDT": ["constraint"], 
     "SAMETERM": ["constraint"], 
     "ISIRI": ["constraint"], 
     "ISURI": ["constraint"], 
     "ISBLANK": ["constraint"], 
     "ISLITERAL": ["constraint"], 
     "ISNUMERIC": ["constraint"], 
     "SUBSTR": ["constraint"], 
     "REPLACE": ["constraint"], 
     "REGEX": ["constraint"], 
     "EXISTS": ["constraint"], 
     "NOT": ["constraint"], 
     "IRI_REF": ["constraint"], 
     "PNAME_LN": ["constraint"], 
     "PNAME_NS": ["constraint"]}, 
  "iRIref" : {
     "IRI_REF": ["IRI_REF"], 
     "PNAME_LN": ["prefixedName"], 
     "PNAME_NS": ["prefixedName"]}, 
  "iRIrefOrFunction" : {
     "IRI_REF": ["iRIref","?argList"], 
     "PNAME_LN": ["iRIref","?argList"], 
     "PNAME_NS": ["iRIref","?argList"]}, 
  "insertClause" : {
     "INSERT": ["INSERT","quadPattern"]}, 
  "insertData" : {
     "INSERT DATA": ["INSERT DATA","quadData"]}, 
  "integer" : {
     "INTEGER": ["INTEGER"]}, 
  "limitClause" : {
     "LIMIT": ["LIMIT","INTEGER"]}, 
  "limitoffsetClauses" : {
     "LIMIT": ["limitClause","?offsetClause"], 
     "OFFSET": ["offsetClause","?limitClause"]}, 
  "load" : {
     "LOAD": ["LOAD","?SILENT","iRIref","?[INTO,graphRef]"]}, 
  "minusGraphPattern" : {
     "MINUS": ["MINUS","groupGraphPattern"]}, 
  "modify" : {
     "DELETE": ["?[WITH,iRIref]","or([[deleteClause,?insertClause],insertClause])","*usingClause","WHERE","groupGraphPattern"], 
     "INSERT": ["?[WITH,iRIref]","or([[deleteClause,?insertClause],insertClause])","*usingClause","WHERE","groupGraphPattern"], 
     "WITH": ["?[WITH,iRIref]","or([[deleteClause,?insertClause],insertClause])","*usingClause","WHERE","groupGraphPattern"]}, 
  "move" : {
     "MOVE": ["MOVE","?SILENT","graphOrDefault","TO","graphOrDefault"]}, 
  "multiplicativeexpression" : {
     "!": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "+": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "-": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "VAR1": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "VAR2": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "(": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "STR": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "LANG": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "LANGMATCHES": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "DATATYPE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "BOUND": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "IRI": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "URI": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "BNODE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "RAND": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "ABS": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "CEIL": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "FLOOR": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "ROUND": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "CONCAT": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "STRLEN": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "UCASE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "LCASE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "ENCODE_FOR_URI": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "CONTAINS": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "STRSTARTS": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "STRENDS": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "STRBEFORE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "STRAFTER": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "YEAR": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "MONTH": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "DAY": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "HOURS": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "MINUTES": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "SECONDS": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "TIMEZONE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "TZ": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "NOW": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "MD5": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "SHA1": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "SHA256": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "SHA384": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "SHA512": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "COALESCE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "IF": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "STRLANG": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "STRDT": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "SAMETERM": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "ISIRI": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "ISURI": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "ISBLANK": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "ISLITERAL": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "ISNUMERIC": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "TRUE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "FALSE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "COUNT": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "SUM": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "MIN": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "MAX": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "AVG": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "SAMPLE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "GROUP_CONCAT": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "SUBSTR": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "REPLACE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "REGEX": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "EXISTS": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "NOT": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "IRI_REF": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "STRING_LITERAL1": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "STRING_LITERAL2": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "STRING_LITERAL_LONG1": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "STRING_LITERAL_LONG2": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "INTEGER": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "DECIMAL": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "DOUBLE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "INTEGER_POSITIVE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "DECIMAL_POSITIVE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "DOUBLE_POSITIVE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "INTEGER_NEGATIVE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "DECIMAL_NEGATIVE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "DOUBLE_NEGATIVE": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "PNAME_LN": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"], 
     "PNAME_NS": ["unaryexpression","*or([[*,unaryexpression],[/,unaryexpression]])"]}, 
  "namedGraphClause" : {
     "NAMED": ["NAMED","sourceSelector"]}, 
  "notexistsFunc" : {
     "NOT": ["NOT","EXISTS","groupGraphPattern"]}, 
  "numericLiteral" : {
     "INTEGER": ["numericLiteralUnsigned"], 
     "DECIMAL": ["numericLiteralUnsigned"], 
     "DOUBLE": ["numericLiteralUnsigned"], 
     "INTEGER_POSITIVE": ["numericLiteralPositive"], 
     "DECIMAL_POSITIVE": ["numericLiteralPositive"], 
     "DOUBLE_POSITIVE": ["numericLiteralPositive"], 
     "INTEGER_NEGATIVE": ["numericLiteralNegative"], 
     "DECIMAL_NEGATIVE": ["numericLiteralNegative"], 
     "DOUBLE_NEGATIVE": ["numericLiteralNegative"]}, 
  "numericLiteralNegative" : {
     "INTEGER_NEGATIVE": ["INTEGER_NEGATIVE"], 
     "DECIMAL_NEGATIVE": ["DECIMAL_NEGATIVE"], 
     "DOUBLE_NEGATIVE": ["DOUBLE_NEGATIVE"]}, 
  "numericLiteralPositive" : {
     "INTEGER_POSITIVE": ["INTEGER_POSITIVE"], 
     "DECIMAL_POSITIVE": ["DECIMAL_POSITIVE"], 
     "DOUBLE_POSITIVE": ["DOUBLE_POSITIVE"]}, 
  "numericLiteralUnsigned" : {
     "INTEGER": ["INTEGER"], 
     "DECIMAL": ["DECIMAL"], 
     "DOUBLE": ["DOUBLE"]}, 
  "numericexpression" : {
     "!": ["additiveexpression"], 
     "+": ["additiveexpression"], 
     "-": ["additiveexpression"], 
     "VAR1": ["additiveexpression"], 
     "VAR2": ["additiveexpression"], 
     "(": ["additiveexpression"], 
     "STR": ["additiveexpression"], 
     "LANG": ["additiveexpression"], 
     "LANGMATCHES": ["additiveexpression"], 
     "DATATYPE": ["additiveexpression"], 
     "BOUND": ["additiveexpression"], 
     "IRI": ["additiveexpression"], 
     "URI": ["additiveexpression"], 
     "BNODE": ["additiveexpression"], 
     "RAND": ["additiveexpression"], 
     "ABS": ["additiveexpression"], 
     "CEIL": ["additiveexpression"], 
     "FLOOR": ["additiveexpression"], 
     "ROUND": ["additiveexpression"], 
     "CONCAT": ["additiveexpression"], 
     "STRLEN": ["additiveexpression"], 
     "UCASE": ["additiveexpression"], 
     "LCASE": ["additiveexpression"], 
     "ENCODE_FOR_URI": ["additiveexpression"], 
     "CONTAINS": ["additiveexpression"], 
     "STRSTARTS": ["additiveexpression"], 
     "STRENDS": ["additiveexpression"], 
     "STRBEFORE": ["additiveexpression"], 
     "STRAFTER": ["additiveexpression"], 
     "YEAR": ["additiveexpression"], 
     "MONTH": ["additiveexpression"], 
     "DAY": ["additiveexpression"], 
     "HOURS": ["additiveexpression"], 
     "MINUTES": ["additiveexpression"], 
     "SECONDS": ["additiveexpression"], 
     "TIMEZONE": ["additiveexpression"], 
     "TZ": ["additiveexpression"], 
     "NOW": ["additiveexpression"], 
     "MD5": ["additiveexpression"], 
     "SHA1": ["additiveexpression"], 
     "SHA256": ["additiveexpression"], 
     "SHA384": ["additiveexpression"], 
     "SHA512": ["additiveexpression"], 
     "COALESCE": ["additiveexpression"], 
     "IF": ["additiveexpression"], 
     "STRLANG": ["additiveexpression"], 
     "STRDT": ["additiveexpression"], 
     "SAMETERM": ["additiveexpression"], 
     "ISIRI": ["additiveexpression"], 
     "ISURI": ["additiveexpression"], 
     "ISBLANK": ["additiveexpression"], 
     "ISLITERAL": ["additiveexpression"], 
     "ISNUMERIC": ["additiveexpression"], 
     "TRUE": ["additiveexpression"], 
     "FALSE": ["additiveexpression"], 
     "COUNT": ["additiveexpression"], 
     "SUM": ["additiveexpression"], 
     "MIN": ["additiveexpression"], 
     "MAX": ["additiveexpression"], 
     "AVG": ["additiveexpression"], 
     "SAMPLE": ["additiveexpression"], 
     "GROUP_CONCAT": ["additiveexpression"], 
     "SUBSTR": ["additiveexpression"], 
     "REPLACE": ["additiveexpression"], 
     "REGEX": ["additiveexpression"], 
     "EXISTS": ["additiveexpression"], 
     "NOT": ["additiveexpression"], 
     "IRI_REF": ["additiveexpression"], 
     "STRING_LITERAL1": ["additiveexpression"], 
     "STRING_LITERAL2": ["additiveexpression"], 
     "STRING_LITERAL_LONG1": ["additiveexpression"], 
     "STRING_LITERAL_LONG2": ["additiveexpression"], 
     "INTEGER": ["additiveexpression"], 
     "DECIMAL": ["additiveexpression"], 
     "DOUBLE": ["additiveexpression"], 
     "INTEGER_POSITIVE": ["additiveexpression"], 
     "DECIMAL_POSITIVE": ["additiveexpression"], 
     "DOUBLE_POSITIVE": ["additiveexpression"], 
     "INTEGER_NEGATIVE": ["additiveexpression"], 
     "DECIMAL_NEGATIVE": ["additiveexpression"], 
     "DOUBLE_NEGATIVE": ["additiveexpression"], 
     "PNAME_LN": ["additiveexpression"], 
     "PNAME_NS": ["additiveexpression"]}, 
  "object" : {
     "(": ["graphNode"], 
     "[": ["graphNode"], 
     "VAR1": ["graphNode"], 
     "VAR2": ["graphNode"], 
     "NIL": ["graphNode"], 
     "IRI_REF": ["graphNode"], 
     "TRUE": ["graphNode"], 
     "FALSE": ["graphNode"], 
     "BLANK_NODE_LABEL": ["graphNode"], 
     "ANON": ["graphNode"], 
     "PNAME_LN": ["graphNode"], 
     "PNAME_NS": ["graphNode"], 
     "STRING_LITERAL1": ["graphNode"], 
     "STRING_LITERAL2": ["graphNode"], 
     "STRING_LITERAL_LONG1": ["graphNode"], 
     "STRING_LITERAL_LONG2": ["graphNode"], 
     "INTEGER": ["graphNode"], 
     "DECIMAL": ["graphNode"], 
     "DOUBLE": ["graphNode"], 
     "INTEGER_POSITIVE": ["graphNode"], 
     "DECIMAL_POSITIVE": ["graphNode"], 
     "DOUBLE_POSITIVE": ["graphNode"], 
     "INTEGER_NEGATIVE": ["graphNode"], 
     "DECIMAL_NEGATIVE": ["graphNode"], 
     "DOUBLE_NEGATIVE": ["graphNode"]}, 
  "objectList" : {
     "(": ["object","*[,,object]"], 
     "[": ["object","*[,,object]"], 
     "VAR1": ["object","*[,,object]"], 
     "VAR2": ["object","*[,,object]"], 
     "NIL": ["object","*[,,object]"], 
     "IRI_REF": ["object","*[,,object]"], 
     "TRUE": ["object","*[,,object]"], 
     "FALSE": ["object","*[,,object]"], 
     "BLANK_NODE_LABEL": ["object","*[,,object]"], 
     "ANON": ["object","*[,,object]"], 
     "PNAME_LN": ["object","*[,,object]"], 
     "PNAME_NS": ["object","*[,,object]"], 
     "STRING_LITERAL1": ["object","*[,,object]"], 
     "STRING_LITERAL2": ["object","*[,,object]"], 
     "STRING_LITERAL_LONG1": ["object","*[,,object]"], 
     "STRING_LITERAL_LONG2": ["object","*[,,object]"], 
     "INTEGER": ["object","*[,,object]"], 
     "DECIMAL": ["object","*[,,object]"], 
     "DOUBLE": ["object","*[,,object]"], 
     "INTEGER_POSITIVE": ["object","*[,,object]"], 
     "DECIMAL_POSITIVE": ["object","*[,,object]"], 
     "DOUBLE_POSITIVE": ["object","*[,,object]"], 
     "INTEGER_NEGATIVE": ["object","*[,,object]"], 
     "DECIMAL_NEGATIVE": ["object","*[,,object]"], 
     "DOUBLE_NEGATIVE": ["object","*[,,object]"]}, 
  "offsetClause" : {
     "OFFSET": ["OFFSET","INTEGER"]}, 
  "optionalGraphPattern" : {
     "OPTIONAL": ["OPTIONAL","groupGraphPattern"]}, 
  "or([*,expression])" : {
     "*": ["*"], 
     "!": ["expression"], 
     "+": ["expression"], 
     "-": ["expression"], 
     "VAR1": ["expression"], 
     "VAR2": ["expression"], 
     "(": ["expression"], 
     "STR": ["expression"], 
     "LANG": ["expression"], 
     "LANGMATCHES": ["expression"], 
     "DATATYPE": ["expression"], 
     "BOUND": ["expression"], 
     "IRI": ["expression"], 
     "URI": ["expression"], 
     "BNODE": ["expression"], 
     "RAND": ["expression"], 
     "ABS": ["expression"], 
     "CEIL": ["expression"], 
     "FLOOR": ["expression"], 
     "ROUND": ["expression"], 
     "CONCAT": ["expression"], 
     "STRLEN": ["expression"], 
     "UCASE": ["expression"], 
     "LCASE": ["expression"], 
     "ENCODE_FOR_URI": ["expression"], 
     "CONTAINS": ["expression"], 
     "STRSTARTS": ["expression"], 
     "STRENDS": ["expression"], 
     "STRBEFORE": ["expression"], 
     "STRAFTER": ["expression"], 
     "YEAR": ["expression"], 
     "MONTH": ["expression"], 
     "DAY": ["expression"], 
     "HOURS": ["expression"], 
     "MINUTES": ["expression"], 
     "SECONDS": ["expression"], 
     "TIMEZONE": ["expression"], 
     "TZ": ["expression"], 
     "NOW": ["expression"], 
     "MD5": ["expression"], 
     "SHA1": ["expression"], 
     "SHA256": ["expression"], 
     "SHA384": ["expression"], 
     "SHA512": ["expression"], 
     "COALESCE": ["expression"], 
     "IF": ["expression"], 
     "STRLANG": ["expression"], 
     "STRDT": ["expression"], 
     "SAMETERM": ["expression"], 
     "ISIRI": ["expression"], 
     "ISURI": ["expression"], 
     "ISBLANK": ["expression"], 
     "ISLITERAL": ["expression"], 
     "ISNUMERIC": ["expression"], 
     "TRUE": ["expression"], 
     "FALSE": ["expression"], 
     "COUNT": ["expression"], 
     "SUM": ["expression"], 
     "MIN": ["expression"], 
     "MAX": ["expression"], 
     "AVG": ["expression"], 
     "SAMPLE": ["expression"], 
     "GROUP_CONCAT": ["expression"], 
     "SUBSTR": ["expression"], 
     "REPLACE": ["expression"], 
     "REGEX": ["expression"], 
     "EXISTS": ["expression"], 
     "NOT": ["expression"], 
     "IRI_REF": ["expression"], 
     "STRING_LITERAL1": ["expression"], 
     "STRING_LITERAL2": ["expression"], 
     "STRING_LITERAL_LONG1": ["expression"], 
     "STRING_LITERAL_LONG2": ["expression"], 
     "INTEGER": ["expression"], 
     "DECIMAL": ["expression"], 
     "DOUBLE": ["expression"], 
     "INTEGER_POSITIVE": ["expression"], 
     "DECIMAL_POSITIVE": ["expression"], 
     "DOUBLE_POSITIVE": ["expression"], 
     "INTEGER_NEGATIVE": ["expression"], 
     "DECIMAL_NEGATIVE": ["expression"], 
     "DOUBLE_NEGATIVE": ["expression"], 
     "PNAME_LN": ["expression"], 
     "PNAME_NS": ["expression"]}, 
  "or([+or([var,[ (,expression,AS,var,)]]),*])" : {
     "(": ["+or([var,[ (,expression,AS,var,)]])"], 
     "VAR1": ["+or([var,[ (,expression,AS,var,)]])"], 
     "VAR2": ["+or([var,[ (,expression,AS,var,)]])"], 
     "*": ["*"]}, 
  "or([+varOriRIref,*])" : {
     "VAR1": ["+varOriRIref"], 
     "VAR2": ["+varOriRIref"], 
     "IRI_REF": ["+varOriRIref"], 
     "PNAME_LN": ["+varOriRIref"], 
     "PNAME_NS": ["+varOriRIref"], 
     "*": ["*"]}, 
  "or([ASC,DESC])" : {
     "ASC": ["ASC"], 
     "DESC": ["DESC"]}, 
  "or([DISTINCT,REDUCED])" : {
     "DISTINCT": ["DISTINCT"], 
     "REDUCED": ["REDUCED"]}, 
  "or([LANGTAG,[^^,iRIref]])" : {
     "LANGTAG": ["LANGTAG"], 
     "^^": ["[^^,iRIref]"]}, 
  "or([[ (,*bindingValue,)],NIL])" : {
     "(": ["[ (,*bindingValue,)]"], 
     "NIL": ["NIL"]}, 
  "or([[ (,expression,)],NIL])" : {
     "(": ["[ (,expression,)]"], 
     "NIL": ["NIL"]}, 
  "or([[*,unaryexpression],[/,unaryexpression]])" : {
     "*": ["[*,unaryexpression]"], 
     "/": ["[/,unaryexpression]"]}, 
  "or([[+,multiplicativeexpression],[-,multiplicativeexpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]])" : {
     "+": ["[+,multiplicativeexpression]"], 
     "-": ["[-,multiplicativeexpression]"], 
     "INTEGER_POSITIVE": ["[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]"], 
     "DECIMAL_POSITIVE": ["[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]"], 
     "DOUBLE_POSITIVE": ["[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]"], 
     "INTEGER_NEGATIVE": ["[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]"], 
     "DECIMAL_NEGATIVE": ["[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]"], 
     "DOUBLE_NEGATIVE": ["[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryexpression],[/,unaryexpression]])]"]}, 
  "or([[,,or([},[integer,}]])],}])" : {
     ",": ["[,,or([},[integer,}]])]"], 
     "}": ["}"]}, 
  "or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])" : {
     "=": ["[=,numericexpression]"], 
     "!=": ["[!=,numericexpression]"], 
     "<": ["[<,numericexpression]"], 
     ">": ["[>,numericexpression]"], 
     "<=": ["[<=,numericexpression]"], 
     ">=": ["[>=,numericexpression]"], 
     "IN": ["[IN,expressionList]"], 
     "NOT": ["[NOT,IN,expressionList]"]}, 
  "or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])" : {
     "{": ["[constructTemplate,*datasetClause,whereClause,solutionModifier]"], 
     "WHERE": ["[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]"], 
     "FROM": ["[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]"]}, 
  "or([[deleteClause,?insertClause],insertClause])" : {
     "DELETE": ["[deleteClause,?insertClause]"], 
     "INSERT": ["insertClause"]}, 
  "or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])" : {
     "INTEGER": ["[integer,or([[,,or([},[integer,}]])],}])]"], 
     ",": ["[,,integer,}]"]}, 
  "or([baseDecl,prefixDecl])" : {
     "BASE": ["baseDecl"], 
     "PREFIX": ["prefixDecl"]}, 
  "or([constraint,var])" : {
     "(": ["constraint"], 
     "STR": ["constraint"], 
     "LANG": ["constraint"], 
     "LANGMATCHES": ["constraint"], 
     "DATATYPE": ["constraint"], 
     "BOUND": ["constraint"], 
     "IRI": ["constraint"], 
     "URI": ["constraint"], 
     "BNODE": ["constraint"], 
     "RAND": ["constraint"], 
     "ABS": ["constraint"], 
     "CEIL": ["constraint"], 
     "FLOOR": ["constraint"], 
     "ROUND": ["constraint"], 
     "CONCAT": ["constraint"], 
     "STRLEN": ["constraint"], 
     "UCASE": ["constraint"], 
     "LCASE": ["constraint"], 
     "ENCODE_FOR_URI": ["constraint"], 
     "CONTAINS": ["constraint"], 
     "STRSTARTS": ["constraint"], 
     "STRENDS": ["constraint"], 
     "STRBEFORE": ["constraint"], 
     "STRAFTER": ["constraint"], 
     "YEAR": ["constraint"], 
     "MONTH": ["constraint"], 
     "DAY": ["constraint"], 
     "HOURS": ["constraint"], 
     "MINUTES": ["constraint"], 
     "SECONDS": ["constraint"], 
     "TIMEZONE": ["constraint"], 
     "TZ": ["constraint"], 
     "NOW": ["constraint"], 
     "MD5": ["constraint"], 
     "SHA1": ["constraint"], 
     "SHA256": ["constraint"], 
     "SHA384": ["constraint"], 
     "SHA512": ["constraint"], 
     "COALESCE": ["constraint"], 
     "IF": ["constraint"], 
     "STRLANG": ["constraint"], 
     "STRDT": ["constraint"], 
     "SAMETERM": ["constraint"], 
     "ISIRI": ["constraint"], 
     "ISURI": ["constraint"], 
     "ISBLANK": ["constraint"], 
     "ISLITERAL": ["constraint"], 
     "ISNUMERIC": ["constraint"], 
     "SUBSTR": ["constraint"], 
     "REPLACE": ["constraint"], 
     "REGEX": ["constraint"], 
     "EXISTS": ["constraint"], 
     "NOT": ["constraint"], 
     "IRI_REF": ["constraint"], 
     "PNAME_LN": ["constraint"], 
     "PNAME_NS": ["constraint"], 
     "VAR1": ["var"], 
     "VAR2": ["var"]}, 
  "or([defaultGraphClause,namedGraphClause])" : {
     "IRI_REF": ["defaultGraphClause"], 
     "PNAME_LN": ["defaultGraphClause"], 
     "PNAME_NS": ["defaultGraphClause"], 
     "NAMED": ["namedGraphClause"]}, 
  "or([iRIref,[NAMED,iRIref]])" : {
     "IRI_REF": ["iRIref"], 
     "PNAME_LN": ["iRIref"], 
     "PNAME_NS": ["iRIref"], 
     "NAMED": ["[NAMED,iRIref]"]}, 
  "or([iRIref,a])" : {
     "IRI_REF": ["iRIref"], 
     "PNAME_LN": ["iRIref"], 
     "PNAME_NS": ["iRIref"], 
     "a": ["a"]}, 
  "or([numericLiteralPositive,numericLiteralNegative])" : {
     "INTEGER_POSITIVE": ["numericLiteralPositive"], 
     "DECIMAL_POSITIVE": ["numericLiteralPositive"], 
     "DOUBLE_POSITIVE": ["numericLiteralPositive"], 
     "INTEGER_NEGATIVE": ["numericLiteralNegative"], 
     "DECIMAL_NEGATIVE": ["numericLiteralNegative"], 
     "DOUBLE_NEGATIVE": ["numericLiteralNegative"]}, 
  "or([selectquery,constructquery,describequery,askquery])" : {
     "SELECT": ["selectquery"], 
     "CONSTRUCT": ["constructquery"], 
     "DESCRIBE": ["describequery"], 
     "ASK": ["askquery"]}, 
  "or([subSelect,groupGraphPatternSub])" : {
     "SELECT": ["subSelect"], 
     "{": ["groupGraphPatternSub"], 
     "OPTIONAL": ["groupGraphPatternSub"], 
     "MINUS": ["groupGraphPatternSub"], 
     "GRAPH": ["groupGraphPatternSub"], 
     "SERVICE": ["groupGraphPatternSub"], 
     "FILTER": ["groupGraphPatternSub"], 
     "BIND": ["groupGraphPatternSub"], 
     "VAR1": ["groupGraphPatternSub"], 
     "VAR2": ["groupGraphPatternSub"], 
     "NIL": ["groupGraphPatternSub"], 
     "(": ["groupGraphPatternSub"], 
     "[": ["groupGraphPatternSub"], 
     "IRI_REF": ["groupGraphPatternSub"], 
     "TRUE": ["groupGraphPatternSub"], 
     "FALSE": ["groupGraphPatternSub"], 
     "BLANK_NODE_LABEL": ["groupGraphPatternSub"], 
     "ANON": ["groupGraphPatternSub"], 
     "PNAME_LN": ["groupGraphPatternSub"], 
     "PNAME_NS": ["groupGraphPatternSub"], 
     "STRING_LITERAL1": ["groupGraphPatternSub"], 
     "STRING_LITERAL2": ["groupGraphPatternSub"], 
     "STRING_LITERAL_LONG1": ["groupGraphPatternSub"], 
     "STRING_LITERAL_LONG2": ["groupGraphPatternSub"], 
     "INTEGER": ["groupGraphPatternSub"], 
     "DECIMAL": ["groupGraphPatternSub"], 
     "DOUBLE": ["groupGraphPatternSub"], 
     "INTEGER_POSITIVE": ["groupGraphPatternSub"], 
     "DECIMAL_POSITIVE": ["groupGraphPatternSub"], 
     "DOUBLE_POSITIVE": ["groupGraphPatternSub"], 
     "INTEGER_NEGATIVE": ["groupGraphPatternSub"], 
     "DECIMAL_NEGATIVE": ["groupGraphPatternSub"], 
     "DOUBLE_NEGATIVE": ["groupGraphPatternSub"], 
     "}": ["groupGraphPatternSub"]}, 
  "or([var,[ (,expression,AS,var,)]])" : {
     "VAR1": ["var"], 
     "VAR2": ["var"], 
     "(": ["[ (,expression,AS,var,)]"]}, 
  "or([verbpath,verbSimple])" : {
     "^": ["verbpath"], 
     "a": ["verbpath"], 
     "!": ["verbpath"], 
     "(": ["verbpath"], 
     "IRI_REF": ["verbpath"], 
     "PNAME_LN": ["verbpath"], 
     "PNAME_NS": ["verbpath"], 
     "VAR1": ["verbSimple"], 
     "VAR2": ["verbSimple"]}, 
  "or([},[integer,}]])" : {
     "}": ["}"], 
     "INTEGER": ["[integer,}]"]}, 
  "orderClause" : {
     "ORDER": ["ORDER","BY","+orderCondition"]}, 
  "orderCondition" : {
     "ASC": ["or([ASC,DESC])","brackettedexpression"], 
     "DESC": ["or([ASC,DESC])","brackettedexpression"], 
     "VAR1": ["or([constraint,var])"], 
     "VAR2": ["or([constraint,var])"], 
     "(": ["or([constraint,var])"], 
     "STR": ["or([constraint,var])"], 
     "LANG": ["or([constraint,var])"], 
     "LANGMATCHES": ["or([constraint,var])"], 
     "DATATYPE": ["or([constraint,var])"], 
     "BOUND": ["or([constraint,var])"], 
     "IRI": ["or([constraint,var])"], 
     "URI": ["or([constraint,var])"], 
     "BNODE": ["or([constraint,var])"], 
     "RAND": ["or([constraint,var])"], 
     "ABS": ["or([constraint,var])"], 
     "CEIL": ["or([constraint,var])"], 
     "FLOOR": ["or([constraint,var])"], 
     "ROUND": ["or([constraint,var])"], 
     "CONCAT": ["or([constraint,var])"], 
     "STRLEN": ["or([constraint,var])"], 
     "UCASE": ["or([constraint,var])"], 
     "LCASE": ["or([constraint,var])"], 
     "ENCODE_FOR_URI": ["or([constraint,var])"], 
     "CONTAINS": ["or([constraint,var])"], 
     "STRSTARTS": ["or([constraint,var])"], 
     "STRENDS": ["or([constraint,var])"], 
     "STRBEFORE": ["or([constraint,var])"], 
     "STRAFTER": ["or([constraint,var])"], 
     "YEAR": ["or([constraint,var])"], 
     "MONTH": ["or([constraint,var])"], 
     "DAY": ["or([constraint,var])"], 
     "HOURS": ["or([constraint,var])"], 
     "MINUTES": ["or([constraint,var])"], 
     "SECONDS": ["or([constraint,var])"], 
     "TIMEZONE": ["or([constraint,var])"], 
     "TZ": ["or([constraint,var])"], 
     "NOW": ["or([constraint,var])"], 
     "MD5": ["or([constraint,var])"], 
     "SHA1": ["or([constraint,var])"], 
     "SHA256": ["or([constraint,var])"], 
     "SHA384": ["or([constraint,var])"], 
     "SHA512": ["or([constraint,var])"], 
     "COALESCE": ["or([constraint,var])"], 
     "IF": ["or([constraint,var])"], 
     "STRLANG": ["or([constraint,var])"], 
     "STRDT": ["or([constraint,var])"], 
     "SAMETERM": ["or([constraint,var])"], 
     "ISIRI": ["or([constraint,var])"], 
     "ISURI": ["or([constraint,var])"], 
     "ISBLANK": ["or([constraint,var])"], 
     "ISLITERAL": ["or([constraint,var])"], 
     "ISNUMERIC": ["or([constraint,var])"], 
     "SUBSTR": ["or([constraint,var])"], 
     "REPLACE": ["or([constraint,var])"], 
     "REGEX": ["or([constraint,var])"], 
     "EXISTS": ["or([constraint,var])"], 
     "NOT": ["or([constraint,var])"], 
     "IRI_REF": ["or([constraint,var])"], 
     "PNAME_LN": ["or([constraint,var])"], 
     "PNAME_NS": ["or([constraint,var])"]}, 
  "path" : {
     "^": ["pathAlternative"], 
     "a": ["pathAlternative"], 
     "!": ["pathAlternative"], 
     "(": ["pathAlternative"], 
     "IRI_REF": ["pathAlternative"], 
     "PNAME_LN": ["pathAlternative"], 
     "PNAME_NS": ["pathAlternative"]}, 
  "pathAlternative" : {
     "^": ["pathSequence","*[|,pathSequence]"], 
     "a": ["pathSequence","*[|,pathSequence]"], 
     "!": ["pathSequence","*[|,pathSequence]"], 
     "(": ["pathSequence","*[|,pathSequence]"], 
     "IRI_REF": ["pathSequence","*[|,pathSequence]"], 
     "PNAME_LN": ["pathSequence","*[|,pathSequence]"], 
     "PNAME_NS": ["pathSequence","*[|,pathSequence]"]}, 
  "pathElt" : {
     "a": ["pathPrimary","?pathMod"], 
     "!": ["pathPrimary","?pathMod"], 
     "(": ["pathPrimary","?pathMod"], 
     "IRI_REF": ["pathPrimary","?pathMod"], 
     "PNAME_LN": ["pathPrimary","?pathMod"], 
     "PNAME_NS": ["pathPrimary","?pathMod"]}, 
  "pathEltOrInverse" : {
     "a": ["pathElt"], 
     "!": ["pathElt"], 
     "(": ["pathElt"], 
     "IRI_REF": ["pathElt"], 
     "PNAME_LN": ["pathElt"], 
     "PNAME_NS": ["pathElt"], 
     "^": ["^","pathElt"]}, 
  "pathMod" : {
     "*": ["*"], 
     "?": ["?"], 
     "+": ["+"], 
     "{": ["{","or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])"]}, 
  "pathNegatedPropertySet" : {
     "a": ["pathOneInPropertySet"], 
     "^": ["pathOneInPropertySet"], 
     "IRI_REF": ["pathOneInPropertySet"], 
     "PNAME_LN": ["pathOneInPropertySet"], 
     "PNAME_NS": ["pathOneInPropertySet"], 
     "(": ["(","?[pathOneInPropertySet,*[|,pathOneInPropertySet]]",")"]}, 
  "pathOneInPropertySet" : {
     "IRI_REF": ["iRIref"], 
     "PNAME_LN": ["iRIref"], 
     "PNAME_NS": ["iRIref"], 
     "a": ["a"], 
     "^": ["^","or([iRIref,a])"]}, 
  "pathPrimary" : {
     "IRI_REF": ["iRIref"], 
     "PNAME_LN": ["iRIref"], 
     "PNAME_NS": ["iRIref"], 
     "a": ["a"], 
     "!": ["!","pathNegatedPropertySet"], 
     "(": ["(","path",")"]}, 
  "pathSequence" : {
     "^": ["pathEltOrInverse","*[/,pathEltOrInverse]"], 
     "a": ["pathEltOrInverse","*[/,pathEltOrInverse]"], 
     "!": ["pathEltOrInverse","*[/,pathEltOrInverse]"], 
     "(": ["pathEltOrInverse","*[/,pathEltOrInverse]"], 
     "IRI_REF": ["pathEltOrInverse","*[/,pathEltOrInverse]"], 
     "PNAME_LN": ["pathEltOrInverse","*[/,pathEltOrInverse]"], 
     "PNAME_NS": ["pathEltOrInverse","*[/,pathEltOrInverse]"]}, 
  "prefixDecl" : {
     "PREFIX": ["PREFIX","PNAME_NS","IRI_REF"]}, 
  "prefixedName" : {
     "PNAME_LN": ["PNAME_LN"], 
     "PNAME_NS": ["PNAME_NS"]}, 
  "primaryexpression" : {
     "(": ["brackettedexpression"], 
     "STR": ["builtInCall"], 
     "LANG": ["builtInCall"], 
     "LANGMATCHES": ["builtInCall"], 
     "DATATYPE": ["builtInCall"], 
     "BOUND": ["builtInCall"], 
     "IRI": ["builtInCall"], 
     "URI": ["builtInCall"], 
     "BNODE": ["builtInCall"], 
     "RAND": ["builtInCall"], 
     "ABS": ["builtInCall"], 
     "CEIL": ["builtInCall"], 
     "FLOOR": ["builtInCall"], 
     "ROUND": ["builtInCall"], 
     "CONCAT": ["builtInCall"], 
     "STRLEN": ["builtInCall"], 
     "UCASE": ["builtInCall"], 
     "LCASE": ["builtInCall"], 
     "ENCODE_FOR_URI": ["builtInCall"], 
     "CONTAINS": ["builtInCall"], 
     "STRSTARTS": ["builtInCall"], 
     "STRENDS": ["builtInCall"], 
     "STRBEFORE": ["builtInCall"], 
     "STRAFTER": ["builtInCall"], 
     "YEAR": ["builtInCall"], 
     "MONTH": ["builtInCall"], 
     "DAY": ["builtInCall"], 
     "HOURS": ["builtInCall"], 
     "MINUTES": ["builtInCall"], 
     "SECONDS": ["builtInCall"], 
     "TIMEZONE": ["builtInCall"], 
     "TZ": ["builtInCall"], 
     "NOW": ["builtInCall"], 
     "MD5": ["builtInCall"], 
     "SHA1": ["builtInCall"], 
     "SHA256": ["builtInCall"], 
     "SHA384": ["builtInCall"], 
     "SHA512": ["builtInCall"], 
     "COALESCE": ["builtInCall"], 
     "IF": ["builtInCall"], 
     "STRLANG": ["builtInCall"], 
     "STRDT": ["builtInCall"], 
     "SAMETERM": ["builtInCall"], 
     "ISIRI": ["builtInCall"], 
     "ISURI": ["builtInCall"], 
     "ISBLANK": ["builtInCall"], 
     "ISLITERAL": ["builtInCall"], 
     "ISNUMERIC": ["builtInCall"], 
     "SUBSTR": ["builtInCall"], 
     "REPLACE": ["builtInCall"], 
     "REGEX": ["builtInCall"], 
     "EXISTS": ["builtInCall"], 
     "NOT": ["builtInCall"], 
     "IRI_REF": ["iRIrefOrFunction"], 
     "PNAME_LN": ["iRIrefOrFunction"], 
     "PNAME_NS": ["iRIrefOrFunction"], 
     "STRING_LITERAL1": ["rDFLiteral"], 
     "STRING_LITERAL2": ["rDFLiteral"], 
     "STRING_LITERAL_LONG1": ["rDFLiteral"], 
     "STRING_LITERAL_LONG2": ["rDFLiteral"], 
     "INTEGER": ["numericLiteral"], 
     "DECIMAL": ["numericLiteral"], 
     "DOUBLE": ["numericLiteral"], 
     "INTEGER_POSITIVE": ["numericLiteral"], 
     "DECIMAL_POSITIVE": ["numericLiteral"], 
     "DOUBLE_POSITIVE": ["numericLiteral"], 
     "INTEGER_NEGATIVE": ["numericLiteral"], 
     "DECIMAL_NEGATIVE": ["numericLiteral"], 
     "DOUBLE_NEGATIVE": ["numericLiteral"], 
     "TRUE": ["booleanLiteral"], 
     "FALSE": ["booleanLiteral"], 
     "VAR1": ["var"], 
     "VAR2": ["var"], 
     "COUNT": ["aggregate"], 
     "SUM": ["aggregate"], 
     "MIN": ["aggregate"], 
     "MAX": ["aggregate"], 
     "AVG": ["aggregate"], 
     "SAMPLE": ["aggregate"], 
     "GROUP_CONCAT": ["aggregate"]}, 
  "prologue" : {
     "BASE": ["*or([baseDecl,prefixDecl])"], 
     "PREFIX": ["*or([baseDecl,prefixDecl])"], 
     "CONSTRUCT": ["*or([baseDecl,prefixDecl])"], 
     "DESCRIBE": ["*or([baseDecl,prefixDecl])"], 
     "ASK": ["*or([baseDecl,prefixDecl])"], 
     "SELECT": ["*or([baseDecl,prefixDecl])"], 
     "LOAD": ["*or([baseDecl,prefixDecl])"], 
     "CLEAR": ["*or([baseDecl,prefixDecl])"], 
     "DROP": ["*or([baseDecl,prefixDecl])"], 
     "ADD": ["*or([baseDecl,prefixDecl])"], 
     "MOVE": ["*or([baseDecl,prefixDecl])"], 
     "COPY": ["*or([baseDecl,prefixDecl])"], 
     "CREATE": ["*or([baseDecl,prefixDecl])"], 
     "INSERT DATA": ["*or([baseDecl,prefixDecl])"], 
     "DELETE DATA": ["*or([baseDecl,prefixDecl])"], 
     "DELETE WHERE": ["*or([baseDecl,prefixDecl])"], 
     "WITH": ["*or([baseDecl,prefixDecl])"], 
     "DELETE": ["*or([baseDecl,prefixDecl])"], 
     "INSERT": ["*or([baseDecl,prefixDecl])"]}, 
  "propertyList" : {
     "a": ["?propertyListNotEmpty"], 
     "VAR1": ["?propertyListNotEmpty"], 
     "VAR2": ["?propertyListNotEmpty"], 
     "IRI_REF": ["?propertyListNotEmpty"], 
     "PNAME_LN": ["?propertyListNotEmpty"], 
     "PNAME_NS": ["?propertyListNotEmpty"], 
     ".": ["?propertyListNotEmpty"], 
     "}": ["?propertyListNotEmpty"], 
     "GRAPH": ["?propertyListNotEmpty"]}, 
  "propertyListNotEmpty" : {
     "a": ["verb","objectList","*[;,?[verb,objectList]]"], 
     "VAR1": ["verb","objectList","*[;,?[verb,objectList]]"], 
     "VAR2": ["verb","objectList","*[;,?[verb,objectList]]"], 
     "IRI_REF": ["verb","objectList","*[;,?[verb,objectList]]"], 
     "PNAME_LN": ["verb","objectList","*[;,?[verb,objectList]]"], 
     "PNAME_NS": ["verb","objectList","*[;,?[verb,objectList]]"]}, 
  "propertyListNotEmptypath" : {
     "VAR1": ["or([verbpath,verbSimple])","objectList","*[;,?[or([verbpath,verbSimple]),objectList]]"], 
     "VAR2": ["or([verbpath,verbSimple])","objectList","*[;,?[or([verbpath,verbSimple]),objectList]]"], 
     "^": ["or([verbpath,verbSimple])","objectList","*[;,?[or([verbpath,verbSimple]),objectList]]"], 
     "a": ["or([verbpath,verbSimple])","objectList","*[;,?[or([verbpath,verbSimple]),objectList]]"], 
     "!": ["or([verbpath,verbSimple])","objectList","*[;,?[or([verbpath,verbSimple]),objectList]]"], 
     "(": ["or([verbpath,verbSimple])","objectList","*[;,?[or([verbpath,verbSimple]),objectList]]"], 
     "IRI_REF": ["or([verbpath,verbSimple])","objectList","*[;,?[or([verbpath,verbSimple]),objectList]]"], 
     "PNAME_LN": ["or([verbpath,verbSimple])","objectList","*[;,?[or([verbpath,verbSimple]),objectList]]"], 
     "PNAME_NS": ["or([verbpath,verbSimple])","objectList","*[;,?[or([verbpath,verbSimple]),objectList]]"]}, 
  "propertyListpath" : {
     "a": ["?propertyListNotEmpty"], 
     "VAR1": ["?propertyListNotEmpty"], 
     "VAR2": ["?propertyListNotEmpty"], 
     "IRI_REF": ["?propertyListNotEmpty"], 
     "PNAME_LN": ["?propertyListNotEmpty"], 
     "PNAME_NS": ["?propertyListNotEmpty"], 
     ".": ["?propertyListNotEmpty"], 
     "{": ["?propertyListNotEmpty"], 
     "OPTIONAL": ["?propertyListNotEmpty"], 
     "MINUS": ["?propertyListNotEmpty"], 
     "GRAPH": ["?propertyListNotEmpty"], 
     "SERVICE": ["?propertyListNotEmpty"], 
     "FILTER": ["?propertyListNotEmpty"], 
     "BIND": ["?propertyListNotEmpty"], 
     "}": ["?propertyListNotEmpty"]}, 
  "quadData" : {
     "{": ["{","quads","}"]}, 
  "quadPattern" : {
     "{": ["{","quads","}"]}, 
  "quads" : {
     "GRAPH": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "VAR1": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "VAR2": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "NIL": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "(": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "[": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "IRI_REF": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "TRUE": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "FALSE": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "BLANK_NODE_LABEL": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "ANON": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "PNAME_LN": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "PNAME_NS": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "STRING_LITERAL1": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "STRING_LITERAL2": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "STRING_LITERAL_LONG1": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "STRING_LITERAL_LONG2": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "INTEGER": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "DECIMAL": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "DOUBLE": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "INTEGER_POSITIVE": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "DECIMAL_POSITIVE": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "DOUBLE_POSITIVE": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "INTEGER_NEGATIVE": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "DECIMAL_NEGATIVE": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "DOUBLE_NEGATIVE": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"], 
     "}": ["?triplesTemplate","*[quadsNotTriples,?.,?triplesTemplate]"]}, 
  "quadsNotTriples" : {
     "GRAPH": ["GRAPH","varOriRIref","{","?triplesTemplate","}"]}, 
  "query" : {
     "CONSTRUCT": ["prologue","or([selectquery,constructquery,describequery,askquery])","bindingsClause"], 
     "DESCRIBE": ["prologue","or([selectquery,constructquery,describequery,askquery])","bindingsClause"], 
     "ASK": ["prologue","or([selectquery,constructquery,describequery,askquery])","bindingsClause"], 
     "SELECT": ["prologue","or([selectquery,constructquery,describequery,askquery])","bindingsClause"], 
     "BASE": ["prologue","or([selectquery,constructquery,describequery,askquery])","bindingsClause"], 
     "PREFIX": ["prologue","or([selectquery,constructquery,describequery,askquery])","bindingsClause"]}, 
  "queryUnit" : {
     "CONSTRUCT": ["query"], 
     "DESCRIBE": ["query"], 
     "ASK": ["query"], 
     "SELECT": ["query"], 
     "BASE": ["query"], 
     "PREFIX": ["query"]}, 
  "rDFLiteral" : {
     "STRING_LITERAL1": ["string","?or([LANGTAG,[^^,iRIref]])"], 
     "STRING_LITERAL2": ["string","?or([LANGTAG,[^^,iRIref]])"], 
     "STRING_LITERAL_LONG1": ["string","?or([LANGTAG,[^^,iRIref]])"], 
     "STRING_LITERAL_LONG2": ["string","?or([LANGTAG,[^^,iRIref]])"]}, 
  "regexexpression" : {
     "REGEX": ["REGEX","(","expression",",","expression","?[,,expression]",")"]}, 
  "relationalexpression" : {
     "!": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "+": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "-": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "VAR1": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "VAR2": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "(": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "STR": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "LANG": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "LANGMATCHES": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "DATATYPE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "BOUND": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "IRI": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "URI": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "BNODE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "RAND": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "ABS": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "CEIL": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "FLOOR": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "ROUND": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "CONCAT": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "STRLEN": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "UCASE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "LCASE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "ENCODE_FOR_URI": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "CONTAINS": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "STRSTARTS": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "STRENDS": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "STRBEFORE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "STRAFTER": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "YEAR": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "MONTH": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "DAY": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "HOURS": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "MINUTES": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "SECONDS": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "TIMEZONE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "TZ": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "NOW": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "MD5": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "SHA1": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "SHA256": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "SHA384": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "SHA512": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "COALESCE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "IF": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "STRLANG": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "STRDT": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "SAMETERM": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "ISIRI": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "ISURI": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "ISBLANK": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "ISLITERAL": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "ISNUMERIC": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "TRUE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "FALSE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "COUNT": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "SUM": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "MIN": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "MAX": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "AVG": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "SAMPLE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "GROUP_CONCAT": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "SUBSTR": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "REPLACE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "REGEX": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "EXISTS": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "NOT": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "IRI_REF": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "STRING_LITERAL1": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "STRING_LITERAL2": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "STRING_LITERAL_LONG1": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "STRING_LITERAL_LONG2": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "INTEGER": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "DECIMAL": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "DOUBLE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "INTEGER_POSITIVE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "DECIMAL_POSITIVE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "DOUBLE_POSITIVE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "INTEGER_NEGATIVE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "DECIMAL_NEGATIVE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "DOUBLE_NEGATIVE": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "PNAME_LN": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"], 
     "PNAME_NS": ["numericexpression","?or([[=,numericexpression],[!=,numericexpression],[<,numericexpression],[>,numericexpression],[<=,numericexpression],[>=,numericexpression],[IN,expressionList],[NOT,IN,expressionList]])"]}, 
  "s" : {
     "CONSTRUCT": ["query","$"], 
     "DESCRIBE": ["query","$"], 
     "ASK": ["query","$"], 
     "SELECT": ["query","$"], 
     "BASE": ["query","$"], 
     "PREFIX": ["query","$"]}, 
  "selectClause" : {
     "SELECT": ["SELECT","?or([DISTINCT,REDUCED])","or([+or([var,[ (,expression,AS,var,)]]),*])"]}, 
  "selectquery" : {
     "SELECT": ["selectClause","*datasetClause","whereClause","solutionModifier"]}, 
  "serviceGraphPattern" : {
     "SERVICE": ["SERVICE","?SILENT","varOriRIref","groupGraphPattern"]}, 
  "solutionModifier" : {
     "LIMIT": ["?groupClause","?havingClause","?orderClause","?limitoffsetClauses"], 
     "OFFSET": ["?groupClause","?havingClause","?orderClause","?limitoffsetClauses"], 
     "ORDER": ["?groupClause","?havingClause","?orderClause","?limitoffsetClauses"], 
     "HAVING": ["?groupClause","?havingClause","?orderClause","?limitoffsetClauses"], 
     "GROUP": ["?groupClause","?havingClause","?orderClause","?limitoffsetClauses"], 
     "$": ["?groupClause","?havingClause","?orderClause","?limitoffsetClauses"], 
     "BINDINGS": ["?groupClause","?havingClause","?orderClause","?limitoffsetClauses"], 
     "}": ["?groupClause","?havingClause","?orderClause","?limitoffsetClauses"]}, 
  "sourceSelector" : {
     "IRI_REF": ["iRIref"], 
     "PNAME_LN": ["iRIref"], 
     "PNAME_NS": ["iRIref"]}, 
  "strReplaceexpression" : {
     "REPLACE": ["REPLACE","(","expression",",","expression",",","expression","?[,,expression]",")"]}, 
  "string" : {
     "STRING_LITERAL1": ["STRING_LITERAL1"], 
     "STRING_LITERAL2": ["STRING_LITERAL2"], 
     "STRING_LITERAL_LONG1": ["STRING_LITERAL_LONG1"], 
     "STRING_LITERAL_LONG2": ["STRING_LITERAL_LONG2"]}, 
  "subSelect" : {
     "SELECT": ["selectClause","whereClause","solutionModifier"]}, 
  "substringexpression" : {
     "SUBSTR": ["SUBSTR","(","expression",",","expression","?[,,expression]",")"]}, 
  "triplesBlock" : {
     "VAR1": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "VAR2": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "NIL": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "(": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "[": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "IRI_REF": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "TRUE": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "FALSE": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "BLANK_NODE_LABEL": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "ANON": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "PNAME_LN": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "PNAME_NS": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "STRING_LITERAL1": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "STRING_LITERAL2": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "STRING_LITERAL_LONG1": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "STRING_LITERAL_LONG2": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "INTEGER": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "DECIMAL": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "DOUBLE": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "INTEGER_POSITIVE": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "DECIMAL_POSITIVE": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "DOUBLE_POSITIVE": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "INTEGER_NEGATIVE": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "DECIMAL_NEGATIVE": ["triplesSameSubjectpath","?[.,?triplesBlock]"], 
     "DOUBLE_NEGATIVE": ["triplesSameSubjectpath","?[.,?triplesBlock]"]}, 
  "triplesNode" : {
     "(": ["collection"], 
     "[": ["blankNodepropertyList"]}, 
  "triplesSameSubject" : {
     "VAR1": ["varOrTerm","propertyListNotEmpty"], 
     "VAR2": ["varOrTerm","propertyListNotEmpty"], 
     "NIL": ["varOrTerm","propertyListNotEmpty"], 
     "IRI_REF": ["varOrTerm","propertyListNotEmpty"], 
     "TRUE": ["varOrTerm","propertyListNotEmpty"], 
     "FALSE": ["varOrTerm","propertyListNotEmpty"], 
     "BLANK_NODE_LABEL": ["varOrTerm","propertyListNotEmpty"], 
     "ANON": ["varOrTerm","propertyListNotEmpty"], 
     "PNAME_LN": ["varOrTerm","propertyListNotEmpty"], 
     "PNAME_NS": ["varOrTerm","propertyListNotEmpty"], 
     "STRING_LITERAL1": ["varOrTerm","propertyListNotEmpty"], 
     "STRING_LITERAL2": ["varOrTerm","propertyListNotEmpty"], 
     "STRING_LITERAL_LONG1": ["varOrTerm","propertyListNotEmpty"], 
     "STRING_LITERAL_LONG2": ["varOrTerm","propertyListNotEmpty"], 
     "INTEGER": ["varOrTerm","propertyListNotEmpty"], 
     "DECIMAL": ["varOrTerm","propertyListNotEmpty"], 
     "DOUBLE": ["varOrTerm","propertyListNotEmpty"], 
     "INTEGER_POSITIVE": ["varOrTerm","propertyListNotEmpty"], 
     "DECIMAL_POSITIVE": ["varOrTerm","propertyListNotEmpty"], 
     "DOUBLE_POSITIVE": ["varOrTerm","propertyListNotEmpty"], 
     "INTEGER_NEGATIVE": ["varOrTerm","propertyListNotEmpty"], 
     "DECIMAL_NEGATIVE": ["varOrTerm","propertyListNotEmpty"], 
     "DOUBLE_NEGATIVE": ["varOrTerm","propertyListNotEmpty"], 
     "(": ["triplesNode","propertyList"], 
     "[": ["triplesNode","propertyList"]}, 
  "triplesSameSubjectpath" : {
     "VAR1": ["varOrTerm","propertyListNotEmptypath"], 
     "VAR2": ["varOrTerm","propertyListNotEmptypath"], 
     "NIL": ["varOrTerm","propertyListNotEmptypath"], 
     "IRI_REF": ["varOrTerm","propertyListNotEmptypath"], 
     "TRUE": ["varOrTerm","propertyListNotEmptypath"], 
     "FALSE": ["varOrTerm","propertyListNotEmptypath"], 
     "BLANK_NODE_LABEL": ["varOrTerm","propertyListNotEmptypath"], 
     "ANON": ["varOrTerm","propertyListNotEmptypath"], 
     "PNAME_LN": ["varOrTerm","propertyListNotEmptypath"], 
     "PNAME_NS": ["varOrTerm","propertyListNotEmptypath"], 
     "STRING_LITERAL1": ["varOrTerm","propertyListNotEmptypath"], 
     "STRING_LITERAL2": ["varOrTerm","propertyListNotEmptypath"], 
     "STRING_LITERAL_LONG1": ["varOrTerm","propertyListNotEmptypath"], 
     "STRING_LITERAL_LONG2": ["varOrTerm","propertyListNotEmptypath"], 
     "INTEGER": ["varOrTerm","propertyListNotEmptypath"], 
     "DECIMAL": ["varOrTerm","propertyListNotEmptypath"], 
     "DOUBLE": ["varOrTerm","propertyListNotEmptypath"], 
     "INTEGER_POSITIVE": ["varOrTerm","propertyListNotEmptypath"], 
     "DECIMAL_POSITIVE": ["varOrTerm","propertyListNotEmptypath"], 
     "DOUBLE_POSITIVE": ["varOrTerm","propertyListNotEmptypath"], 
     "INTEGER_NEGATIVE": ["varOrTerm","propertyListNotEmptypath"], 
     "DECIMAL_NEGATIVE": ["varOrTerm","propertyListNotEmptypath"], 
     "DOUBLE_NEGATIVE": ["varOrTerm","propertyListNotEmptypath"], 
     "(": ["triplesNode","propertyListpath"], 
     "[": ["triplesNode","propertyListpath"]}, 
  "triplesTemplate" : {
     "VAR1": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "VAR2": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "NIL": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "(": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "[": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "IRI_REF": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "TRUE": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "FALSE": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "BLANK_NODE_LABEL": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "ANON": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "PNAME_LN": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "PNAME_NS": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "STRING_LITERAL1": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "STRING_LITERAL2": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "STRING_LITERAL_LONG1": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "STRING_LITERAL_LONG2": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "INTEGER": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "DECIMAL": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "DOUBLE": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "INTEGER_POSITIVE": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "DECIMAL_POSITIVE": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "DOUBLE_POSITIVE": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "INTEGER_NEGATIVE": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "DECIMAL_NEGATIVE": ["triplesSameSubject","?[.,?triplesTemplate]"], 
     "DOUBLE_NEGATIVE": ["triplesSameSubject","?[.,?triplesTemplate]"]}, 
  "unaryexpression" : {
     "!": ["!","primaryexpression"], 
     "+": ["+","primaryexpression"], 
     "-": ["-","primaryexpression"], 
     "VAR1": ["primaryexpression"], 
     "VAR2": ["primaryexpression"], 
     "(": ["primaryexpression"], 
     "STR": ["primaryexpression"], 
     "LANG": ["primaryexpression"], 
     "LANGMATCHES": ["primaryexpression"], 
     "DATATYPE": ["primaryexpression"], 
     "BOUND": ["primaryexpression"], 
     "IRI": ["primaryexpression"], 
     "URI": ["primaryexpression"], 
     "BNODE": ["primaryexpression"], 
     "RAND": ["primaryexpression"], 
     "ABS": ["primaryexpression"], 
     "CEIL": ["primaryexpression"], 
     "FLOOR": ["primaryexpression"], 
     "ROUND": ["primaryexpression"], 
     "CONCAT": ["primaryexpression"], 
     "STRLEN": ["primaryexpression"], 
     "UCASE": ["primaryexpression"], 
     "LCASE": ["primaryexpression"], 
     "ENCODE_FOR_URI": ["primaryexpression"], 
     "CONTAINS": ["primaryexpression"], 
     "STRSTARTS": ["primaryexpression"], 
     "STRENDS": ["primaryexpression"], 
     "STRBEFORE": ["primaryexpression"], 
     "STRAFTER": ["primaryexpression"], 
     "YEAR": ["primaryexpression"], 
     "MONTH": ["primaryexpression"], 
     "DAY": ["primaryexpression"], 
     "HOURS": ["primaryexpression"], 
     "MINUTES": ["primaryexpression"], 
     "SECONDS": ["primaryexpression"], 
     "TIMEZONE": ["primaryexpression"], 
     "TZ": ["primaryexpression"], 
     "NOW": ["primaryexpression"], 
     "MD5": ["primaryexpression"], 
     "SHA1": ["primaryexpression"], 
     "SHA256": ["primaryexpression"], 
     "SHA384": ["primaryexpression"], 
     "SHA512": ["primaryexpression"], 
     "COALESCE": ["primaryexpression"], 
     "IF": ["primaryexpression"], 
     "STRLANG": ["primaryexpression"], 
     "STRDT": ["primaryexpression"], 
     "SAMETERM": ["primaryexpression"], 
     "ISIRI": ["primaryexpression"], 
     "ISURI": ["primaryexpression"], 
     "ISBLANK": ["primaryexpression"], 
     "ISLITERAL": ["primaryexpression"], 
     "ISNUMERIC": ["primaryexpression"], 
     "TRUE": ["primaryexpression"], 
     "FALSE": ["primaryexpression"], 
     "COUNT": ["primaryexpression"], 
     "SUM": ["primaryexpression"], 
     "MIN": ["primaryexpression"], 
     "MAX": ["primaryexpression"], 
     "AVG": ["primaryexpression"], 
     "SAMPLE": ["primaryexpression"], 
     "GROUP_CONCAT": ["primaryexpression"], 
     "SUBSTR": ["primaryexpression"], 
     "REPLACE": ["primaryexpression"], 
     "REGEX": ["primaryexpression"], 
     "EXISTS": ["primaryexpression"], 
     "NOT": ["primaryexpression"], 
     "IRI_REF": ["primaryexpression"], 
     "STRING_LITERAL1": ["primaryexpression"], 
     "STRING_LITERAL2": ["primaryexpression"], 
     "STRING_LITERAL_LONG1": ["primaryexpression"], 
     "STRING_LITERAL_LONG2": ["primaryexpression"], 
     "INTEGER": ["primaryexpression"], 
     "DECIMAL": ["primaryexpression"], 
     "DOUBLE": ["primaryexpression"], 
     "INTEGER_POSITIVE": ["primaryexpression"], 
     "DECIMAL_POSITIVE": ["primaryexpression"], 
     "DOUBLE_POSITIVE": ["primaryexpression"], 
     "INTEGER_NEGATIVE": ["primaryexpression"], 
     "DECIMAL_NEGATIVE": ["primaryexpression"], 
     "DOUBLE_NEGATIVE": ["primaryexpression"], 
     "PNAME_LN": ["primaryexpression"], 
     "PNAME_NS": ["primaryexpression"]}, 
  "update" : {
     "LOAD": ["prologue","?[update1,?[;,update]]"], 
     "CLEAR": ["prologue","?[update1,?[;,update]]"], 
     "DROP": ["prologue","?[update1,?[;,update]]"], 
     "ADD": ["prologue","?[update1,?[;,update]]"], 
     "MOVE": ["prologue","?[update1,?[;,update]]"], 
     "COPY": ["prologue","?[update1,?[;,update]]"], 
     "CREATE": ["prologue","?[update1,?[;,update]]"], 
     "INSERT DATA": ["prologue","?[update1,?[;,update]]"], 
     "DELETE DATA": ["prologue","?[update1,?[;,update]]"], 
     "DELETE WHERE": ["prologue","?[update1,?[;,update]]"], 
     "WITH": ["prologue","?[update1,?[;,update]]"], 
     "DELETE": ["prologue","?[update1,?[;,update]]"], 
     "INSERT": ["prologue","?[update1,?[;,update]]"], 
     "BASE": ["prologue","?[update1,?[;,update]]"], 
     "PREFIX": ["prologue","?[update1,?[;,update]]"]}, 
  "update1" : {
     "LOAD": ["load"], 
     "CLEAR": ["clear"], 
     "DROP": ["drop"], 
     "ADD": ["add"], 
     "MOVE": ["move"], 
     "COPY": ["copy"], 
     "CREATE": ["create"], 
     "INSERT DATA": ["insertData"], 
     "DELETE DATA": ["deleteData"], 
     "DELETE WHERE": ["deleteWhere"], 
     "WITH": ["modify"], 
     "DELETE": ["modify"], 
     "INSERT": ["modify"]}, 
  "updateUnit" : {
     "BASE": ["update"], 
     "PREFIX": ["update"], 
     "LOAD": ["update"], 
     "CLEAR": ["update"], 
     "DROP": ["update"], 
     "ADD": ["update"], 
     "MOVE": ["update"], 
     "COPY": ["update"], 
     "CREATE": ["update"], 
     "INSERT DATA": ["update"], 
     "DELETE DATA": ["update"], 
     "DELETE WHERE": ["update"], 
     "WITH": ["update"], 
     "DELETE": ["update"], 
     "INSERT": ["update"]}, 
  "usingClause" : {
     "USING": ["USING","or([iRIref,[NAMED,iRIref]])"]}, 
  "valueLogical" : {
     "!": ["relationalexpression"], 
     "+": ["relationalexpression"], 
     "-": ["relationalexpression"], 
     "VAR1": ["relationalexpression"], 
     "VAR2": ["relationalexpression"], 
     "(": ["relationalexpression"], 
     "STR": ["relationalexpression"], 
     "LANG": ["relationalexpression"], 
     "LANGMATCHES": ["relationalexpression"], 
     "DATATYPE": ["relationalexpression"], 
     "BOUND": ["relationalexpression"], 
     "IRI": ["relationalexpression"], 
     "URI": ["relationalexpression"], 
     "BNODE": ["relationalexpression"], 
     "RAND": ["relationalexpression"], 
     "ABS": ["relationalexpression"], 
     "CEIL": ["relationalexpression"], 
     "FLOOR": ["relationalexpression"], 
     "ROUND": ["relationalexpression"], 
     "CONCAT": ["relationalexpression"], 
     "STRLEN": ["relationalexpression"], 
     "UCASE": ["relationalexpression"], 
     "LCASE": ["relationalexpression"], 
     "ENCODE_FOR_URI": ["relationalexpression"], 
     "CONTAINS": ["relationalexpression"], 
     "STRSTARTS": ["relationalexpression"], 
     "STRENDS": ["relationalexpression"], 
     "STRBEFORE": ["relationalexpression"], 
     "STRAFTER": ["relationalexpression"], 
     "YEAR": ["relationalexpression"], 
     "MONTH": ["relationalexpression"], 
     "DAY": ["relationalexpression"], 
     "HOURS": ["relationalexpression"], 
     "MINUTES": ["relationalexpression"], 
     "SECONDS": ["relationalexpression"], 
     "TIMEZONE": ["relationalexpression"], 
     "TZ": ["relationalexpression"], 
     "NOW": ["relationalexpression"], 
     "MD5": ["relationalexpression"], 
     "SHA1": ["relationalexpression"], 
     "SHA256": ["relationalexpression"], 
     "SHA384": ["relationalexpression"], 
     "SHA512": ["relationalexpression"], 
     "COALESCE": ["relationalexpression"], 
     "IF": ["relationalexpression"], 
     "STRLANG": ["relationalexpression"], 
     "STRDT": ["relationalexpression"], 
     "SAMETERM": ["relationalexpression"], 
     "ISIRI": ["relationalexpression"], 
     "ISURI": ["relationalexpression"], 
     "ISBLANK": ["relationalexpression"], 
     "ISLITERAL": ["relationalexpression"], 
     "ISNUMERIC": ["relationalexpression"], 
     "TRUE": ["relationalexpression"], 
     "FALSE": ["relationalexpression"], 
     "COUNT": ["relationalexpression"], 
     "SUM": ["relationalexpression"], 
     "MIN": ["relationalexpression"], 
     "MAX": ["relationalexpression"], 
     "AVG": ["relationalexpression"], 
     "SAMPLE": ["relationalexpression"], 
     "GROUP_CONCAT": ["relationalexpression"], 
     "SUBSTR": ["relationalexpression"], 
     "REPLACE": ["relationalexpression"], 
     "REGEX": ["relationalexpression"], 
     "EXISTS": ["relationalexpression"], 
     "NOT": ["relationalexpression"], 
     "IRI_REF": ["relationalexpression"], 
     "STRING_LITERAL1": ["relationalexpression"], 
     "STRING_LITERAL2": ["relationalexpression"], 
     "STRING_LITERAL_LONG1": ["relationalexpression"], 
     "STRING_LITERAL_LONG2": ["relationalexpression"], 
     "INTEGER": ["relationalexpression"], 
     "DECIMAL": ["relationalexpression"], 
     "DOUBLE": ["relationalexpression"], 
     "INTEGER_POSITIVE": ["relationalexpression"], 
     "DECIMAL_POSITIVE": ["relationalexpression"], 
     "DOUBLE_POSITIVE": ["relationalexpression"], 
     "INTEGER_NEGATIVE": ["relationalexpression"], 
     "DECIMAL_NEGATIVE": ["relationalexpression"], 
     "DOUBLE_NEGATIVE": ["relationalexpression"], 
     "PNAME_LN": ["relationalexpression"], 
     "PNAME_NS": ["relationalexpression"]}, 
  "var" : {
     "VAR1": ["VAR1"], 
     "VAR2": ["VAR2"]}, 
  "varOrTerm" : {
     "VAR1": ["var"], 
     "VAR2": ["var"], 
     "NIL": ["graphTerm"], 
     "IRI_REF": ["graphTerm"], 
     "TRUE": ["graphTerm"], 
     "FALSE": ["graphTerm"], 
     "BLANK_NODE_LABEL": ["graphTerm"], 
     "ANON": ["graphTerm"], 
     "PNAME_LN": ["graphTerm"], 
     "PNAME_NS": ["graphTerm"], 
     "STRING_LITERAL1": ["graphTerm"], 
     "STRING_LITERAL2": ["graphTerm"], 
     "STRING_LITERAL_LONG1": ["graphTerm"], 
     "STRING_LITERAL_LONG2": ["graphTerm"], 
     "INTEGER": ["graphTerm"], 
     "DECIMAL": ["graphTerm"], 
     "DOUBLE": ["graphTerm"], 
     "INTEGER_POSITIVE": ["graphTerm"], 
     "DECIMAL_POSITIVE": ["graphTerm"], 
     "DOUBLE_POSITIVE": ["graphTerm"], 
     "INTEGER_NEGATIVE": ["graphTerm"], 
     "DECIMAL_NEGATIVE": ["graphTerm"], 
     "DOUBLE_NEGATIVE": ["graphTerm"]}, 
  "varOriRIref" : {
     "VAR1": ["var"], 
     "VAR2": ["var"], 
     "IRI_REF": ["iRIref"], 
     "PNAME_LN": ["iRIref"], 
     "PNAME_NS": ["iRIref"]}, 
  "verb" : {
     "VAR1": ["varOriRIref"], 
     "VAR2": ["varOriRIref"], 
     "IRI_REF": ["varOriRIref"], 
     "PNAME_LN": ["varOriRIref"], 
     "PNAME_NS": ["varOriRIref"], 
     "a": ["a"]}, 
  "verbSimple" : {
     "VAR1": ["var"], 
     "VAR2": ["var"]}, 
  "verbpath" : {
     "^": ["path"], 
     "a": ["path"], 
     "!": ["path"], 
     "(": ["path"], 
     "IRI_REF": ["path"], 
     "PNAME_LN": ["path"], 
     "PNAME_NS": ["path"]}, 
  "whereClause" : {
     "{": ["?WHERE","groupGraphPattern"], 
     "WHERE": ["?WHERE","groupGraphPattern"]}
};


    function getTerminals()
    {
	var IRI_REF = '<[^<>\"\'\|\{\}\^\\\x00-\x20]*>';
	/*
	  PN_CHARS_BASE =	
	  '[A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]|[\\u10000-\\uEFFFF]';
	*/

	var PN_CHARS_BASE =	
	    '[A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]';
	var PN_CHARS_U = PN_CHARS_BASE+'|_';

	var PN_CHARS=  PN_CHARS_U+'|-|[0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]';
	var VARNAME = '('+PN_CHARS_U+'|[0-9])'+
	    '('+PN_CHARS_U+'|[0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040])*';
	var VAR1 = '\\?'+VARNAME;
	var VAR2 = '\\$'+VARNAME;

	var PN_PREFIX= '('+PN_CHARS_BASE+')((('+PN_CHARS+')|\\.)*('+PN_CHARS+'))?';
	var PN_LOCAL= '('+PN_CHARS_U+'|[0-9])((('+PN_CHARS+')|\\.)*('+PN_CHARS+'))?';

	var PNAME_NS = '('+PN_PREFIX+')?:';
	var PNAME_LN = PNAME_NS+PN_LOCAL;
	var BLANK_NODE_LABEL = '_:'+PN_LOCAL;
	var LANGTAG = '@[a-zA-Z]+(-[a-zA-Z0-9]+)*';

	var EXPONENT = '[eE][\\+-]?[0-9]+';
	var INTEGER = '[0-9]+';
	var DECIMAL = '(([0-9]+\\.[0-9]*)|(\\.[0-9]+))';
	var DOUBLE = 
	    '(([0-9]+\\.[0-9]*'+EXPONENT+')|'+
	    '(\\.[0-9]+'+EXPONENT+')|'+                    
	    '([0-9]+'+EXPONENT+'))';

	var INTEGER_POSITIVE = '\\+' + INTEGER;
	var DECIMAL_POSITIVE = '\\+' + DECIMAL;
	var DOUBLE_POSITIVE  = '\\+' + DOUBLE;
	var INTEGER_NEGATIVE = '-' + INTEGER;
	var DECIMAL_NEGATIVE = '-' + DECIMAL;
	var DOUBLE_NEGATIVE  = '-' + DOUBLE;

	var ECHAR = '\\\\[tbnrf\\\\"\']';

	var STRING_LITERAL1 = "'(([^\x27\x5C\x0A\x0D])|"+ECHAR+")*'";
	var STRING_LITERAL2 = '"(([^\x22\x5C\x0A\x0D])|'+ECHAR+')*"';
	var STRING_LITERAL_LONG1 = "'''(('|'')?([^'\\\\]|"+ECHAR+"))*'''";
	var STRING_LITERAL_LONG2 = '"""(("|"")?([^"\\\\]|'+ECHAR+'))*"""';

	var WS    =	'[\\x20\\x09\\x0D\\x0A]';
	// Careful! Code mirror feeds one line at a time with no \n
	// ... but otherwise comment is terminated by \n
	var COMMENT = '#([^\\n\\r]*[\\n\\r]|[^\\n\\r]*$)' ;
	var WS_OR_COMMENT_STAR = '('+WS+'|('+COMMENT+'))*';
	var NIL   = '\\('+WS_OR_COMMENT_STAR+'\\)';
	var ANON  =	'\\['+WS_OR_COMMENT_STAR+'\\]';
	var PLX	  =  	'PERCENT | PN_LOCAL_ESC';
	var PERCENT =  	"'%' HEX HEX";
	var HEX =  	'[0-9] | [A-F] | [a-f]';
	var PN_LOCAL_ESC = "'\' ( '_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | ':' | '/' | '?' | '#' | '@' | '%' )";

	var terminals=
	    { terminal:[
		    { name: "WS", 
		      regex:new RegExp("^"+WS+"+"), 
		      style:"sp-ws" }, 

		    { name: "COMMENT", 
		      regex:new RegExp("^"+COMMENT), 
		      style:"sp-comment" }, 
   { name: "IRI_REF", regex:new RegExp("^"+IRI_REF), style:"sp-uri"  }, 
   { name: "VAR2", regex:new RegExp("^"+VAR2), style:"sp-var"  }, 
   { name: "VAR1", regex:new RegExp("^"+VAR1), style:"sp-var"  }, 
   { name: "LANGTAG", regex:new RegExp("^"+LANGTAG), style:"sp-punc"  }, 
   { name: "DOUBLE", regex:new RegExp("^"+DOUBLE), style:"sp-number"  }, 
   { name: "DECIMAL", regex:new RegExp("^"+DECIMAL), style:"sp-number"  }, 
   { name: "INTEGER", regex:new RegExp("^"+INTEGER), style:"sp-number"  }, 
   { name: "DOUBLE_POSITIVE", regex:new RegExp("^"+DOUBLE_POSITIVE), style:"sp-number"  }, 
   { name: "DECIMAL_POSITIVE", regex:new RegExp("^"+DECIMAL_POSITIVE), style:"sp-number"  }, 
   { name: "INTEGER_POSITIVE", regex:new RegExp("^"+INTEGER_POSITIVE), style:"sp-number"  }, 
   { name: "DOUBLE_NEGATIVE", regex:new RegExp("^"+DOUBLE_NEGATIVE), style:"sp-number"  },   
   { name: "DECIMAL_NEGATIVE", regex:new RegExp("^"+DECIMAL_NEGATIVE), style:"sp-number"  },
   { name: "INTEGER_NEGATIVE", regex:new RegExp("^"+INTEGER_NEGATIVE), style:"sp-number"  }, 
   { name: "STRING_LITERAL_LONG1", regex:new RegExp("^"+STRING_LITERAL_LONG1), style:"sp-literal"  }, 
   { name: "STRING_LITERAL_LONG2", regex:new RegExp("^"+STRING_LITERAL_LONG2), style:"sp-literal"  }, 
   { name: "STRING_LITERAL1", regex:new RegExp("^"+STRING_LITERAL1), style:"sp-literal"  }, 
   { name: "STRING_LITERAL2", regex:new RegExp("^"+STRING_LITERAL2), style:"sp-literal"  }, 
   { name: "NIL", regex:new RegExp("^"+NIL), style:"sp-punc"  }, 
   { name: "ANON", regex:new RegExp("^"+ANON), style:"sp-punc"  }, 
   { name: "PNAME_LN", regex:new RegExp("^"+PNAME_LN), style:"sp-prefixed"  },    
   { name: "PNAME_NS", regex:new RegExp("^"+PNAME_NS), style:"sp-prefixed"  }, 
   { name: "BLANK_NODE_LABEL", regex:new RegExp("^"+BLANK_NODE_LABEL), style:"sp-prefixed"  }, 
],


punct: /^(\*|a|\.|\{|\}|,|\(|\)|;|\[|\]|\|\||&&|=|!=|!|<=|>=|<|>|\+|-|\/|\^\^)/ ,


keywords: /^(BASE|SELECT|ORDER|BY|FROM|GRAPH|STR|ISURI|PREFIX|CONSTRUCT|LIMIT|FROM|NAMED|OPTIONAL|ISIRI|DESCRIBE|OFFSET|WHERE|UNION|LANGMATCHES|LANG|ISLITERAL|ASK|DISTINCT|FILTER|DATATYPE|REGEX|REDUCED|BOUND|TRUE|SAMETERM|FALSE|AS|GROUP|HAVING|ASC|DESC|BINDINGS|UNDEF|SILENT|INTO|LOAD|CLEAR|DROP|CREATE|ADD|TO|MOVE|COPY|INSERT DATA|DELETE DATA|DELETE WHERE|WITH|DELETE|INSERT|USING|DEFAULT|ALL|SERVICE|BIND|MINUS|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISBLANK|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|GROUP_CONCAT)/i ,
//		whitespace: new RegExp("^"+WS+"*"),
//		comments: new RegExp("^"+COMMENT),
//		whitespace_or_comments: new RegExp("^"+WS_OR_COMMENT_STAR)

	    }
	return terminals;
    }

    function getPossibles(symbol)
    {
	var possibles=[], possiblesOb=ll1_table[symbol];
	if (possiblesOb!=undefined)
	    for (var property in possiblesOb) 
		possibles.push(property.toString());
	else
	    possibles.push(symbol);
	return possibles;
    }

    var tms= getTerminals();
    var terminal=tms.terminal;
    var keywords=tms.keywords;
    var punct=tms.punct;

    function tokenBase(stream, state) {
	
	function nextToken() {

	    var consumed=null;
 	    // Tokens defined by individual regular expressions
	    for (var i=0; i<terminal.length; ++i) {
		consumed= stream.match(terminal[i].regex,true,false);
		if (consumed) 
		    return { cat: terminal[i].name, 
			     style: terminal[i].style,
			     text: consumed[0]
			   };
	    }

	    // Keywords
	    consumed= stream.match(keywords,true,false);
	    if (consumed)
		return { cat: stream.current().toUpperCase(),
			 style: "sp-keyword",
			 text: consumed[0]
		       };
	
	    // Punctuation
	    consumed= stream.match(punct,true,false);
	    if (consumed) 
		return { cat: stream.current(),
			 style: "sp-punc",
			 text: consumed[0]
		       };
	    
	    // Token is invalid
	    // better consume something anyway, or else we're stuck
	    consumed= stream.match(/^.[A-Za-z0-9]*/,true,false);
	    return { cat:"<invalid_token>", 
		     style: "sp-invalid",
		     text: consumed[0]
		   };
	}

	function recordFailurePos() { 
	    // tokenOb.style= "sp-invalid";
	    var col= stream.column();
	    state.errorStartPos= col;
	    state.errorEndPos= col+tokenOb.text.length;
	};

	function setQueryType(s) {
	    if (s=="SELECT" || s=="CONSTRUCT" || s=="ASK" || s=="DESCRIBE")
		state.queryType=s;
	}

	// CodeMirror works with one line at a time,
	// but newline should behave like whitespace
	// - i.e. a definite break between tokens (for autocompleter)
	if (stream.pos==0) 
	    state.possibleCurrent= state.possibleNext;

	var tokenOb= nextToken();

	if (tokenOb.cat=="<invalid_token>") {
	    // set error state, and
	    if (state.OK==true) {
		state.OK=false;
		recordFailurePos();
	    }
	    //alert("Invalid:"+tokenOb.text);
	    return tokenOb.style;
	}

	if (tokenOb.cat == "WS" ||
	    tokenOb.cat == "COMMENT") {
	    state.possibleCurrent= state.possibleNext;
	    return(tokenOb.style)
	}
	// Otherwise, run the parser until the token is digested
	// or failure
	var finished= false;
	var topSymbol;
	var token= tokenOb.cat;

	// Incremental LL1 parse
	while(state.stack.length>0 && token && state.OK && !finished ) {
	    topSymbol= state.stack.pop();
	    
	    if (!ll1_table[topSymbol]) {
		// Top symbol is a terminal
		if (topSymbol==token) {
		    // Matching terminals
		    // - consume token from input stream
		    finished=true;
		    setQueryType(topSymbol);
		} else {
		    state.OK=false;
		    recordFailurePos();
		}
	    } else {
		// topSymbol is nonterminal
		//  - see if there is an entry for topSymbol 
		// and nextToken in table
		var nextSymbols= ll1_table[topSymbol][token];
		if (nextSymbols!=undefined) {
		    // Match - copy RHS of rule to stack
		    for (var i=nextSymbols.length-1; i>=0; --i)
			state.stack.push(nextSymbols[i]);
		} else {
		    // No match in table - fail
		    state.OK=false;
		    recordFailurePos();
		    state.stack.push(topSymbol);  // Shove topSymbol back on stack
		}
	    }
	} 

    	state.possibleCurrent= state.possibleNext;
	state.possibleNext= getPossibles(state.stack[state.stack.length-1]);

	//alert(tokenOb.style);
	return tokenOb.style;
    }

    
    var indentTop={
	"*[,, object]": 3,
	"?[verb, objectList]": 1,
	"object": 2,
	"objectList": 2,
	"propertyListNotEmpty": 1,
	"propertyList": 1,
    };

    var indentTable={
	"}":1,
	"]":0,
	")":1
    };

    function indent(state, textAfter) {
	var n = 0; // indent level
	var i=state.stack.length-1;
		
	if (/^[\}\]\)]/.test(textAfter)) {
	    // Skip stack items until after matching bracket
	    var closeBracket=textAfter.substr(0,1);
	    for( ;i>=0;--i)
	    {
		if (state.stack[i]==closeBracket)
		{--i; break};
	    }
	} else {
	    // Consider nullable non-terminals if at top of stack
	    var dn=indentTop[state.stack[i]];
	    if (dn) { n+=dn; --i}
	}
	for( ;i>=0;--i)
	{
	    var dn=indentTable[state.stack[i]];
	    if (dn) n+=dn;
	}
	return n * config.indentUnit;
    };
    
    return {
	token: tokenBase,
	startState: function(base) {
	    return {
		tokenize: tokenBase,
		OK: true, 
		errorStartPos: null,
		errorEndPos: null,
		queryType: null,
		possibleCurrent: getPossibles("query"),
		possibleNext: getPossibles("query"),
		stack: ["query"] }; },
	indent: indent,
	electricChars: "}])"
    };
});

